{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "fdb90fd0-cabd-45ae-9b53-a9b1cc1e5f55",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Stage 1:===================================>                     (15 + 8) / 24]\r"
     ]
    }
   ],
   "source": [
    "import datetime, warnings, scipy \n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib as mpl\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.patches as patches\n",
    "from matplotlib.patches import ConnectionPatch\n",
    "from collections import OrderedDict\n",
    "from matplotlib.gridspec import GridSpec\n",
    "#from mpl_toolkits.basemap import Basemap\n",
    "from sklearn import metrics, linear_model\n",
    "from sklearn.preprocessing import PolynomialFeatures, StandardScaler\n",
    "from sklearn.preprocessing import LabelEncoder, OneHotEncoder\n",
    "from sklearn.model_selection import train_test_split, cross_val_score, cross_val_predict\n",
    "from scipy.optimize import curve_fit\n",
    "plt.rcParams[\"patch.force_edgecolor\"] = True\n",
    "plt.style.use('fivethirtyeight')\n",
    "mpl.rc('patch', edgecolor = 'dimgray', linewidth=1)\n",
    "from IPython.core.interactiveshell import InteractiveShell\n",
    "InteractiveShell.ast_node_interactivity = \"last_expr\"\n",
    "pd.options.display.max_columns = 50\n",
    "%matplotlib inline\n",
    "warnings.filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "914e828f-50c9-4434-8796-8cf5ff389ceb",
   "metadata": {},
   "outputs": [],
   "source": [
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "from pyspark.sql.functions import col as column\n",
    "\n",
    "from pyspark.context import SparkContext as Context\n",
    "from pyspark.sql.session import SparkSession as Session\n",
    "import pyspark.sql.functions as Functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "632ede9a-1707-459c-a27c-ca203b1f87de",
   "metadata": {},
   "outputs": [],
   "source": [
    "dataset_path= \"hdfs://localhost:9000/user/csuftitan/mergedAirlineDelay.csv\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "976b5e64-59b3-4cd5-8db3-2afb8f2157dd",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: pyspark in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (3.5.0)\n",
      "Requirement already satisfied: py4j==0.10.9.7 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from pyspark) (0.10.9.7)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    }
   ],
   "source": [
    "!pip install pyspark\n",
    "from pyspark.sql import SparkSession\n",
    "\n",
    "# Create a Spark session\n",
    "spark = SparkSession.builder.appName(\"AirlineDelay\").getOrCreate()\n",
    "\n",
    "data_frame = spark.read.csv(dataset_path, header=True, inferSchema=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "5765d4a3-29d7-414f-aaf6-ca2bc7750069",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+----------+----------+-----------------+------+----+------------+--------+---------+------------+--------+---------+\n",
      "|   FL_DATE|OP_CARRIER|OP_CARRIER_FL_NUM|ORIGIN|DEST|CRS_DEP_TIME|DEP_TIME|DEP_DELAY|CRS_ARR_TIME|ARR_TIME|ARR_DELAY|\n",
      "+----------+----------+-----------------+------+----+------------+--------+---------+------------+--------+---------+\n",
      "|2016-01-01|        DL|             1248|   DTW| LAX|        1935|  1935.0|      0.0|        2144|  2120.0|    -24.0|\n",
      "|2016-01-01|        DL|             1251|   ATL| GRR|        2125|  2130.0|      5.0|        2321|  2319.0|     -2.0|\n",
      "|2016-01-01|        DL|             1254|   LAX| ATL|        2255|  2256.0|      1.0|         600|   547.0|    -13.0|\n",
      "|2016-01-01|        DL|             1255|   SLC| ATL|        1656|  1700.0|      4.0|        2229|  2213.0|    -16.0|\n",
      "|2016-01-01|        DL|             1256|   BZN| MSP|         900|  1012.0|     72.0|        1216|  1420.0|    124.0|\n",
      "+----------+----------+-----------------+------+----+------------+--------+---------+------------+--------+---------+\n",
      "only showing top 5 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "vars_to_remove = ['TAXI_OUT', 'TAXI_IN', 'WHEELS_ON', 'WHEELS_OFF', 'CANCELLED', 'CANCELLATION_CODE','DIVERTED',\n",
    "                  'CRS_ELAPSED_TIME','ACTUAL_ELAPSED_TIME','AIR_TIME','DISTANCE','CARRIER_DELAY','WEATHER_DELAY',\n",
    "                  'NAS_DELAY','SECURITY_DELAY','LATE_AIRCRAFT_DELAY','Unnamed: 27']\n",
    "data_frame = data_frame.drop(*vars_to_remove)\n",
    "# # data_frame = data_frame[['FL_DATE', 'OP_CARRIER', 'OP_CARRIER_FL_NUM',\n",
    "# #        'ORIGIN', 'DEST', 'CRS_DEP_TIME',\n",
    "# #        'DEP_TIME', 'ARRIVAL_TIME', 'ARRIVAL_DELAY',\n",
    "# #        'SCHEDULED_TIME', 'ELAPSED_TIME']]\n",
    "data_frame.count()\n",
    "data_frame.show(5)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "bd00b301-a44c-46ab-8ad1-77085e23858b",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Stage 8:======================================================>  (23 + 1) / 24]\r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+--------------+-----------------+------------------------+-------------+-----------+--------------------+-------------------+--------------------+-------------------+--------------------+--------------------+\n",
      "|FL_DATEmissing|OP_CARRIERmissing|OP_CARRIER_FL_NUMmissing|ORIGINmissing|DESTmissing| CRS_DEP_TIMEmissing|    DEP_TIMEmissing|    DEP_DELAYmissing|CRS_ARR_TIMEmissing|     ARR_TIMEmissing|    ARR_DELAYmissing|\n",
      "+--------------+-----------------+------------------------+-------------+-----------+--------------------+-------------------+--------------------+-------------------+--------------------+--------------------+\n",
      "|           0.0|              0.0|                     0.0|          0.0|        0.0|0.005017246955146382|0.01489488199233524|0.015235019293024288|0.00593205777667305|0.016413601403746148|0.012024329902712405|\n",
      "+--------------+-----------------+------------------------+-------------+-----------+--------------------+-------------------+--------------------+-------------------+--------------------+--------------------+\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    }
   ],
   "source": [
    "data_frame.agg(\n",
    "    *[(1 - (Functions.count(c) / Functions.count('*'))).alias(c + 'missing') for c in data_frame.columns]\n",
    ").show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "44b80505-1ece-4aec-b751-2b2aaafcad80",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "data": {
      "text/plain": [
       "25927765"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_frame.count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "06c949d9-0102-41ff-9bd8-fc007298d281",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Stage 14:==============================================>         (20 + 4) / 24]\r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+--------------+-----------------+------------------------+-------------+-----------+-------------------+---------------+----------------+-------------------+---------------+----------------+\n",
      "|FL_DATEmissing|OP_CARRIERmissing|OP_CARRIER_FL_NUMmissing|ORIGINmissing|DESTmissing|CRS_DEP_TIMEmissing|DEP_TIMEmissing|DEP_DELAYmissing|CRS_ARR_TIMEmissing|ARR_TIMEmissing|ARR_DELAYmissing|\n",
      "+--------------+-----------------+------------------------+-------------+-----------+-------------------+---------------+----------------+-------------------+---------------+----------------+\n",
      "|           0.0|              0.0|                     0.0|          0.0|        0.0|                0.0|            0.0|             0.0|                0.0|            0.0|             0.0|\n",
      "+--------------+-----------------+------------------------+-------------+-----------+-------------------+---------------+----------------+-------------------+---------------+----------------+\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    }
   ],
   "source": [
    "data_frame = data_frame.dropna()\n",
    "data_frame.agg(\n",
    "    *[(1 - (Functions.count(c) / Functions.count('*'))).alias(c + 'missing') for c in data_frame.columns]\n",
    ").show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "6b2194c3-d1f0-4663-8577-3d5f3c64d7ee",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "data": {
      "text/plain": [
       "25457608"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_frame.count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "89d8d5a0-dc4c-4e0e-b5e9-1462c08d39ec",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>IATA_CODE</th>\n",
       "      <th>AIRLINE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>UA</td>\n",
       "      <td>United Air Lines Inc.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>AA</td>\n",
       "      <td>American Airlines Inc.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>US</td>\n",
       "      <td>US Airways Inc.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>F9</td>\n",
       "      <td>Frontier Airlines Inc.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>B6</td>\n",
       "      <td>JetBlue Airways</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>OO</td>\n",
       "      <td>Skywest Airlines Inc.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>AS</td>\n",
       "      <td>Alaska Airlines Inc.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>WN</td>\n",
       "      <td>Southwest Airlines Co.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>DL</td>\n",
       "      <td>Delta Air Lines Inc.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>EV</td>\n",
       "      <td>Atlantic Southeast Airlines</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>MQ</td>\n",
       "      <td>American Eagle Airlines Inc.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>HA</td>\n",
       "      <td>Hawaiian Airlines Inc.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>OH</td>\n",
       "      <td>Comair Airlines</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>YV</td>\n",
       "      <td>Mesa Airlines</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>FL</td>\n",
       "      <td>AirTran Airways</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>CO</td>\n",
       "      <td>Continental Airlines</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>9E</td>\n",
       "      <td>Pinnacle Airlines</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>NW</td>\n",
       "      <td>Northwest Airlines</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>XE</td>\n",
       "      <td>ExpressJet Airlines</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   IATA_CODE                       AIRLINE\n",
       "0         UA         United Air Lines Inc.\n",
       "1         AA        American Airlines Inc.\n",
       "2         US               US Airways Inc.\n",
       "3         F9        Frontier Airlines Inc.\n",
       "4         B6               JetBlue Airways\n",
       "5         OO         Skywest Airlines Inc.\n",
       "6         AS          Alaska Airlines Inc.\n",
       "7         WN        Southwest Airlines Co.\n",
       "8         DL          Delta Air Lines Inc.\n",
       "9         EV   Atlantic Southeast Airlines\n",
       "10        MQ  American Eagle Airlines Inc.\n",
       "11        HA        Hawaiian Airlines Inc.\n",
       "12        OH               Comair Airlines\n",
       "13        YV                 Mesa Airlines\n",
       "14        FL               AirTran Airways\n",
       "15        CO          Continental Airlines\n",
       "16        9E             Pinnacle Airlines\n",
       "17        NW            Northwest Airlines\n",
       "18        XE           ExpressJet Airlines"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from hdfs import InsecureClient\n",
    "import pandas as pd\n",
    "from io import StringIO\n",
    "\n",
    "# Connect to HDFS\n",
    "hdfs_client = InsecureClient('http://localhost:9870', user='csuftitan')\n",
    "\n",
    "# Define the HDFS file path\n",
    "hdfs_path = '/user/csuftitan/airlines.csv'\n",
    "\n",
    "# Read the CSV file from HDFS\n",
    "with hdfs_client.read(hdfs_path) as reader:\n",
    "    content = reader.read()\n",
    "    airlines_names = pd.read_csv(StringIO(content.decode('utf-8')))\n",
    "\n",
    "# Display the DataFrame\n",
    "airlines_names"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "523fd437-0c26-4965-a830-f8dbb9870132",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Stage 20:===================================================>    (22 + 2) / 24]\r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-----------------+-------+\n",
      "|       OP_CARRIER|  count|\n",
      "+-----------------+-------+\n",
      "|OP_UNIQUE_CARRIER|      1|\n",
      "|       OP_CARRIER|      2|\n",
      "|               VX| 155092|\n",
      "|               G4| 199635|\n",
      "|               HA| 323512|\n",
      "|               YV| 429680|\n",
      "|               F9| 446293|\n",
      "|               9E| 484163|\n",
      "|               OH| 547431|\n",
      "|               MQ| 599155|\n",
      "|               YX| 625867|\n",
      "|               NK| 661859|\n",
      "|               AS| 863063|\n",
      "|               EV|1130861|\n",
      "|               B6|1158120|\n",
      "|               UA|2349024|\n",
      "|               OO|2866227|\n",
      "|               AA|3607399|\n",
      "|               DL|3761550|\n",
      "|               WN|5248674|\n",
      "+-----------------+-------+\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    }
   ],
   "source": [
    "count = data_frame.groupBy('OP_CARRIER').count().sort('count')\n",
    "count.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "67bada91-c838-4589-8f26-d9e749df24ab",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-----------------+--------------+--------------+------------------+--------------+--------------+------------------+\n",
      "|       OP_CARRIER|max(DEP_DELAY)|min(DEP_DELAY)|    avg(DEP_DELAY)|max(ARR_DELAY)|min(ARR_DELAY)|    avg(ARR_DELAY)|\n",
      "+-----------------+--------------+--------------+------------------+--------------+--------------+------------------+\n",
      "|               9E|         997.0|          -1.0| 15.95453184154923|         999.0|          -1.0| 243.7437495223716|\n",
      "|               AA|         999.0|          -1.0|11.447678507423216|        999.00|          -1.0|257.87117588046124|\n",
      "|               AS|         994.0|          -1.0| 7.105476656976374|         993.0|          -1.0|398.44890929167394|\n",
      "|               B6|         99.00|          -1.0|15.810006735053362|        997.00|          -1.0| 289.9548889579664|\n",
      "|               DL|         999.0|          -1.0|10.347579588201672|         999.0|          -1.0|235.22728848480014|\n",
      "|               EV|         999.0|          -1.0| 12.21614769631281|         999.0|          -1.0| 57.87453895748461|\n",
      "|               F9|         99.00|          -1.0| 15.75002296697461|         995.0|          -1.0|314.55995948849744|\n",
      "|               G4|         99.00|          -1.0|12.955639041250281|        999.00|          -1.0| 458.4078292884514|\n",
      "|               HA|         996.0|          -1.0|3.6421863794851506|         995.0|          -1.0| 194.4351894211034|\n",
      "|               MQ|         99.00|          -1.0| 13.56347689662942|        999.00|          -1.0|238.11788101576386|\n",
      "|               NK|         997.0|          -1.0|12.055792850138776|        998.00|          -1.0| 305.1487809337034|\n",
      "|               OH|         99.00|          -1.0|15.377357146380092|        999.00|          -1.0| 208.4555733964646|\n",
      "|               OO|         999.0|          -1.0|12.148641053203393|         999.0|          -1.0|144.33158713528272|\n",
      "|       OP_CARRIER|     DEP_DELAY|     DEP_DELAY|              NULL|     ARR_DELAY|     ARR_DELAY|              NULL|\n",
      "|OP_UNIQUE_CARRIER|      TAXI_OUT|      TAXI_OUT|              NULL|      DISTANCE|      DISTANCE|              NULL|\n",
      "|               UA|         999.0|          -1.0|12.777436501287344|         999.0|          -1.0| 317.4482512737205|\n",
      "|               VX|          99.0|          -1.0|11.529698501534574|          99.0|          -1.0| 8.437540298661439|\n",
      "|               WN|         99.00|          -1.0| 10.68059189806797|        999.00|          -1.0|191.04336771535057|\n",
      "|               YV|         999.0|          -1.0|14.411885589275741|        999.00|          -1.0|295.97264475889034|\n",
      "|               YX|         996.0|          -1.0|  14.3861922740774|         998.0|          -1.0|305.64818244131743|\n",
      "+-----------------+--------------+--------------+------------------+--------------+--------------+------------------+\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-------+-----------------+--------------+--------------+------------------+--------------+--------------+------------------+\n",
      "|  count|       OP_CARRIER|max(DEP_DELAY)|min(DEP_DELAY)|    avg(DEP_DELAY)|max(ARR_DELAY)|min(ARR_DELAY)|    avg(ARR_DELAY)|\n",
      "+-------+-----------------+--------------+--------------+------------------+--------------+--------------+------------------+\n",
      "| 484163|               9E|         997.0|          -1.0| 15.95453184154923|         999.0|          -1.0| 243.7437495223716|\n",
      "|3607399|               AA|         999.0|          -1.0|11.447678507423216|        999.00|          -1.0|257.87117588046124|\n",
      "| 863063|               AS|         994.0|          -1.0| 7.105476656976374|         993.0|          -1.0|398.44890929167394|\n",
      "|1158120|               B6|         99.00|          -1.0|15.810006735053362|        997.00|          -1.0| 289.9548889579664|\n",
      "|3761550|               DL|         999.0|          -1.0|10.347579588201672|         999.0|          -1.0|235.22728848480014|\n",
      "|1130861|               EV|         999.0|          -1.0| 12.21614769631281|         999.0|          -1.0| 57.87453895748461|\n",
      "| 446293|               F9|         99.00|          -1.0| 15.75002296697461|         995.0|          -1.0|314.55995948849744|\n",
      "| 199635|               G4|         99.00|          -1.0|12.955639041250281|        999.00|          -1.0| 458.4078292884514|\n",
      "| 323512|               HA|         996.0|          -1.0|3.6421863794851506|         995.0|          -1.0| 194.4351894211034|\n",
      "| 599155|               MQ|         99.00|          -1.0| 13.56347689662942|        999.00|          -1.0|238.11788101576386|\n",
      "| 661859|               NK|         997.0|          -1.0|12.055792850138776|        998.00|          -1.0| 305.1487809337034|\n",
      "| 547431|               OH|         99.00|          -1.0|15.377357146380092|        999.00|          -1.0| 208.4555733964646|\n",
      "|2866227|               OO|         999.0|          -1.0|12.148641053203393|         999.0|          -1.0|144.33158713528272|\n",
      "|      2|       OP_CARRIER|     DEP_DELAY|     DEP_DELAY|              NULL|     ARR_DELAY|     ARR_DELAY|              NULL|\n",
      "|      1|OP_UNIQUE_CARRIER|      TAXI_OUT|      TAXI_OUT|              NULL|      DISTANCE|      DISTANCE|              NULL|\n",
      "|2349024|               UA|         999.0|          -1.0|12.777436501287344|         999.0|          -1.0| 317.4482512737205|\n",
      "| 155092|               VX|          99.0|          -1.0|11.529698501534574|          99.0|          -1.0| 8.437540298661439|\n",
      "|5248674|               WN|         99.00|          -1.0| 10.68059189806797|        999.00|          -1.0|191.04336771535057|\n",
      "| 429680|               YV|         999.0|          -1.0|14.411885589275741|        999.00|          -1.0|295.97264475889034|\n",
      "| 625867|               YX|         996.0|          -1.0|  14.3861922740774|         998.0|          -1.0|305.64818244131743|\n",
      "+-------+-----------------+--------------+--------------+------------------+--------------+--------------+------------------+\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Stage 33:===================================================>    (22 + 2) / 24]\r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-----------------+-------+--------------+------------------+--------------+--------------+------------------+--------------+\n",
      "|       OP_CARRIER|  count|max(DEP_DELAY)|    avg(DEP_DELAY)|min(DEP_DELAY)|max(ARR_DELAY)|    avg(ARR_DELAY)|min(ARR_DELAY)|\n",
      "+-----------------+-------+--------------+------------------+--------------+--------------+------------------+--------------+\n",
      "|OP_UNIQUE_CARRIER|      1|      TAXI_OUT|              NULL|      TAXI_OUT|      DISTANCE|              NULL|      DISTANCE|\n",
      "|       OP_CARRIER|      2|     DEP_DELAY|              NULL|     DEP_DELAY|     ARR_DELAY|              NULL|     ARR_DELAY|\n",
      "|               VX| 155092|          99.0|11.529698501534574|          -1.0|          99.0| 8.437540298661439|          -1.0|\n",
      "|               G4| 199635|         99.00|12.955639041250281|          -1.0|        999.00| 458.4078292884514|          -1.0|\n",
      "|               HA| 323512|         996.0|3.6421863794851506|          -1.0|         995.0| 194.4351894211034|          -1.0|\n",
      "|               YV| 429680|         999.0|14.411885589275741|          -1.0|        999.00|295.97264475889034|          -1.0|\n",
      "|               F9| 446293|         99.00| 15.75002296697461|          -1.0|         995.0|314.55995948849744|          -1.0|\n",
      "|               9E| 484163|         997.0| 15.95453184154923|          -1.0|         999.0| 243.7437495223716|          -1.0|\n",
      "|               OH| 547431|         99.00|15.377357146380092|          -1.0|        999.00| 208.4555733964646|          -1.0|\n",
      "|               MQ| 599155|         99.00| 13.56347689662942|          -1.0|        999.00|238.11788101576386|          -1.0|\n",
      "|               YX| 625867|         996.0|  14.3861922740774|          -1.0|         998.0|305.64818244131743|          -1.0|\n",
      "|               NK| 661859|         997.0|12.055792850138776|          -1.0|        998.00| 305.1487809337034|          -1.0|\n",
      "|               AS| 863063|         994.0| 7.105476656976374|          -1.0|         993.0|398.44890929167394|          -1.0|\n",
      "|               EV|1130861|         999.0| 12.21614769631281|          -1.0|         999.0| 57.87453895748461|          -1.0|\n",
      "|               B6|1158120|         99.00|15.810006735053362|          -1.0|        997.00| 289.9548889579664|          -1.0|\n",
      "|               UA|2349024|         999.0|12.777436501287344|          -1.0|         999.0| 317.4482512737205|          -1.0|\n",
      "|               OO|2866227|         999.0|12.148641053203393|          -1.0|         999.0|144.33158713528272|          -1.0|\n",
      "|               AA|3607399|         999.0|11.447678507423216|          -1.0|        999.00|257.87117588046124|          -1.0|\n",
      "|               DL|3761550|         999.0|10.347579588201672|          -1.0|         999.0|235.22728848480014|          -1.0|\n",
      "|               WN|5248674|         99.00| 10.68059189806797|          -1.0|        999.00|191.04336771535057|          -1.0|\n",
      "+-----------------+-------+--------------+------------------+--------------+--------------+------------------+--------------+\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    }
   ],
   "source": [
    "global_withoutcount = data_frame.groupBy('OP_CARRIER').agg(\n",
    "    Functions.max('DEP_DELAY'), Functions.min('DEP_DELAY'), Functions.mean('DEP_DELAY'),\n",
    "    Functions.max('ARR_DELAY'), Functions.min('ARR_DELAY'), Functions.mean('ARR_DELAY')\n",
    ")\n",
    "global_withoutcount.show()\n",
    "\n",
    "global_stats = count.join(global_withoutcount, on=[count.OP_CARRIER == global_withoutcount.OP_CARRIER])\n",
    "global_stats = global_stats.drop(count.OP_CARRIER)\n",
    "global_stats.show()\n",
    "\n",
    "global_stats = global_stats.select(\n",
    "    'OP_CARRIER', 'count', 'max(DEP_DELAY)', 'avg(DEP_DELAY)', 'min(DEP_DELAY)',\n",
    "    'max(ARR_DELAY)', 'avg(ARR_DELAY)', 'min(ARR_DELAY)'\n",
    ").sort('count')\n",
    "global_stats.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "44c83dd1-a736-4bfb-bf28-cc2cb1c78e10",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-----------------+-------+\n",
      "|       OP_CARRIER|  count|\n",
      "+-----------------+-------+\n",
      "|OP_UNIQUE_CARRIER|      1|\n",
      "|       OP_CARRIER|      2|\n",
      "|               VX| 155092|\n",
      "|               G4| 199635|\n",
      "|               HA| 323512|\n",
      "|               YV| 429680|\n",
      "|               F9| 446293|\n",
      "|               9E| 484163|\n",
      "|               OH| 547431|\n",
      "|               MQ| 599155|\n",
      "|               YX| 625867|\n",
      "|               NK| 661859|\n",
      "|               AS| 863063|\n",
      "|               EV|1130861|\n",
      "|               B6|1158120|\n",
      "|               UA|2349024|\n",
      "|               OO|2866227|\n",
      "|               AA|3607399|\n",
      "|               DL|3761550|\n",
      "|               WN|5248674|\n",
      "+-----------------+-------+\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+------+-----+\n",
      "|ORIGIN|count|\n",
      "+------+-----+\n",
      "|   LIH|  207|\n",
      "|   KOA|  929|\n",
      "|   DAY| 1625|\n",
      "|   OGG| 1736|\n",
      "|   CAK| 1943|\n",
      "|   FNT| 2856|\n",
      "|   HNL| 2983|\n",
      "|   DSM| 4282|\n",
      "|   RIC| 4323|\n",
      "|   GSP| 4325|\n",
      "|   PWM| 4867|\n",
      "|   PNS| 5094|\n",
      "|   CRP| 5248|\n",
      "|   ICT| 5685|\n",
      "|   AMA| 6821|\n",
      "|   ROC| 6951|\n",
      "|   CVG| 7454|\n",
      "|   ECP| 7490|\n",
      "|   HRL| 7847|\n",
      "|   GRR| 8107|\n",
      "+------+-----+\n",
      "only showing top 20 rows\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Stage 44:===================================================>    (22 + 2) / 24]\r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+----+-----+\n",
      "|DEST|count|\n",
      "+----+-----+\n",
      "| TPA|   10|\n",
      "| MCO|   61|\n",
      "| LAS| 1276|\n",
      "| DAL| 1472|\n",
      "| PHX| 1740|\n",
      "| DEN| 2603|\n",
      "| STL| 2811|\n",
      "| BNA| 2864|\n",
      "| ATL| 3405|\n",
      "| BWI| 4307|\n",
      "| MDW| 6016|\n",
      "+----+-----+\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    }
   ],
   "source": [
    "data_frame.groupBy('OP_CARRIER').count().alias('Count').orderBy('Count').show()\n",
    "data_frame.filter(\"OP_CARRIER == 'WN'\").groupBy('ORIGIN').count().alias('Count').orderBy('Count').show()\n",
    "data_frame.filter(\"OP_CARRIER == 'WN'\").filter(\"ORIGIN == 'DTW'\").groupBy('DEST').count().alias('Count').orderBy('Count').show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "e8ce1fa8-1e60-412c-919e-b888f35c6c6f",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Stage 47:=====================================================>  (23 + 1) / 24]\r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "92\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    }
   ],
   "source": [
    "print(data_frame.filter(\"OP_CARRIER == 'WN'\").groupBy('ORIGIN').count().alias('Count').orderBy('Count').count())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "05b71074-89d7-4c3f-98bd-e82fd069c0d2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+----------+----------+-----------------+------+----+------------+--------+---------+------------+--------+---------+\n",
      "|   FL_DATE|OP_CARRIER|OP_CARRIER_FL_NUM|ORIGIN|DEST|CRS_DEP_TIME|DEP_TIME|DEP_DELAY|CRS_ARR_TIME|ARR_TIME|ARR_DELAY|\n",
      "+----------+----------+-----------------+------+----+------------+--------+---------+------------+--------+---------+\n",
      "|2016-01-01|        DL|             1248|   DTW| LAX|        1935|  1935.0|      0.0|        2144|  2120.0|    -24.0|\n",
      "|2016-01-01|        DL|             1251|   ATL| GRR|        2125|  2130.0|      5.0|        2321|  2319.0|     -2.0|\n",
      "|2016-01-01|        DL|             1254|   LAX| ATL|        2255|  2256.0|      1.0|         600|   547.0|    -13.0|\n",
      "|2016-01-01|        DL|             1255|   SLC| ATL|        1656|  1700.0|      4.0|        2229|  2213.0|    -16.0|\n",
      "|2016-01-01|        DL|             1256|   BZN| MSP|         900|  1012.0|     72.0|        1216|  1420.0|    124.0|\n",
      "+----------+----------+-----------------+------+----+------------+--------+---------+------------+--------+---------+\n",
      "only showing top 5 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "data_frame.show(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "eaf554fa-4d38-447e-8082-da1f8f05a60f",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-----------------+-------+\n",
      "|       OP_CARRIER|  count|\n",
      "+-----------------+-------+\n",
      "|OP_UNIQUE_CARRIER|      1|\n",
      "|       OP_CARRIER|      2|\n",
      "|               VX| 155092|\n",
      "|               G4| 199635|\n",
      "|               HA| 323512|\n",
      "|               YV| 429680|\n",
      "|               F9| 446293|\n",
      "|               9E| 484163|\n",
      "|               OH| 547431|\n",
      "|               MQ| 599155|\n",
      "|               YX| 625867|\n",
      "|               NK| 661859|\n",
      "|               AS| 863063|\n",
      "|               EV|1130861|\n",
      "|               B6|1158120|\n",
      "|               UA|2349024|\n",
      "|               OO|2866227|\n",
      "|               AA|3607399|\n",
      "|               DL|3761550|\n",
      "|               WN|5248674|\n",
      "+-----------------+-------+\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+------+-----+\n",
      "|ORIGIN|count|\n",
      "+------+-----+\n",
      "|   LIH|  207|\n",
      "|   KOA|  929|\n",
      "|   DAY| 1625|\n",
      "|   OGG| 1736|\n",
      "|   CAK| 1943|\n",
      "|   FNT| 2856|\n",
      "|   HNL| 2983|\n",
      "|   DSM| 4282|\n",
      "|   RIC| 4323|\n",
      "|   GSP| 4325|\n",
      "|   PWM| 4867|\n",
      "|   PNS| 5094|\n",
      "|   CRP| 5248|\n",
      "|   ICT| 5685|\n",
      "|   AMA| 6821|\n",
      "|   ROC| 6951|\n",
      "|   CVG| 7454|\n",
      "|   ECP| 7490|\n",
      "|   HRL| 7847|\n",
      "|   GRR| 8107|\n",
      "+------+-----+\n",
      "only showing top 20 rows\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Stage 60:==========================================>             (18 + 6) / 24]\r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+----+-----+\n",
      "|DEST|count|\n",
      "+----+-----+\n",
      "| TPA|   10|\n",
      "| MCO|   61|\n",
      "| LAS| 1276|\n",
      "| DAL| 1472|\n",
      "| PHX| 1740|\n",
      "| DEN| 2603|\n",
      "| STL| 2811|\n",
      "| BNA| 2864|\n",
      "| ATL| 3405|\n",
      "| BWI| 4307|\n",
      "| MDW| 6016|\n",
      "+----+-----+\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    }
   ],
   "source": [
    "data_frame.groupBy('OP_CARRIER').count().alias('Count').orderBy('Count').show()\n",
    "data_frame.filter(\"OP_CARRIER == 'WN'\").groupBy('ORIGIN').count().alias('Count').orderBy('Count').show()\n",
    "data_frame.filter(\"OP_CARRIER == 'WN'\").filter(\"ORIGIN == 'DTW'\").groupBy('DEST').count().alias('Count').orderBy('Count').show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "54c234a7-cce6-4ff4-b13f-3fc64050df52",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-----------------+-------+\n",
      "|       OP_CARRIER|  count|\n",
      "+-----------------+-------+\n",
      "|OP_UNIQUE_CARRIER|      1|\n",
      "|       OP_CARRIER|      2|\n",
      "|               VX| 155092|\n",
      "|               G4| 199635|\n",
      "|               HA| 323512|\n",
      "|               YV| 429680|\n",
      "|               F9| 446293|\n",
      "|               9E| 484163|\n",
      "|               OH| 547431|\n",
      "|               MQ| 599155|\n",
      "|               YX| 625867|\n",
      "|               NK| 661859|\n",
      "|               AS| 863063|\n",
      "|               EV|1130861|\n",
      "|               B6|1158120|\n",
      "|               UA|2349024|\n",
      "|               OO|2866227|\n",
      "|               AA|3607399|\n",
      "|               DL|3761550|\n",
      "|               WN|5248674|\n",
      "+-----------------+-------+\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+------+-----+\n",
      "|ORIGIN|count|\n",
      "+------+-----+\n",
      "|   LIH|  207|\n",
      "|   KOA|  929|\n",
      "|   DAY| 1625|\n",
      "|   OGG| 1736|\n",
      "|   CAK| 1943|\n",
      "|   FNT| 2856|\n",
      "|   HNL| 2983|\n",
      "|   DSM| 4282|\n",
      "|   RIC| 4323|\n",
      "|   GSP| 4325|\n",
      "|   PWM| 4867|\n",
      "|   PNS| 5094|\n",
      "|   CRP| 5248|\n",
      "|   ICT| 5685|\n",
      "|   AMA| 6821|\n",
      "|   ROC| 6951|\n",
      "|   CVG| 7454|\n",
      "|   ECP| 7490|\n",
      "|   HRL| 7847|\n",
      "|   GRR| 8107|\n",
      "+------+-----+\n",
      "only showing top 20 rows\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Stage 69:==============================================>         (20 + 4) / 24]\r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+----+-----+\n",
      "|DEST|count|\n",
      "+----+-----+\n",
      "| TPA|   10|\n",
      "| MCO|   61|\n",
      "| LAS| 1276|\n",
      "| DAL| 1472|\n",
      "| PHX| 1740|\n",
      "| DEN| 2603|\n",
      "| STL| 2811|\n",
      "| BNA| 2864|\n",
      "| ATL| 3405|\n",
      "| BWI| 4307|\n",
      "| MDW| 6016|\n",
      "+----+-----+\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    }
   ],
   "source": [
    "data_frame.groupBy('OP_CARRIER').count().alias('Count').orderBy('Count').show()\n",
    "data_frame.filter(\"OP_CARRIER == 'WN'\").groupBy('ORIGIN').count().alias('Count').orderBy('Count').show()\n",
    "data_frame.filter(\"OP_CARRIER == 'WN'\").filter(\"ORIGIN == 'DTW'\").groupBy('DEST').count().alias('Count').orderBy('Count').show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "f763d237-e8e0-4128-81ca-211b93a83ffb",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Stage 72:=====================================================>  (23 + 1) / 24]\r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "92\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    }
   ],
   "source": [
    "print(data_frame.filter(\"OP_CARRIER == 'WN'\").groupBy('ORIGIN').count().alias('Count').orderBy('Count').count())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "08926afc-84ab-486c-887d-45b45d7c168f",
   "metadata": {},
   "outputs": [],
   "source": [
    "data_frame = data_frame.sample(False, 0.1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "25716461-e643-4d3a-97b9-7d9f58941c54",
   "metadata": {},
   "outputs": [],
   "source": [
    "(train_DF, test_DF) = data_frame.randomSplit([.7, .3], seed=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "1a656621-3183-43dd-a214-9bd2172e8295",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_op_carrier(data_frame, op_carrier):\n",
    "    data_frame = data_frame[(data_frame['OP_CARRIER'] == op_carrier)]\n",
    "    return data_frame"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "a04d43bb-1a5a-4cfd-8d0c-15d63d173b31",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_flight_delays(data_frame, origin, extrem_values=False):\n",
    "    data_frame = data_frame[(data_frame['ORIGIN'] == origin)]\n",
    "    if extrem_values:\n",
    "        data_frame = data_frame.filter(data_frame.DEP_DELAY.between(-60, 60))\n",
    "    df2 = data_frame.groupBy(\"CRS_DEP_TIME\")\n",
    "    df3 = df2.agg({\"DEP_DELAY\": \"mean\", 'CRS_DEP_TIME': 'count'}).withColumn('ORIGIN', Functions.lit(origin)).orderBy('count(CRS_DEP_TIME)', ascending=False)\n",
    "    return df3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "6f8cd984-94ed-405d-be9f-02b862280a13",
   "metadata": {},
   "outputs": [],
   "source": [
    "raw1 = get_op_carrier(data_frame, 'WN')\n",
    "\n",
    "test1 = get_flight_delays(raw1, 'DTW', False)\n",
    "test2 = get_flight_delays(raw1, 'DTW', True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "8d5d13cd-0b67-483d-ac96-dd90783256b5",
   "metadata": {},
   "outputs": [],
   "source": [
    "from pyspark.sql.types import FloatType\n",
    "from pyspark.sql.functions import col\n",
    "from sklearn import linear_model\n",
    "import numpy as np\n",
    "\n",
    "def linear_regression(test):\n",
    "    # Selecting and ordering the required columns\n",
    "    test = test[['avg(DEP_DELAY)', 'CRS_DEP_TIME']].orderBy('CRS_DEP_TIME')\n",
    "    \n",
    "    # Casting columns to FloatType for regression\n",
    "    test = test.withColumn('CRS_DEP_TIME', test['CRS_DEP_TIME'].cast(FloatType()))\n",
    "    test = test.withColumn('avg(DEP_DELAY)', test['avg(DEP_DELAY)'].cast(FloatType()))\n",
    "    \n",
    "    # Extracting X and Y data arrays for regression\n",
    "    X = np.array(test.select('CRS_DEP_TIME').collect())\n",
    "    Y = np.array(test.select('avg(DEP_DELAY)').collect())\n",
    "    X = X.reshape(len(X), 1)\n",
    "    Y = Y.reshape(len(Y), 1)\n",
    "    \n",
    "    # Performing linear regression\n",
    "    regr = linear_model.LinearRegression()\n",
    "    regr.fit(X, Y)\n",
    "    \n",
    "    # Predicting Y values based on the trained model\n",
    "    result = regr.predict(X)\n",
    "    \n",
    "    return X, Y, result  # Returns the original X, Y, and predicted Y values\n",
    "# This function performs linear regression on 'avg(DEP_DELAY)' against 'CRS_DEP_TIME' from the input DataFrame 'test'.\n",
    "# It casts columns to the appropriate data types and uses sklearn's LinearRegression model for prediction.\n",
    "# The returned values include the original X and Y data arrays along with the predicted Y values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "31146be9-1c26-4026-845c-6c1557b8536c",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    }
   ],
   "source": [
    "# Performs linear regression on 'test1' DataFrame, capturing X1 and Y1 arrays and the predicted result1.\n",
    "# 'test1' represents flight delays from 'WN' carrier for 'DTW' origin without considering extreme values.\n",
    "# The function 'linear_regression' casts columns, applies sklearn's LinearRegression, and predicts Y values based on X.\n",
    "\n",
    "# Performs linear regression on 'test2' DataFrame, capturing X2 and Y2 arrays and the predicted result2.\n",
    "# 'test2' represents flight delays from 'WN' carrier for 'DTW' origin considering extreme values.\n",
    "# Similar to 'test1', this uses the 'linear_regression' function to compute regression on adjusted data.\n",
    "\n",
    "X1, Y1, result1 = linear_regression(test1)\n",
    "X2, Y2, result2 = linear_regression(test2)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "d1ec0209-1a0d-4647-ac06-22294eb6f51e",
   "metadata": {},
   "outputs": [],
   "source": [
    "class FigureStyle():\n",
    "    # Initializes the figure style\n",
    "    def __init__(self, size_x=11, size_y=5, nrows=1, ncols=1):\n",
    "        sns.set_style(\"white\")\n",
    "        sns.set_context(\"notebook\", font_scale=1.2, rc={\"lines.linewidth\": 2.5})\n",
    "        self.figure, axes = plt.subplots(nrows=nrows, ncols=ncols, figsize=(size_x, size_y,))\n",
    "        # Convert self.axes to 2D array\n",
    "        if nrows == 1 and ncols == 1:\n",
    "            self.axes = np.reshape(axes, (1, -1))\n",
    "        elif nrows == 1:\n",
    "            self.axes = np.reshape(axes, (1, -1))\n",
    "        elif ncols == 1:\n",
    "            self.axes = np.reshape(axes, (-1, 1))\n",
    "\n",
    "    # Updates the current position within the subplot grid\n",
    "    def pos_update(self, ix, iy):\n",
    "        self.ix, self.iy = ix, iy\n",
    "\n",
    "    # Sets the style for the current subplot\n",
    "    def style(self):\n",
    "        self.axes[self.ix, self.iy].spines['right'].set_visible(False)\n",
    "        self.axes[self.ix, self.iy].spines['top'].set_visible(False)\n",
    "        self.axes[self.ix, self.iy].yaxis.grid(color='lightgray', linestyle=':')\n",
    "        self.axes[self.ix, self.iy].xaxis.grid(color='lightgray', linestyle=':')\n",
    "        self.axes[self.ix, self.iy].tick_params(axis='both', which='major', labelsize=10, size=5)\n",
    "\n",
    "    # Draws and customizes the legend for the current subplot\n",
    "    def draw_legend(self, location='upper right'):\n",
    "        legend = self.axes[self.ix, self.iy].legend(loc=location, shadow=True, facecolor='g', frameon=True)\n",
    "        legend.get_frame().set_facecolor('whitesmoke')\n",
    "\n",
    "    # Plots a line graph with various customization options\n",
    "    def custom_plot(self, x, y, color='b', linestyle='-', linewidth=1, marker=None, label=''):\n",
    "        if marker:\n",
    "            markerfacecolor, marker, markersize = marker[:]\n",
    "            self.axes[self.ix, self.iy].plot(x, y, color=color, linestyle=linestyle, linewidth=linewidth,\n",
    "                                             marker=marker, label=label, markerfacecolor=markerfacecolor,\n",
    "                                             markersize=markersize)\n",
    "        else:\n",
    "            self.axes[self.ix, self.iy].plot(x, y, color=color, linestyle=linestyle, linewidth=linewidth,\n",
    "                                             label=label)\n",
    "        self.figure.autofmt_xdate()\n",
    "\n",
    "    # Plots a line graph with date values and additional customization options\n",
    "    def custom_plot_date(self, x, y, color='lightblue', linestyle='-', linewidth=1, markeredge=False, label=''):\n",
    "        markeredgewidth = 1 if markeredge else 0\n",
    "        self.axes[self.ix, self.iy].plot_date(x, y, color='lightblue', markeredgecolor='grey',\n",
    "                                              markeredgewidth=markeredgewidth, label=label)\n",
    "\n",
    "    # Plots a scatter plot with customization options\n",
    "    def custom_scatter(self, x, y, color='lightblue', markeredge=False, label=''):\n",
    "        markeredgewidth = 1 if markeredge else 0\n",
    "        self.axes[self.ix, self.iy].scatter(x, y, color=color, edgecolor='grey', linewidths=markeredgewidth,\n",
    "                                            label=label)\n",
    "\n",
    "    # Sets the label for the x-axis\n",
    "    def set_xlabel(self, label, fontsize=14):\n",
    "        self.axes[self.ix, self.iy].set_xlabel(label, fontsize=fontsize)\n",
    "\n",
    "    # Sets the label for the y-axis\n",
    "    def set_ylabel(self, label, fontsize=14):\n",
    "        self.axes[self.ix, self.iy].set_ylabel(label, fontsize=fontsize)\n",
    "\n",
    "    # Sets the x-axis limits\n",
    "    def set_xlim(self, lim_inf, lim_sup):\n",
    "        self.axes[self.ix, self.iy].set_xlim([lim_inf, lim_sup])\n",
    "\n",
    "    # Sets the y-axis limits\n",
    "    def set_ylim(self, lim_inf, lim_sup):\n",
    "        self.axes[self.ix, self.iy].set_ylim([lim_inf, lim_sup])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "4e819abe-7d6f-4e54-b068-6b62d0bf17d1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig_1 = FigureStyle(8, 4, 1, 1)\n",
    "fig_1.pos_update(0, 0)\n",
    "# fig_1.custom_scatter(sample_DF['CRS_DEP_TIME'], sample_DF['DEP_DELAY'], markeredge=True)\n",
    "fig_1.custom_plot(X1, Y1, color='b', linestyle=':', linewidth=2, marker=('b', 's', 10))\n",
    "fig_1.custom_plot(X2, Y2, color='g', linestyle=':', linewidth=2, marker=('g', 'X', 12))\n",
    "fig_1.custom_plot(X1, result1, color='b', linewidth=3)\n",
    "fig_1.custom_plot(X2, result2, color='g', linewidth=3)\n",
    "fig_1.style()\n",
    "fig_1.set_ylabel('Delay (minutes)', fontsize=14)\n",
    "fig_1.set_xlabel('Departure time', fontsize=14)\n",
    "# Initializes a figure style instance 'fig_1' with specific dimensions and subplots.\n",
    "# 'pos_update' updates the current position within the subplot grid.\n",
    "# 'custom_scatter' or 'custom_plot' methods plot data with various customizations.\n",
    "# 'style' sets the style for the subplot.\n",
    "# 'set_ylabel' and 'set_xlabel' set the labels for the y and x axes, respectively."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "2de17272-cd4d-4ac3-85a1-ec770a04cd43",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_merged_delays(data_frame, carrier):\n",
    "    # Grouping data by 'ORIGIN' for the specified carrier\n",
    "    airport_counts = data_frame[(data_frame['OP_CARRIER'] == carrier)].groupBy('ORIGIN').count().alias('Count').orderBy('Count')\n",
    "    i = 0\n",
    "    columns = ['ORIGIN', 'CRS_DEP_TIME', 'avg(DEP_DELAY)']\n",
    "    data_frame = get_op_carrier(data_frame, carrier)\n",
    "    for airport_id in airport_counts.select('ORIGIN').collect():\n",
    "        origin_airport = airport_id.ORIGIN\n",
    "        # Fetching flight delays for each airport\n",
    "        test_3 = get_flight_delays(data_frame, origin_airport, True)\n",
    "        test_3 = test_3[columns]\n",
    "        # Dropping rows with any null values\n",
    "        test_3.dropna(how='any')\n",
    "        if i == 0:\n",
    "            merged_data = test_3\n",
    "        else:\n",
    "            merged_data = merged_data.unionByName(test_3)\n",
    "        print('Round:', i + 1, '\\n')\n",
    "        i += 1\n",
    "    return merged_data\n",
    "\n",
    "# Function 'get_merged_delays' retrieves and merges flight delay data for a specified carrier.\n",
    "# 'airport_counts' gathers counts of flights grouped by origin for the carrier.\n",
    "# Looping through each airport, fetching and processing flight delay data.\n",
    "# 'merged_data' accumulates the merged flight delay information for all airports.\n",
    "# The function returns the combined flight delay data for the carrier.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "4b8b1139-a3bd-4a86-80f9-7ac704ffc915",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Round: 1 \n",
      "\n",
      "Round: 2 \n",
      "\n",
      "Round: 3 \n",
      "\n",
      "Round: 4 \n",
      "\n",
      "Round: 5 \n",
      "\n",
      "Round: 6 \n",
      "\n",
      "Round: 7 \n",
      "\n",
      "Round: 8 \n",
      "\n",
      "Round: 9 \n",
      "\n",
      "Round: 10 \n",
      "\n",
      "Round: 11 \n",
      "\n",
      "Round: 12 \n",
      "\n",
      "Round: 13 \n",
      "\n",
      "Round: 14 \n",
      "\n",
      "Round: 15 \n",
      "\n",
      "Round: 16 \n",
      "\n",
      "Round: 17 \n",
      "\n",
      "Round: 18 \n",
      "\n",
      "Round: 19 \n",
      "\n",
      "Round: 20 \n",
      "\n",
      "Round: 21 \n",
      "\n",
      "Round: 22 \n",
      "\n",
      "Round: 23 \n",
      "\n",
      "Round: 24 \n",
      "\n",
      "Round: 25 \n",
      "\n",
      "Round: 26 \n",
      "\n",
      "Round: 27 \n",
      "\n",
      "Round: 28 \n",
      "\n",
      "Round: 29 \n",
      "\n",
      "Round: 30 \n",
      "\n",
      "Round: 31 \n",
      "\n",
      "Round: 32 \n",
      "\n",
      "Round: 33 \n",
      "\n",
      "Round: 34 \n",
      "\n",
      "Round: 35 \n",
      "\n",
      "Round: 36 \n",
      "\n",
      "Round: 37 \n",
      "\n",
      "Round: 38 \n",
      "\n",
      "Round: 39 \n",
      "\n",
      "Round: 40 \n",
      "\n",
      "Round: 41 \n",
      "\n",
      "Round: 42 \n",
      "\n",
      "Round: 43 \n",
      "\n",
      "Round: 44 \n",
      "\n",
      "Round: 45 \n",
      "\n",
      "Round: 46 \n",
      "\n",
      "Round: 47 \n",
      "\n",
      "Round: 48 \n",
      "\n",
      "Round: 49 \n",
      "\n",
      "Round: 50 \n",
      "\n",
      "Round: 51 \n",
      "\n",
      "Round: 52 \n",
      "\n",
      "Round: 53 \n",
      "\n",
      "Round: 54 \n",
      "\n",
      "Round: 55 \n",
      "\n",
      "Round: 56 \n",
      "\n",
      "Round: 57 \n",
      "\n",
      "Round: 58 \n",
      "\n",
      "Round: 59 \n",
      "\n",
      "Round: 60 \n",
      "\n",
      "Round: 61 \n",
      "\n",
      "Round: 62 \n",
      "\n",
      "Round: 63 \n",
      "\n",
      "Round: 64 \n",
      "\n",
      "Round: 65 \n",
      "\n",
      "Round: 66 \n",
      "\n",
      "Round: 67 \n",
      "\n",
      "Round: 68 \n",
      "\n",
      "Round: 69 \n",
      "\n",
      "Round: 70 \n",
      "\n",
      "Round: 71 \n",
      "\n",
      "Round: 72 \n",
      "\n",
      "Round: 73 \n",
      "\n",
      "Round: 74 \n",
      "\n",
      "Round: 75 \n",
      "\n",
      "Round: 76 \n",
      "\n",
      "Round: 77 \n",
      "\n",
      "Round: 78 \n",
      "\n",
      "Round: 79 \n",
      "\n",
      "Round: 80 \n",
      "\n",
      "Round: 81 \n",
      "\n",
      "Round: 82 \n",
      "\n",
      "Round: 83 \n",
      "\n",
      "Round: 84 \n",
      "\n",
      "Round: 85 \n",
      "\n",
      "Round: 86 \n",
      "\n",
      "Round: 87 \n",
      "\n",
      "Round: 88 \n",
      "\n",
      "Round: 89 \n",
      "\n",
      "Round: 90 \n",
      "\n",
      "Round: 91 \n",
      "\n",
      "Round: 92 \n",
      "\n"
     ]
    }
   ],
   "source": [
    "carrier = 'WN'\n",
    "merged_df = get_merged_delays(train_DF, carrier)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "d6423fb6-a9d3-4004-a8f9-295e6745e0e7",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "23/11/29 22:01:22 WARN DAGScheduler: Broadcasting large task binary with size 2.2 MiB\n",
      "                                                                                \r"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[(0, 'ABQ'), (1, 'ALB'), (2, 'AMA'), (3, 'ATL'), (4, 'AUS')]"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "origin_labels_updated = [x.ORIGIN for x in merged_df.select('ORIGIN').collect()]\n",
    "label_encoder_updated = LabelEncoder()\n",
    "integer_encoded_updated = label_encoder_updated.fit_transform(origin_labels_updated)\n",
    "\n",
    "# Creating a correspondence between the codes and tags of the airports\n",
    "zipped_updated = zip(integer_encoded_updated, origin_labels_updated)\n",
    "label_airports_updated = list(set(list(zipped_updated)))\n",
    "label_airports_updated.sort(key=lambda x: x[0])\n",
    "label_airports_updated[:5]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "f9775e6b-b730-4423-b9d7-965adb47a839",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "23/11/29 22:26:37 WARN DAGScheduler: Broadcasting large task binary with size 2.2 MiB\n",
      "23/11/29 22:52:06 WARN DAGScheduler: Broadcasting large task binary with size 2.5 MiB\n",
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(48606, 93) (48606, 1)\n"
     ]
    }
   ],
   "source": [
    "onehot_encoder_v2 = OneHotEncoder(sparse=False)\n",
    "integer_encoded_updated = integer_encoded_updated.reshape(len(integer_encoded_updated), 1)\n",
    "onehot_encoded_v2 = onehot_encoder_v2.fit_transform(integer_encoded_updated)\n",
    "\n",
    "b_v2 = np.array(merged_df.select('CRS_DEP_TIME').collect())\n",
    "b_v2 = b_v2.reshape(len(b_v2), 1)\n",
    "X_v2 = np.hstack((onehot_encoded_v2, b_v2))\n",
    "\n",
    "Y_v2 = np.array(merged_df.select('avg(DEP_DELAY)').collect())\n",
    "Y_v2 = Y_v2.reshape(len(Y_v2), 1)\n",
    "print(X_v2.shape, Y_v2.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "a3a85425-4447-475e-ab79-16774506b901",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MSE = 38.45089372201822\n"
     ]
    }
   ],
   "source": [
    "X_v2 = X_v2.astype(np.float64)  # Convert X_v2 to a numeric type (change the type as needed)\n",
    "Y_v2 = Y_v2.astype(np.float64)  # Convert Y_v2 to a numeric type (change the type as needed)\n",
    "\n",
    "lm_v2 = linear_model.LinearRegression()\n",
    "model_v2 = lm_v2.fit(X_v2, Y_v2)\n",
    "predictions_v2 = lm_v2.predict(X_v2)\n",
    "print(\"MSE =\", metrics.mean_squared_error(predictions_v2, Y_v2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "723c444d-a5cb-4316-90b0-f16d78b4b38e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'2.66%'"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "icount_v2 = 0\n",
    "for i_v2, val_v2 in enumerate(Y_v2):\n",
    "    if abs(val_v2 - predictions_v2[i_v2]) > 15:\n",
    "        icount_v2 += 1\n",
    "\n",
    "result_percentage = '{:.2f}%'.format(icount_v2 / len(predictions_v2) * 100)\n",
    "result_percentage\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "0c0a5044-4ba9-4071-b359-6c6c6f0e4ece",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: seaborn in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (0.13.0)\n",
      "Requirement already satisfied: numpy!=1.24.0,>=1.20 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from seaborn) (1.25.2)\n",
      "Requirement already satisfied: pandas>=1.2 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from seaborn) (2.1.0)\n",
      "Requirement already satisfied: matplotlib!=3.6.1,>=3.3 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from seaborn) (3.7.2)\n",
      "Requirement already satisfied: contourpy>=1.0.1 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from matplotlib!=3.6.1,>=3.3->seaborn) (1.1.0)\n",
      "Requirement already satisfied: cycler>=0.10 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from matplotlib!=3.6.1,>=3.3->seaborn) (0.11.0)\n",
      "Requirement already satisfied: fonttools>=4.22.0 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from matplotlib!=3.6.1,>=3.3->seaborn) (4.42.1)\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from matplotlib!=3.6.1,>=3.3->seaborn) (1.4.5)\n",
      "Requirement already satisfied: packaging>=20.0 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from matplotlib!=3.6.1,>=3.3->seaborn) (23.1)\n",
      "Requirement already satisfied: pillow>=6.2.0 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from matplotlib!=3.6.1,>=3.3->seaborn) (9.5.0)\n",
      "Requirement already satisfied: pyparsing<3.1,>=2.3.1 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from matplotlib!=3.6.1,>=3.3->seaborn) (3.0.9)\n",
      "Requirement already satisfied: python-dateutil>=2.7 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from matplotlib!=3.6.1,>=3.3->seaborn) (2.8.2)\n",
      "Requirement already satisfied: pytz>=2020.1 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from pandas>=1.2->seaborn) (2023.3.post1)\n",
      "Requirement already satisfied: tzdata>=2022.1 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from pandas>=1.2->seaborn) (2023.3)\n",
      "Requirement already satisfied: six>=1.5 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from python-dateutil>=2.7->matplotlib!=3.6.1,>=3.3->seaborn) (1.16.0)\n"
     ]
    }
   ],
   "source": [
    "!pip install -U seaborn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "9dcf383b-881e-423a-beae-1512593062e7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAjsAAAJACAYAAABrM6dZAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8g+/7EAAAACXBIWXMAAA9hAAAPYQGoP6dpAAEAAElEQVR4nOydd5hkVZ2/33Pvrdg5TU9PZBhgiDMgMMgPiQMyYAJWxYRpF1xXWHVhRdRd065pTWtYE4pZQQUFUZAZgkOGYWAGGGaIEzvnyjec3x+nbnVVd3V3dU7nfZ5+urrqhlPVde/5nG8UUkqJRqPRaDQazTzFmOkBaDQajUaj0UwlWuxoNBqNRqOZ12ixo9FoNBqNZl6jxY5Go9FoNJp5jRY7Go1Go9Fo5jVa7Gg0Go1Go5nXaLGj0Wg0Go1mXqPFjkaj0Wg0mnmNFjsajUaj0WjmNVrsaDQajUajmddosaPRaDQajWZeo8WORjOL+M6TnXznyc6ZHoZGo9HMK6yZHoBGoxkgYXszPQSNRqOZd2jLjkYzy9HWHo1Go5kY2rKj0cxytLVHo9FoJoa27Gg0Go1Go5nXaLGj0cwgP3m6e6aHoNFoNPMeLXY0mhkk6WgXlUaj0Uw1WuxoNBqNRqOZ12ixo9FoNBqNZl6jxY5Go9FoNJp5jRY7Gs0cRdff0Wg0mtLQdXY0mjmKrr+j0Wg0paEtOxqNRqPRaOY1WuxoNBqNRqOZ12ixo9FoNBqNZl6jxY5Go9FoNJp5jRY7Go1Go9Fo5jVa7Gg0Go1Go5nXaLGj0UwTui6ORqPRzAxa7Gg000TC9qa8No7uoq7RaDRD0WJHo5lH6C7qGo1GMxQtdjQajUaj0cxrtNjRaDQajUYzr9FiR6PRaDQazbxGix2NRqPRaDTzGt31XKOZRSQcj11dGf7xroN0JB2SjqQ75dIYNXnD6jRH1YZmeogajUYz59BiR6OZBfSlXT73SDvf3NaFK4tvc/srL7KuPsRHX1XHO4+smt4BajQazRxGix2NZoa5e1+cd/x1P60Jd9Rtn+pI896/HeS/H+3g9CUR1tQER9zeL2J45fF1kzJWjUajmYtosaPRzCAPHEzwkb+3Mrg8TnnA4KjaIAFDsL0jRcwuNPc835Ph+Z4MJy4K8c9ra6kMmUWPP9VFDDUajWYuoMWORjNDfHVrB7/Z3V/wXG3Y4IKV5fz4vCWELJU/8JXH2mmJOwRMg+/t6KY/MyBgtralOeW3L3PLG5ZzpI7n0Wg0mqLobCyNZgb47lNd/PuWtoLn3nd0Nf92Qi1r60M5oeOzuMziy6c38vL7DuPKdTWIvNee686w/rcv88cX+qZh5BqNRjP30GJHo5lmbn6hjyvvaSl47gv/bxE/Pq+JgCGG2UtRF7H49tlNbHnrIVSHBi7f/ozHxX/ez20vxfDkMBHOGo1Gs0DRYkejmUYOxGwuu+NAwXP/9f8auG59PUKMLHRgoHP6aUuiXLWuhsOqAgWv37k3zptu3UdvevhgZ90sVKPRLDR0zI5GM030ZVx+urOPhDNgeTlnWZRPrm8ouv13nuwkbBYKoPyA4/KAwfuPqaInLfnK1s7c839+Ocarf/syf3rj8qLH1c1CNRrNQkNbdjSaaSDpePx8Zx99ecHFr19VzkWry3N//3pnT8E+CdsbVZiUBwzW1AS58cKlRK0BYfRcd4b1v3mZnV3pyXkDGo1GM4fRYkejmSJ8d5EnJe//20H2xZzca8fWhfj1BUsx8lxX47W4JB2Ptx5RxQNvXUVtXhxPb8bjpzv7+NNLMVLamqPRaBYwWuxoNFOEL17+86F2frt7IFOqIWJy2xuXUxEsXhtnvBy/KMy/n1jHmUujBc8/2Jzk5N+8zNMdqRH317E8Go1mvqLFjkYzhdzwTA///WhH7m9TwC1vWM4hVSNXPh4vFUGDuy5ZyUdPqC14/unONCf95mU++3A7mWH6UehYHo1GM1/RAcoazRSxqzvD93YUWkvecngFpy2JDrPH5BAwBV8/czFBA767vTtXfTntSj7zcDt1YZPV1SHecGh5SRlgGo1GM9fRlh2NZgp4pjPF9U/3FLSBOG9FlBMawtM2hsOrg3z0hFqOGtQ/qzPl8qbb9vHaW/Zy7744Utfl0Wg08xxt2dFoJpmn2lOce/MeknnuovccVcVRNYER9poaygMG7zmqkqUVQf59SxstiYEg6U1742zaG+fViyNcd3L9kGKEuomoRqOZL2jLjkYziWzeG+Ps379CR3KgqN9Zy6L88NwlCCGIWGLUQOCIJYakoY/l9cEIIXjXUdXses9qrjmxjsFFmh9uSfKm2/bx2Uc6+Pwj7ezvtwGV+q4biWo0mvmAFjsazSSQcSWff6Sd196yl+70gED4f00R/viG5QTNsaWYj7ZN/uthU/CdJzu5fkfXiPv8fGcPa6oDfOKkOt6+pnKI6OlMefznQ+2s/MnzXHDLHra2pYaMQ2dsaTSauYh2Y2k0EyDleNzyQj+ffrid53syBa8dXh3gzotXUh4cfk3hC5WwKZhIqHDC9pBSELWMYY/nb7O4zOLzpzXy+VMzfHVrJzc820M6z+XmSbhjTxxQ2WPb2jNcclgF568s1xlbGo1mTqLFjmbOcP2OLs5aXs7OrjQdSZeetPqJ2R4CMIXANCBgCCKWQdhUvyNW/u+Bx2HLIGQKrOx+phBY2d+mANMQWNnfpoCUK2mNO7zcZ/NsV5otBxLctTdOV2poH6orjq3mqJrgiELHJ1+oTAaDjzec22t1dZDvbWjiM69u4Gc7e/ja1k7akoXvxZXwp5f6+dNL/QAsL7doSbi8ZkmUkxdH+PVz6rg6rkej0cxmtNjRzFoOxmzu3Z/gvv1xtrWneKo9RWaWGxbqwibfOLORy46q5sc7uooG+U6WNWcsDGeR+cnT3bz/2Bo+dlI9tUHB010ZHmlJsrMrQ2+RD3tfzOG/8uoG1YVNlpYpAXR4dZDDqoPctz9GRcDgqhPqp+z9aDQazVjQYkczK/Ck5LmuDA81J3ioOcmWgwl2d2dG33GWUBYQXHFsDasqA1x2VHXu+YTtFbWsjNWaM9ag5JHIF1v57ishBEvKLC5eXcG9b67jA5sP8nRnmmc6M6SGKUTYmXLpTLls7yzswRUyBd/f0cuScoslZernhZ4MFUGDdx5ZRV3Yoi5iUhc2iQZ06KBGo5latNjRTBtSSrrTHnv7bPb22+zuSbOzK8POrjTPdKYLmmSWiinU5C1B/UhwPIkzDaVjyizBETVBjq4N8b0NTVQEzZw1Z7DVZjJiXSYzXma0GJ+QZXB0bYgTF4XxJBy/KMJfX4nxy529HIg7wx7XJ+1Knu1K82yRRqQ3PNtb8HfYFNRFTGrDJinHI2oZHN8QpjxoUBEwKA8alAcMKrK/hz42iViCgCGwDOWKNHSxRI1Gk4cWO3OclrjD7m41ofiT/cDELwufk4OeH9NrEsdTWUe2p378xxlPYrvZ39lt+jIuPWkvG1ejfrcnHeL22FVIwIBDK4Msr7CoChkcUhGgqcwi6Ugqg4KygElnyiViqcm7M+USMiFgGLQmHEwDLCFoT7oYAgwBMVsiUMKoL+NhGWqCtgyBKQQx28MUYBmC/oyHaUDENDCE6m21siKAKyXRgEHUMvjZsz05wTDZMThTzWgxPuUBgx0dKQ6rCnDdyXW848hqHm9N8sMd3TzTmaYtGz81jPFnVFKu5EDM4UBeo9SnOibWrV0AlkFW/KjYKytPDFki77Ehsn8Xbp8vnobbppRj+sLL118ib4xDnvO3HWZ7/zi+NB26f+Fj9doIxyxy/mLnG7r/0PMPP14xwvmKbz/cMUeiFH1b2nFG36qk44zy+qqqACsrp6ZtjGYoWuzMYW7c1cvb/3qA+Vb/NmwKVlYGOLImyJE1QSqDaiXvCxlf1LjSHfbGZAhByBSUBYzc9pYhCgTR4MdJR474erHHPnNN4IzGYCtS/vv71XNK2G1cWcbJjWEilsCTELc92pMuL/fZdKZclpYHeLw1SW/aI2Z7w7rCpgIJ2B7Yni/dNZrZx3fOXsyH1tWOvqFmwgipa8XneNe73kVzc/NMD6NkWhPjs5TMJgxBblVsCNXXKWCoydNf2U3XY8n0n3Muj2u0MRpCZXP5jx1vwGroyQHLoStl7rEnJV72Kz34t0Yz34hYgqayybE5NDU18ctf/nJSjjUf0ZadOUxjVP/7NBqNRqMZDW3Z0Wg0Go1GM6+ZHwEGGo1Go9FoNMOgxY5Go9FoNJp5jRY7Go1Go9Fo5jVa7Gg0Go1Go5nXaLGj0Wg0Go1mXqPFjkaj0Wg0mnnNrCzUsn37dr797W+zbds20uk0q1ev5r3vfS8XXXRRbpuvf/3r/OAHPyi6/2OPPUZlZeU0jVaj0Wg0Gs1sZtaJnRdffJHLLruMqqoq/umf/omysjL+8pe/cO2119Ld3c373vc+AHbv3s3y5cu56qqrhhwjEomM69zvete7AHQVSo1Go9HMOxbyHDfrxM6Xv/xlDMPgd7/7HY2NjQC8853v5B3veAff+ta3eOtb30pZWRm7d+9m3bp1vOlNb5q0c8+lVhEajUaj0YyFhTzHzaqYHdd1eeyxxzj99NNzQgfAMAwuuOACEokEO3fuJBaLcfDgQVavXj2Do9VoNBqNRjMXmFWWHcMwuPXWW4t2su7q6gLANE1eeOEFpJQ5sZNMJgmFQhjGrNJuGo1Go9FoZgGzSh0IIVi+fDnLli0reD6RSPCHP/yBaDTK0Ucfze7duwHYsmULZ511Fscffzwnnngin/nMZ0gmkzMxdI1Go9FoNLOUWWXZKYaUkk996lO0t7fzoQ99iFAolBM7O3bs4Morr6S8vJz77ruP3/zmN7z44ov87Gc/01YejUaj0Wg0wCwXO1JKPvOZz3D77bezfv16PvjBDwJw+umnU1FRweWXX040GgVg48aN1NTU8OMf/5i77rqL888/fyaHrtFoNBqNZpYwa80ftm1zzTXX8Nvf/pa1a9fyve99j0AgAMCZZ57Jhz/84ZzQ8XnHO94BwMMPPzzt49VoNBqNRjM7mZWWnWQyyVVXXcWWLVtYv3493/ve9ygvLx91v7q6OkDF+Gg0Go1Go9HALLTs2LbNlVdeyZYtWzj77LO5/vrrhwid9773vbz//e8fsu9LL70EwPLly6dlrBqNRqPRaGY/s07sfOtb3+L+++/nnHPO4dvf/jahUGjINtXV1Tz44INs27Yt95zneXznO9/BNE0uvPDC6RyyRqPRaDSaWcyscmO1tbVxww03YFkWr3nNa/jLX/4yZJtTTz2Va665hgceeIDLL7+cyy67jNraWu68804ee+wxPvKRj3DooYfOwOg1Go1Go9HMRmaV2HniiSewbRuAz33uc0W3+dGPfsQZZ5zBr3/9a775zW/yi1/8gkwmw2GHHcaXv/zlgmahGo1Go9FoNLNK7GzcuJFdu3aVtO3hhx/Od7/73SkekUaj0Wg0mrnOrIvZ0Wg0Go1Go5lMtNjRaDQajUYzr9FiR6PRaDQazbxGix2NRqPRaDTzGi12NBqNRqPRzGu02NFoNBqNRjOv0WJHo9FoNBrNvEaLHY1Go9FoNPMaLXY0Go1Go9HMa7TY0Wg0Go1GM6/RYkej0Wg0Gs28RosdjWY0PG+mR6DRaDSaCaDFjkYzGl//OqxbB5/9LOzYAVLO9Ig0Go1GMwZmVddzjWZWcvPNsH27+rnhBnj55ZkekUaj0WjGgLbsaDQj0dwMDz008Pcll4AQMzcejUaj0YwZLXY0mpEwDPjUp+Doo9Xfl1wys+PRaDQazZjRYkejGYnGRvj85+GZZ+C55+DUU2d6RBqNRqMZIzpmR6MplTVrZnoEGo1GoxkH2rKj0Wg0Go1mXqPFjkaj0Wg0mnmNFjsaTTGSSdi7d6ZHodFoNJpJQIsdjaYYf/0rrFwJJ50EX/gC9PbO9Ig0Go1GM0602NFoinHzzer31q0qG8vSsfwajUYzV9FiR6MZTCYDf/7zwN8bN0JZ2cyNR6PRaDQTQosdjWYwlgV/+xtcey0cdpguJKjRaDRzHG2b12gGYxiwfr36+eIXdddzjUajmeNoy45GMxJCgGnO9Cg0Go1GMwG02NFoNBqNRjOv0WJHo9FoNBrNvEaLHY3GR0r4yU/g4MGZHolGo9FoJhEtdjQan23b4B//EZYuVd3NH3tspkek0Wg0mklAix2NxueWWwYeP/ww1NbO3Fg0Go1GM2losaPR+GzZMvB47VpYvXrmxqLRaDSaSUPX2dFofDZvhoceUhYeLXQ0Go1m3qDFjkbjY5rwmteoH41Go9HMG7QbS6PRaDQazbxGix2NRqPRaDTzGi12NBqNRqPRzGu02NForrsOrr8e2tpmeiQajUajmQK02NEsbNrb4Stfgcsvh6Ym+PrXZ3pEGo1Go5lktNjRLGxuuw08Tz32PFi3bmbHo9FoNJpJR4sdzcImHoe6OvW4pgbOOGNmx6PRaDSaSUfX2dEsbK66Cj74QVU9+cABCARmekQajUajmWS02NFoLAvOPnumR6HRaDSaKUK7sTQajUaj0cxrtNjRaDQajUYzr9FiR6PRaDQazbxGix3NwuRDH4KLLoKf/Qy6umZ6NBqNRqOZQnSAsmbh4Thw443Q2Ql/+hNceCHcfvtMj0qj0Wg0U4S27GgWHlu2KKHjc/HFMzcWjUaj0Uw5WuxoFh41NXDZZVBVBYYBb3zjTI9Io9FoNFOIdmNpFh7HHw8//zlkMrBtGyxaNNMj0mg0Gs0Uoi07moVLMAinnDLTo9BoNBrNFKPFjkaj0Wg0mnmNFjsajUaj0WjmNVrsaBYOvb2QTM70KDQajUYzzWixo1k4fPvbUF8Pb34z/PrX4HkzPSKNRqPRTANa7GgWDjffDIkE/OEP8PnPq7RzjUaj0cx79N1eszB45RWVZu5zySUzNhSNRqPRTC9a7GgWBosWqRYRl14K5eW6arJGo9EsIHRRQc3CIBqFt75V/aRSEArN9Ig0Go1GM01osaNZeITDMz0CjUaj0Uwjs9KNtX37di6//HJOOukkjjvuOC666CL++Mc/FmyTSqX46le/ytlnn826deu49NJLeeihh2ZmwBqNRqPRaGYts07svPjii1x22WXs2rWLf/qnf+JjH/sYkUiEa6+9lhtuuCG33dVXX81PfvITNmzYwLXXXott2/zTP/0Tjz/++AyOXqPRaDQazWxDSCnlTA8inyuuuILHHnuMO+64g8bGRgA8z+Md73gHu3bt4v7772f79u28973v5brrruO9730vAIlEgje+8Y1UVlZy8803j+vcGzZsAGDz5s2T8l40s4DeXnjgAdiwQcfpaDSaBc1CnuNmlWXHdV0ee+wxTj/99JzQATAMgwsuuIBEIsHOnTu57bbbCAQCvPWtb81tE41GefOb38wzzzzDK6+8MgOj18xK/vxneN3roKEB3v52aGmZ6RFpNBqNZpqZVQHKhmFw6623IoQY8lpXVxcApmny9NNPs2rVKqLRaME2xxxzDABPP/00hxxyyJSPVzMH8K18/f1w++3w05/O6HA0Go1GM/3MKrEjhGD58uVDnk8kEvzhD38gGo1y9NFH09raytq1a4dst2jRIgAOHjw45WPVzAFsG+6+e+Dv171Ou7I0Go1mATKrxE4xpJR86lOfor29nQ996EOEQiHi8TiRSGTItuFsSnFSN3vUAAQC8PLLyqJz883wtrfN9Ig0Go1GMwPMarEjpeQzn/kMt99+O+vXr+eDH/xgSfsVc4NpFijV1fDOd6ofjUaj0SxIZq3YsW2bj3/84/z5z39m7dq1fO973yMQCAAqGDmVSg3Zx3+uvLx8Wseq0Wg0Go1m9jIrxU4ymeSqq65iy5YtrF+/nu9973sFAmbJkiW0t7cP2a+trQ2gIJNLo9FoNBrNwmZWpZ6DsuhceeWVbNmyhbPPPpvrr79+iKXmmGOO4YUXXhhi3XnmmWcAOO6446ZtvBqNRqPRaGY3s07sfOtb3+L+++/nnHPO4dvf/jahItkzGzduJJPJ8Nvf/jb3XCKR4Pe//z1r165lxYoV0zlkzWzD8+Caa+Cuu1RGlkaj0WgWNLPKjdXW1sYNN9yAZVm85jWv4S9/+cuQbU499VROP/10Tj/9dP7nf/6H5uZmVq1axU033URLSwtf+tKXZmDkmlnFww/D176mfqqr4aab4LzzZnpUGo1Go5khZpXYeeKJJ7CzK/HPfe5zRbf50Y9+xKJFi/jf//1fvvGNb3DbbbeRTCZZs2YNP/7xjznppJOmc8ia2Uh+u5CeHjj66Bkbikaj0WhmnlkldjZu3MiuXbtK2rasrIxPfepTfOpTn5riUWnmHJ2dYJrgunDKKbB06UyPSKPRaDQzyKwSOxrNpHDDDfA//wO33QZVVTM9Go1Go9HMMFrsaOYn9fXwvvfN9CimDU9KtrWl6Ei61EdMTlgUxiixuOZk7wuM+3gajUYzFWixo9HMYvLFRG1YJU92pbwCEXH3vjhfeqyDXd1pMq4kaArW1IT42El11ITMEUXHcPt+/OR6zlleNuxY6iMm3WmXLz/ewdMdadKuJGQKlpRbCATtSWfU403V56QFlmY2o7+rM4MWO5p5w0g3kZm8wYz33PlCJJbxSDgSiSRqGVQEDdbUhDh/ZRnf39FNf8YjagnKAgaelDzemuSNf9pL2FICKWQKjq0Pcd3JDTnRcfe+OB/YfHDIvts7Unxg00GuflUdq6qCOWHzlcc7c6LIk5LejMRxJRKQ2TG3JFwMYHmFRVOZRdrNHm/zQX6wYcmUCJ6798X54qPtPN05ILqOrQtx3fqGKRVYGs1YGcviYqrwJDiexDIWlsASUko5+mYLgw0bNgCwefPmGR6JZqyMZN14oSfDD3d00xx3kFISsoxpu8GM9ebmC6NNe+N896ku0q6HK6E75eUEhWlAfdjAk9BvS0yh+silXfAAIcHNO6YBCAGmgPqwyX+8uoGVFQE++0g7u7sz2J5UAia7rSnA9tR5qoMGEkG/7RE2BdUhAwHsjzlkvOHfd9QSHFkTRAiBlJIDcYe19WHuuHgFhhAlu7+KPZcvFO/eF+eyO/bTkXRx8+5kpoD6iMkvNi6blP/x4PGuawjxVHu6JAE7m119M7EIWKiWjfzFRV3YJGQK0q6kM+VSETSmbDGQz4YNG3ip1yZ41U945NJVVIfNKT3fbEKLnTy02Jmb+DeRb3z7SnrqGrnv5PN55LAT2Z+ChO3hSJASDAPCBpQHTVKupDxgcMNrl3DuiqnppTbWm5svjJ7rStGacEcUEwIImZB2B6wqpWIJiFiCmK2sMoaAoCEQAlxP5s5rCGiKmnSlXFJZ9WQKtTIcYWg5lpWZlAdNopYg6UritsfNr19Ob8YbIgAbIsrInO/+KvZcvnuuLenwb/e1sqs7U/QzMIATFoV59O2rJjSZDhasAytjMIQYUcDevS/OFx9rnxWuvtHe13SMYzZYNmYCT0o23rKX7R0plpZZBc2qiy0Gpgpf7Lzyru/zvXMW889ra6fsXLMNLXby0GJnYszUKnHjLXtpe34PT378zNzz33/dB/jIa/+VdHZWDpvgSmWxADVpS5Tl4sbXLcsJnrG+h+G2L3ZzSzgejgcGHu0pj5UVAX6woYkTFoW5fkcPn3+0g5TjURUy2NPnlCQoJgsBBE2B7anJPP/5/BuEkX3OZXQEYBkQNg0iFiQcuPCQMp5oS9FvDwjAzpTL/n4HCdSGBdUhi7jt0ZZwEQKWlVvUhk3SrqQ57pB0PCKWwPGUxSn/fD7+mAMGPPDWQzh5cXTI+Er5Xw8WrBlXsqffxvHUe1tZESCYfQ+DBezd++K8+44DtCcdPJkdU9bq5rv6/PfVmXIpDwiuObGeVZXBKb9+/PfVl3YpCxi572zc9qgMmUOE+GRc27PBsjFTbG1Ncsmf91EeMIhYQxsXJBwvtxg4sTEyZePIFztXHV/Lt85aPGXnmm3omB3NpDDaim2qhNC2thS7utNc/szdBc/ffMTpOHmztCvByVMPnlQTYU/a4/1/O8hPz1e1eMay6hzpPVcFDXZ1p6kLm8RsSXPCJu0MWJkAelJpzr9lL0hJzJG4nhJhCdubVqEDaiJOu0PXPYOf8V1dpSBQ77Xf9ujPdu246fl+BLCkzCRiGfRlPA7EBoRdZ0rSlbJz5xYS2pMuAUOQcSV9aQ8XSLkSMWh0kgHB44s024OfPNuDIUTBd64UC4MnJV96rIP+jJcTrPtiyooUNtWxWxMuh1cHWFpmcSDu8KXHOjhrmRJWH9vSSkvCASCQtZyls19KD/W+6sLqc6gMKBH10ftaqQ4ZU2rx8N9XZ9LF8STdaSf32YVNge25ufcx0QD4wef0P8ukK4nZyjo2+LObjy6tjqRLxpWEwsXfW9gUdKfUdtPF893paTvXbECLHc2EGbJiC4uCwNR/Pq6GO/fEp8R07d9EemoX8cSakzl+9+N0VtZz34p1GIJcHIfjDUzcg283PWmXf9/SQm/aJWbLocG6RYJrR3rPV2w6wAWHVNCf8fAktCXUZO5P/v44JNCbHhA2AUMJidR0K50xUurwJBQIzvznD8Rd4rakLzNU2MlBjxOO5OU+m8FarJhJuthzv3i2lz++0M+SMovLj63hsJogH7y7ueB/15N2ebw1yXvvPMBPsq5NX0jXhc2cZS7teFhCCRfLkKRcFTheFjCoDZvs6k6zrS2FJyXPdKrJJCDUZO96hZ9d0pG0JRwcCZ0pF9cDQ0iqQgamEFMW2L2tLcVT7UlitoeUykLli8OkIxFC8lR7km1tKXozXtHv+eOtSd546z4qAmJUV55/zl3dacKm4PleJfx94RyyDGpDRu6z8y0b8ym2pz5iEsxasiLW0PeQciVBU203XTzfk5m2c80GtNjRTIhiq19QMSFLywQv99n8x0PtVAaNokJoojdy/yby11e9lnvXb6S2t4O6vS/gGQYib+YbPIECudiUhC15si1NyAJTCLpTMidOAgLitscnHmjl/rcegmUYI75nf4X+wx3dOFJZjiRKyLiDBJdETX6WUKLA9mZhZ94JMJp/vGekoKRBFDE6lYztSTqSLm0JlyvvaSFkqVibZWUWtivZ22+TcpT7rift8Q9/2svFR1RxIGbTlXSpCar/r5MVK6Y/V0llIexNq9V42IRuVwnw53vSZDyJkJAaZuwS2B8vXMlLCR1Jj0VRc8osHm0JR30vs9ZN//srgIAhsT31ObTEbf73ye4h33PHU+4u//t6eLVFxmPEa7oj6RLLeMRstQAwhLrWpJQkbY9mx6M8YOQsG/MttueERWHW1ISybm0xJGanK+Wytj6cC16fDl7us3Of7UJgPt1bNTPA4NXvYNKuJO1IakLKV20IQcQyWFpm0Z8NVPUmEDbm30Q6U666aVTV8+SR65GyuFVhMIZQPx6QdNTK1hACUwhcDxIuxGzJY60pXnPTK9y9Lz7se+7LuOyNObjZSTAgBiZ8e9CqPn9o+eOc5UadOYmKrxGYhoqXSTjqf/p8r83zvTYxW+Jkg64l0OfCz3b2smlfgpgjearTZk9fRgUkowSJH8jtSmhLurzYm2F3j40nvezqXODJ0mKb8pEoK8/z3Rme77UJmyJn8RiMJyVbW5Pc+UqMra3Jkq+jzpTKXDMEQ65ZIUTOIvrEMN/z5qylMmRCxpOkXHLXdF/a5RMPtPLXV/oLxlQbNkg4MicYbU/dG/zrwvGUBa82bOSspts7UpQHDJrKLMoDRk5M3b0vPsZPdeYxhODjJ9dTETQ4EHdIOB6elCQcjwNxh8qgwcdPrp9Wy5UnYa/vX14AaMuOZkKM5ItOOBLbkyrLRw69qeab/ccblOffRD6w+SAH4g61YZOQIQvcRcOhVrIqMNPf2K8Zk8nWj/EtMFLCc11p3nvnAc5bUUbcltSFC1dnLXEX15MEDCVgyoMm6dT0+eA1xbEM9f9xBinJsViLOlIe4BCyDOJ5rjf1HVKPk476znSnXU5cFJzQmD0JSWfA4tGWdNjamiws6PhYB093pkk5HqYhWFEe4Iq1NVxxXM2Ik2ZdxFRiXsqiE4ArldVFCIZc2wWuPJQ1rC/jIYSy+MRsyeOtKS674yBlgQFrTEVAnc8DkOpz84/qB8S7Uo5qKT4Qd/jEA618+pQGFkWtOeXaOmd5GT/YsCRnsepOQdCEtfXhGbNYHYjZHFY9se/qXEGLHc2EGMkX7WQzewzUhDOYyQrKG3wTabNlTqWYQp3fLjKxqZW6JC+hBynBzgodf8i+AEq5kv6Yw8939mbjGzyWlQeoCKpVa8r1su9TYCCpCBp0pdwxp4ZrJhfbG5pVVir5+3WkPBaFoT/vdSWMVR2jgKG+0195vJO3r6kY93j9c1pCZcf12x6feaidloSTK+jYk/ZyJQC8bJpXZyrNlfe0cP3TPXzl9MZhJ89FEYvqkEF32iXjyVwMkrKGSgwB1SGDQyqDQ65t3zIjGCh70JpwaEuQsxaB2j9kDsQdvf/oakYzPEkJj7QMjZPyM98cD/oznhJTdx6gLDB99bImi3OWl3HWsuisiUXaH3Nm5LwzgXZjaSbEYDdSPlbWjRMwBdEiamdSgvJiMZCSc5aXccfFK7j59cv56Am11IRMVlcFiAYMhBi4CQ/G9gpf8+NocqvOvG0z7oBoCxhqJf9KX4b+jJcTdp5UMSIhyyC8QHzhs538/+lY/yP5GV4ARbxJOcGxKGqxuMziqfYU//lQxzhHO3BeTyoLpe3B8z1pygMGi6MmfWmPjKesh94gAeFKeKpdVcAezt1zwqIw6xrClAfUd9STMltyQBI2BeUBg3UNYd62pnLItW0ZanDpPMunyJ5XZn8jydUjWhI16c94/HpXb1bAFS4iILsYyt4r9sdUHEnGlezuyfBiT4aX+zI8353hhZ4MKUcigOqQOSmurfG6AieCIQQnNkY4/5ByTmyMzKhl6mBs4bixtNjRTIiRfNFdaZewKQiZYogQ8oPy1tSEigblDb4JOZ5X/KZ0xRVw2GFwzTXwyCMAVIVMAoZqkXBEdZDV1UFWVwVZHDULa7FIFWvQVGYxWJf4E2RRBNSGTYKGmoj29mfY16+yhfw4DteT9Ge8YUWWZvrxLXTj2c9HoKyFYZPcdztsqnig3oxHJls3pjM5/hWzfz5fQAigLmwRsQySjszVjsofk1//CJQI6k65w8bD+ddsXcSkLGCwtNxiRYVFQ8TCMpTY+dhJdViGMeTaDpmiQGD5GXf5Z3FRcT0v9mZ4odchZApa4g5GVtCEzOyPMfBYolxnyyoCeBL29NskHQ9DiKyrufCaDBgTj/27e1+cjbfs5ZI/7+O9fzvAJX/ex8Zb9s7JmKCxkK+tUhOJ/J9jaDeWZsIM54te1xDJ9W7y42nCpiDlKqEzXFBeqRVrr1tbwdm33w59ffC1r/HA/c/wrsv/l7Tj0ZPx6Eq5rKwIUBlSlqPKoEF/xiXuQMRUBeEQyjweMgUJR2IwvMiRKDFjCagMqonilT6bYmE5CUeScZ0xWxI0sxvfeuG56jvui2QLQcrxOBhT2XcNEZO9sfG7Z1WFbEHKkRgGuT5G8Wxc0HD7+GO0DDFiPFz+NftUe4qetIcrVeuRoAFfebwTQ4ihLuLE8OfPx0RNqknHIxP3CJkGUcsg4XjYUrnoDCPrNs5znZ3SGMbxVHxV2FTH8AaJKYm6fmH8sX+jlcuYzwUO87EHmwbnMVrsaCaFkXzRJyyKFA3K+9hJdVQFDe58JZbb/t79icKKtUbxirXbO1L88v/u4uy+vtwYfnnUOQBUh03ClsH+mMNLfTYNES9XNydoGmQ8FdC5N+aQcVTQpC9wwiYkR2nB4EkIGZKudGG8z2BKyQbTzE0k5No/mEJNyq4LDqovWMBQWU3jnUtMAVUBJXYipiBapDZL/lgGP7YM5XYdKR7OL/b5vr8dJBoQ1IRMqoJG0TRy/9r+6yv9fPbhjgIBUvQtZrO6Aka2/Yjnsa4+xPM99kAvtmw8X9hUn9e6BnW/sAw1fttTtYzyz+V/CkkXyrJ+ibHG/pUSBD2fCxzmvyNHix2NZuz4vujBFBNCg7toB03BETVBulNeyRVrtzYewQ8v+zivfugO1rz8DDcfcTo9cSdXqKwmZNCZ8rKduFXrgaqgwfkry9i8L0Fq0CpZMLrQASWMnupcOL5uzfBkXJlrRSJRoqepTLmD/OD4sYheP7vLldCeVm7Q2rzU73JLFA22Hvy340lClhgxHs6Tkq883ontSQ6tDAxM+gZDJn2fvmyhTFOoWDwv67IdnAAgpQTh15ORCATvObqGb2zrpD/j0RARuRYVCUfmrLxdKeW6WlkRoDXhknK9nGD0Ex08Cifpscb+jVQuY7KyROcKIy3W5hta7GimhXwhdPe++JAKtmlXsq0tTW/aZWn5QC+pkSrWZpqW8PHK99B34mXUxHuIlVep2jZStVyIZScgA6gNGQQtge16bN6XQBZZ0SycNY4mn4Ax/pu+79qUQEXQIGSoHmNhUxA2DZKOR9Bg2KaufgyQJ5XF081mWPld6ldVBehOe0gpEUIQDRhELOVyHYmOlMfxDcERi9Rta0vxXFeKqCXoy3hYhrIgiaxI8Sf9H27v5g8v9vF0R1oVBUSN1/AkpiGQRdSXEEoIOVnXWNQSrK4KFrjEko4cknq9tTVJ0FSu6sOrA9naPJKDcYe0q8pY4CmBY9keEZMxF+Sbja0bZgpt2dFopojhTMgSSTC7ou1KqZ5BgyvW+vdU/wINmyLXK6mvvBoDpW4MIQqCUT2gK+NhZNTKUJe+0eQTFCCzVaytbAp52ivdBRUwoCFicf15TXx1a1eu+eviMpO9/RLXkwXWGIOBWJSwqcoilAUMDq8amNxNoaoYv/foGq5/pjDmrT5isi/bOLUYpWadbNobpzXh5q4VgWraurjMpDKoztUS9/jUQ+30Z9xctqFP2oMAsmgQvu2p5yPZVhASZXk5sTEyYup1YaVhi7JsESNDCF7qzZAtVk1zzEFkizw2RMwxFeSbja0bppP8d7yQYnZ0NpZmWhlsQu7PeLkU07akuvHGbFXeP79iLQzckP1gzea4natQm/FU3Y+0y5DO3UB2lamFjmYAP206GjR5/arynIUl5Y4t1mZlRYCfnr+U166sKMhesgzB8nJrSDl+j4EeaWlXZSE1RZXwLwsYVAYN0p7EQ7K03OJ75zSxtj5M3PZozraXWFMTzPVSy38/loCyoMGycov2pFO08jIo6+p3n+rC9tRY/GyuhO2xt9+hL+OSdFR7h+5sxWXLEIQsUXBO2wPbLZxA81P8paf6n+VnXY6Uej1cdmd6kDur0Jc3triakcpljJYlOt+wdTaWRjM15JuQ+zMee/ptVclVqPRdP47mYNxhlRUkZClXQACVNRWxDGV2T7u0JpRvIFflOPvjFXEZ5GeqaDSgvgtRU9VZak44VAQNegbndY9C0ICfnb+EU5pU5s5Zy6Jc/ao6frijm+a4Q9pR7VKG+955QH3YoCKoJERfxqUl7hB31DXxiQfaOLJ2aIfxtqTD+/92kKqQgZstd2AaAynZcVv1AnuoOTGkaJ1vXY3ZKibIyV44vkixXcmBmINAZUUZQrnmZNayYxogvYHFR1OZScKRdGc/O1NkY2ukyh6zPMn5K8tKtrwMze5URRT9BAXLFLmEhYg59oDiYlXXS8kSnS/kv62FlEShLTuaaSXfhNyccHClJJjNXFFWG7WdI1Up80URVRsnla1S2xg1sQ7sJ7BrZ25VNtr1Kgb9aDQ+NWGL2rDJgX5VzG6sHFcf5uTFKoDXr9vyxcc6lNBxJTHbG7Y/VnVQWUlaEy6xjENv2uWVPtWryxSwosKiIqgK533w7mZ6M17OGrIooixGphBUhUxqwyZVQRPXU92sX+yx6c14/PejHUNqx+R3Pc/Hr2PjoUonxJ2BVPu0I1WfO1cJoPzFQ19GknQkloCoqeLr/No75QFVt+fOPfEx1cHJLxL6yfX1VIcMVlepMhJRS1m/opYxJKB4LMf/wYYlBRazuO2xtj7M9xdI2jksLDeWtuxophXfhPxEW4qU7eVcUqBMyF62voYnlZWnO+VSEzJzcQxtSZf33fVrPrHphzy3aBV/PG4Dn7zwX/GM4f3rWuBoBuML34ApCBoqPiY5jmVuxIK79sR5uS/DV7d2ELMldWGTYAie68oUZCnle148oCcjc5aVl/ucXExMWUCwpCyQs/YUS4ce3EU76Ur60h5tSUdZNgWUWYKakDEkjTy/63nQAA9R1PWbz+AK1Pm9wc5fWcb9BxO5Zr9+3JEf8Jx05YSym3rTnqpKPkxF8vEGFA9XLgMo6EM2l/pvjRUdoKzRTBG+CfmyOw6oXjoMNO3MuH4A8sD2NWGTa15Vx6HVAf7joXa2taW4aMcmAI5se5mNz93PJ17/0dz2fjXZ/NtesTokmoWN7/J8pW9iJQTuP5jizX/em8vIOqQiQMQyiGXcIZWOi333hJ/GbYhs129BTchS1YazGVjF0qH96+jddxzg6c50LibNJyBgcZlFNGASsYwCseR3PVf1gURuDKPNe35m4+D3Uh8WOTGi4o4KhUHYZMxiJL+waNxWbqyUY7Ok3KIyWLiwmcyA4rv3xYeUxJhr/bdGI/+/4+rUc41m6jhneRn/sb6ej/y9RbVWYCBg0xADTf8kypX1nw+3E8jG86xu28PRrS/ljnXLcRuwsllcfvExP5bA/w1a5Gimjvxeiq/02xwiBjqgj4aLuglHLEHckXSlJL1pGyGGZkb5gsGTkm1tKR5rSZJ2vaJtMGTWMiqli2UoC48vlvyu544nceTIFp3B5PeNI3ve3+yOEbMnT4wMrm5cFxYkHVVyYm+fzYpKcufwA4rHknqef57CSu2Sflv1B2sqs+ZtVeX8f7c7Db3AZgta7GhmhCvW1vCHF/p4oj1FTdCgOeHmYibyM6ZSLqSyK8KmiMELDSs44bo/8bqnNnPx9k3cfNy5uJ5K/5XZ1g9lAYPDqwPs7FaNA7PZq8PWOtFoJgvVK82mvEjj2+FwpeqrBX6PqIFWC3v7JSsqVCZU0ISXezNsvKWT57rStCZc7Gxa+2AcqTpa+8cKmwLLEHQkXRZFLKIBQU9ajmsVkL+LIZSIsT05ITHiC7i2pMNnH26nL+2yrDxA0pXEbEl9xKQl7pDx4EDMoaxakPYYd0DxYEEVDMHzPTYpR5UKUMkQYl5WVS6w7CwcraPFjmZmMITguvUNfGDzQbpSLpns8nKksImWpFpXPrnoMJ487zD++7wP5F7LdxmELcH/nLGYbW1J/uOhdlWMbIrex2RRrCquZm6iSiCUrqwlg4oa5rVasD1JS9whYgmWVwT52hOd9NseUUvgenLE5qb+8wIVcCyQvNybYcOK6oLGoeP93llZIRUwBMvKA7zSlxmXGBnqsnIJGLCzO4PrqXYuqnqywBAqSHpfzKUsIAoKEpZKsVpfcdsj40lCproHqey8oPr85llV5fx/w0Ky7OhsLM2043c0t13J1a+qY2V5YEjMQTFGurH7+OX2Aa4+sZ5b37ickxvDRYuHlYIfAzTVLJxbzsJgIt8Zxw8WzoqeuCNztXr6bTVBm0IMm+VVcCyphJS/gv/Di31sa0vl+k8VKwg4EvmXkSOV0IlagoqgwSGVQSKWyImRUrKbfAvL9o4U5QGD6pChXHDugCtQ9RkTZLKfS1nA4KMn1HLz65dzx8UrxuxaKtYuwskKR1WrSJB2PBJ5wYNhU4zaa2yukO+2NGb9MnDy0JYdzbQy2E8eNAWLyyyChqpzMREEcGilRcyRfPHRdioCKnDyn4+r5uc7e7hnf+mpqfnH1N4vzVgp5TtTzJpnZFsrpLONMoVUk+/Fqyv500v9uQnayVuRG4y8EMh/fnt7mkdaUrn+UwfjzrCtJwaPT2THl/+k0mRqwqwIGqypCbK33+GjJ9Sy8ZDyETOZillYPOkVxpR4YAmJIQRBoT6XjCt57cqycVtYirWLsIyBnmN+dev8RIn5WlW5MrRw7B1a7GimjcF+cj8AcHdXesJCB9SNKmAKQhL+fiDBOX/YQ9KRE/JLT2RU2jWlyWe074NvRVxaHlC1ajxwPA/HgyNqQmTcvtwEnT8Rl2rtdKVKsfekzPWfOrImyHPdGVKuxISCVPnBQscUAxYiA1Vc0PUkCccjmo1RSrmSsoBgY7Ye0EiM1JAzfwy5hINcXa2JXVXF2kVErYFeZqaQuaajMLEg6NlIvueqKrhwxM7CeaeaGWXwKi5iGRhCVXstpbxJfayLj22+nsPa94y43Ys9Nvv6VSBjzJ6Y0IHxiZXBri9/sjEFmOi6PwuBgKFcHxFz4LsQzH4HgmLAGjN4H7KCImoZVARUOvqRtSFOWRwmaAq6Ui67ezK0xAdSwEpx7/qFAF0pqQ4ZuXYJAMvKAwSyDT0DRb6cERNWV1kcVh1kVWVANQslm67OgPAaa6uFnIUlr36OK8kVGPXfm6o/JLE95UaLWgZdqfHbW4u1ixBCsLjMxBQqkcEyVDPXhONxIO7Mq6rK+Z9cVWh+WapGQosdzbQw3Cou4XjKnTXKN/FNT9/Nl//8DZ7/woVs/8pFrOw6UHQ7e3wJJpNCeUBwyuIwd1y8nO+es5jj60O5+CEkRAMGS8utMcdJaCZGsQl8qjGz8TZCiFxszLIKZUh3UVaRMkuwtMxiRYVFyBRKmEswhBwyyZ7YGKEhYrE/5pCwPUxR2s07vwigI9XfDRGroP+UaaB6eBkiW/sKakKCNTUBakIGh1QGqAqpppxVIZOl5RaWKVRQ9TDjLUUU5FtYfCzDrzs0MHZXqp+IZdBYpqpKT8SdNFz/LcsY6CpfHjDmbVXlfMvOyorAzA1kmtFuLM20UMxPDuQ6m1tCTQjD1fy4ePvm3OMlvW3sr2qcwtGOnYAB3z17Me86qjp3o7/iuBp+uL2bzz/aQdqVLIqaufR67eKaHkwBHz+5hs8/2l3y9v7qPphttDlWI0IutiWLm427+eaZjfzXo53s7s7QGDUpCwxM2CFDsKffxhCC3rRH0CzMNMpvtSBQcSWWoYKP/VdMCotpFpMbIpsqfvLiaEH/qYwLdWGTJeUWF6+u5NwVZaxrCHHhH/exvSNFJNuaAVRa+YpyRhxvKQyuAi2EIGoZhCwjJ+iCpqApahIwDSImHExMjjtpaP8tCJpwUmNkSB+y+VxB+dAqLXY0mkmlmJ8cyHU297JVXOtDJu0pt7CWh+eyqmt/7u8/HXsOrjl7vroGsLY+XCB0QK0g/3ldLUfUhgpSa0FVlc24aoXveeAMc2xNcUYSi/mvSQntCTmikPZZFDGIBgx6Ui6uLVlRoWJnXumzsYcRPAYMNNPMQ2bP7Uh17uqQQVNZkC+c1sgHNh+kO+0hhMg1oOyzPVZUWFx9Yj2rKoNDJtltbSnakw7Lyi26Uh6pbDHBfFFVmGVTGO/iBxabed/P4dol5H+Hh2uYOdp4S2G4hpy1ISV2JOq+URkySbmSg4nJbdJZyvuf7xxaFZzpIUwbs2fG0Mxriq3iQPnfg6YgbkvKA4JlFRZLy012dmdIZ9tHeIbJMdfeytqDu7h4x2buOWz9zL6ZPCwBjVGLr5zeOOxNMv+m2pZw+Owj7bzSZxO3PRUYahQGnGpGppSpaCCAFhKuh5WXwVRQ0oYBYWR7SjCsqQ3xcm+GoKliyg6phJa4Q9JRNV98URE21LFcOUhgARlX9XILm4KAIVjXEM5NpMUsCqNZRXzLaFOZRV3YLOg/FTFVHZ0DcSebRaQyuXw3msxWSTYMFYibH+9iCDFiIPFwFpDx1LcZy/GPb1CWm/akQ3PcndRz5jPa+5/PWAYs124sjWZyGW4Vl3IlAUNgGerGnXRVufZFUYsDMWcgwFgIti89ku1Ljxz5PIwtVdw3/Q92AYxG2BRUhQyOqw9x3ckNo96A82+qIcvgA5sPksl2kR7OaqAZim9JgaHWlEDWSiiEH4yrHh9WFaQ6ZNCdVhZDizwRgNq2PGDwuVMXcWpTpMB9s7RMUBk0qQioBpe9aZeWhEvUgjW1YZKOypZKux6tCVcVwZPQEDGJWCrAeLA1YjwWhULLqDGk/5RheJRnA8RCpqAr7ZF2PFypMosiAYPakJGzloyFqbaAjNSQcyFbXaaaFRWBgkbM8x0tdjTTxkh+8vNXlnHnnnjR1d1zee6f4RCo8u6pMXSu9gM8zezkKEYJbvZX75UBwW8uXEpjNDCuG3D+5/BUe4qetKdW46OMdaFrooipRElvxsOVKvDYyf7PggYFN26Zzd6pCRlce3IdWw4mebw1ie2pOi2+CPAtLyc1RviXdTW5/2UxYS4EpD1lsamPWAjIpVyDQcgUHIg5OQEblMNbI8ZqURjOMuq/166Uy3F1IRCwoyPN4VWq1YLjqRV8xFQtD8Yb7zLVFpDhjr9QrS7TwUIKTgYtdjTTzEirxI++qm7Y1d0dr/Tzla2dxDNKjgy2wjSVmQQMwf6YgyEhYCoXRjHtEzFVAbTOrDm/LmzQm/ZyjURHImDAf766gQtXVU7a59CWdPj7/gQ/2NFFX1qJnoKYJbIl3mdBRLMBLC83WdsQZsuBBHGnuGXKhKLvwzT8VGLlUlH9hwz2x5xh317IgGXlJt8/dyk1IZO2hENnyqUuYnLnKzG+u707O4aB2Bw7O8l/Yn09QdPMiZf+jEdDRFXk9aQsanmB4YX5qxrCdKc99sfsXFdyn4qAQXlAcFx9iE+/uoFFEWvSrBEjWUb9lgzXrW8AKNimPKC2mW/p05qJs7JSix2NZkoZbhU30uruxMYIpy4p40uPdfBcVzoXsyBRq3NPCiQD1qC2hE3CAYGkMWpxWFWA57oz9KRdQBCyBMc3qOC89qSD7ZFNQVUTtOsNmqgFVAcNPrG+nqtPrJ/Uz8GTkm880QUIIpYk5SoXjH9+D2V1Kvm4TJ0VqDxg8JPzlwHwRNsBEo5TNAtI5j2OWCLrqlStBdbUBvmH1ZWsqhoIbP3GE5184dEOutNewb5VQcHJi6PDxmpccEgFyysCfOHRDnozyqUkhLLo5P+vBouXpCNHjQMZTpjfuz8xrOioCpl84bTGKUlTLjV+ZipjbDTzh4UUrwMgpFxAncBGYcOGDQBs3rx5lC0104Jtw5veBOeeCxdfDKtW5boj+5PPuoYQT7WnS/L1D9538La1YeWS6Ei5dCZdqoKCJ9vTCAGHVAZ525pKLGPyS1NtbU1y4R/3qIleKouEQPUHKnZx+gXdpBxbnNFkUBEQdPzzEbz+T/uzLhWLpCvpS3v0pN1cEG/+WKsC8N5jath4SMWIsReO5/HbXX280pdBSnjVojCLy0pzFfr77umzWVkZGPZ/Vew7MB5LR2HbEyUo1tSEpkVQlPIeJut9auYXGzZs4KVem1fe9X2+dkYj//aqupke0rShxU4eWuzMMjZvVkLH53e/gze/eebGM0X89eV+LrptH57MFlPL9gCahA4ak0auKrSAT59Sz/XP9FAeMIhYA4KiJeFwIDaQRB8Qysriu5S+eNqiSbOKzQa0oNDMNfLFzvfPaeIDa2tmekjThnZjaWYvN9888Ngw4MwzZ24sU0hnysXN1hnys4Rmm9CRZF1jEl7stYcUiJRQ0MIAlOvPNAQGkpQHn3m4ndcsjXJyY2ReiIKFnLasmTgpL0XYmLleW/n1zhYCul2EZvbS1ATLl6vHZ5wBDQ0zO54poi5iYgqREziZ6fZNjYJgQPBIYFVVoKDMf8LxOBCzc/Vmcj9CNYrMZP1aMVvyuj/uY+Mte7l7X3wm3opGM2NIKdkR28EnXv4EZz51Juc8dQ5f2fcVPDkzeZazaD01LWjLjmb28qlPwSc/CVu3QiYz06OZMhZFLKpDBl0pFfMym25Cg9d+AqgMCprKLHZ3Z7BdScqTuH4zyOx2BuC4KqYo//14UrK9I8UHNh3k6lfVFQQpg66ropl/pLwUf+36Kze138Tu5O6C125sv5FV4VW8peEt0z6uzGwyH08DWuxoZjdCwEknzfQoppQTFoVZXhGgI+nOKqEDxTtqf/6RTqSU9GSGH61H8YywvoxH0IDOpMtH/t5CdVD1QmqIWEgkB7N1akKm4NhhCjbqWBnNXGBfeh83tt3In7v+TL/bP+x2O+I7ZkTspLXY0Wg0M4EQ6oKciSyrUjENaIgYvNw3vm5ehoBk9s1JD6qzfY+2taXwUPV5yBZ5/Pv+BDs7D/DzjUtzgufufXG+8GgbT7anc6Lo+IYQHz+5YcE0b9TMXlzp8mDvg/ym/Tc82v8opdhpjy07dhpGNhQtdjQazbQyuMlj0vFmjUPdlwu5ztoC9vY542pxISDn7gJV/M+V0J50c1YgiWp3ICXYnqQl4fCxLa08+vZV3Ls/waW376MzNVCLJ2ZLNu9L8vcDe6kJmRjZTtnTlQau0QD0OD3c0nELf+j4A82Z5pL3e33t63lj3RuncGTDk3ZnJlZoptBiRzP7sG0ILJyCV4ObPHalXPb2O7OiPcRgzZV2S2vEOdyx/C7c/mM/Ton857NNLEOmIO1IdnSk+PaTnXxtaxcdqeKfiu1Bd9rl2LoQaTcbF7T5ID/YsKRA8GgXmGYyeTr+NDe23chdPXdhS7ukfUIixBlVZ/AP9f/AyZUnT/EIh0fH7Gg0M82pp0JlpSokePHFsGzZTI9oShnc5NEyBIahLk57lhh5DAYEiimKt+Eolfxdu9LekNf8192sO8/14NotbeRvajA0nsj2IOlIygIGS8tUL6gvPdbBWcuiGEIMKgQotQVIMy5SXoq/df2NG9tv5LnkcyXvtyS4hI01Gzmv5jwaA41EregUjnJ04hO5iOcgWuxoZhcvvaSyrwDuuQfa2uDzn5/ZMU0xg5s8WoZQRfwEhE3IeOqx7zqaiTZZgoGA48ksQ2rlCadcewwpc/2tfDKDDDrDDaE77VIWMBBCUBs22dWdZltbit6Ml+uNVRc2CYXFiBYgjWYw+9P7uan9Jm7rvI0+t6+kfQwMTqo4idfVvI71Fesps8qIGtGCnmozRW96tkYGTg1a7GhmF7fcUvj3xRfPzDimkcFNHmtCBmFTkMi29DYM1WTSt4JIlPgxmJiFZSy4wzye8HGLjL9YPNDgzYZ72ylHErc9opYgbAq6U9CWdPjGE130ZzyWllm5iSZiiaIWIO3q0vi40uXBvge5sf1GHu57uKSAY4Aqs4rzas7jgpoLOCR8CFEzStAITvFox0ZPejY4yqePSRE7iUSC3t5eQqEQtbW1k3FIzULljDPgX/5FiZ5gEE44YaZHNC0MbvJoGcp+4wKeN9TdYzC5FpaZYrLfQsz2eLE3Q9g0qAkbBE2V5r6rO01d2Byyoi5mAdKuLk2P08OfOv7E7zp+N6aA4zWRNVxYeyFnVZ1FdaCaqBHFELOzdm+PtuyMzp49e/jrX//KAw88wNNPP00qlcq9Fg6HOfLIIzn99NN5wxvewHK/Aq5GUwonn6x+vv1t2L9f5WPPMcZrGcjvsr1pb5zPP9xGfJhmoAvM3V4yQUN9XknHIxHzOL4hTF3YHNLeIh/fArRpb5zrn+mekKtrMqxC2rI0czwbf5bftv+Wu7rvIiNLK2QaFEHOqDqDN9S+gWPKjiFqRgkZoSke6cTp1mJneJ577jm++c1v8ve//x3PUyvNxsZGDjnkECKRCH19fXR3d7Nt2za2bdvGd7/7XTZu3MiHPvQhDj300Cl5A5rpZapvxIXHb+AEKefUjX6iQbCGEJywKMzb/7qf+Cj3IpPZW49nJrD8HhWSAndDYQD40O9SypUEDLjlxb6SXV3FmOj/3pOSH+7o5oc7ummOO0gpCVmGtixNMWkvzd+6VcDxzsTOkvdrCjZxQc0FXFBzAYuCi4ias9eKU4y2xMK6e5QkdjKZDF/96lf51a9+RVVVFe985zs588wzWbt2LZWVlUO27+jo4PHHH+e+++7jjjvu4I477uDd7343//Zv/0ZgAaUUzzemOptlMo4/WWJsPMe5e1+8pCDY0Y79WEuCF3pGT2NdWLeq4RGo2jpSSmxPYgDRgEFtyKA9qYof5geA57uypJR0pVwOqQxwMGaX5Ooq1vxzpP/9FZsOcM2J9ayqDA77Xbp7X5yPbWnlqfYUXjZOK2IKwhazNoh6rlugDqQP8Lv233Fr5630ur0l7ZMfcPzqyldTYVXMCStOMQ7EbFxPYhpz5382EYSUo3v+X/e615FIJLjqqqt4wxveMCbBEovFuOWWW/jBD35AbW0tt95664QGPJVs2LABgM2bN8/wSGYfQ27m2ZVyZ8qlImhM+EY8GccvRSyVcoPetDfGpx5s46XeDJ6EqCU4sjY8oujypGTjLXuzE6o1ZEI9EHdYWx/mYyfV8ZXHO3NjDBiCJeUWF6+u5NwVZZywKMy1W1r56hNd4/4sFwqWUAHOZRY0lQexDHA8sAyIWgaelDTHXX762iUETJH7ftWGTcKmIOUqoVMZNPjHY2r45rZOmsqsohN2/rHOP6R8yGvD/e/70i57+m0MIagOGUW/k3fvi/OBTQfZ26+aqfquOMdTXeNXlFv02R5r68PccfGKWSEo5moavyc9Hux7kJvab+LBvgdLDjiuNCt5bc1reX3N61kVWUXEjGAKc4pHO/ls2LCBl3ptXnnX9wE48E+Hs6R8YRggSrLsXHDBBVx++eWEQmNXsOXl5Vx22WVccskl/OhHPxrz/pqZx5OSLz3WMSET/2jH/+ltT2CkQyxdVDduF8JoVhVgyA36iOog/3B4ZW7Vffe+OJ9+uJ20K3Pp3ylH8Ehzgrf9ZT+XHlHJu4+q4sTGSEHmzkPNSXZ0pEa0DDzVnuJ9fzuI7UkVR2JIDsYdDsQcHm9N8fUnDNbWh+lIjq8Vw0KjOmTQk/FIurC332ZlRYDK4IAbIeVKgqZyY53YGCkIAO9OQdCEtfVKxFYFDf5ve9eIri7/WIPZ1pYqGgDdl3HZG3NwpfqOV4UMTCEKvpNnLYvypcc66Eq5SAkBQyCy7TIChsxWkXZZWj6yZWk6KdWCOV2UsoDpcXq4tfNWftf+Ow5mDpZ87CMjR3Jh7YVsqN5ATaBmzlpxhmNfv63FTj5XXnnlhE9UVlbGRz7ykQkfRzP9DHczh9JM/KUc/x3Xf44fb7+Xx48+lb+e9ib+cvrFJR+/FDH2sS2t9KQdYrbM3aC7Ui5/P5Dg3v0JKoMGpiDXiiBkqgnHkXnFt2yX7zzVzY92dHNsfZi3r6nkzj1xdnWn6c949GY8YrbHkrIAFcFC333YFPSkPaIBwaGVAfptyZ7sSt7/SHvTHvfuT+jg4xIpswzSrgpGdjxJc8KhIqjSe3331Nr6cK6jen4A+OCJ0ZNyVFdX/rHy8Stg5wdASylpibu4nooHciR4UlA+qOBhRaCBXd1pyoMGfbZXEI8vhMAyJCnXQ0qTjKvONZNM9cJnrIxmYdqZ2MmNbTdyZ/edYwo4PrPqTN5Q+wbWla+bs1acUtjb73BK00yPYnrQdXY0o1LsZp6Pn80y3htxd2cfZz59PwHX4dQdW+ipqMmJnYHjSx5qThSdpH79XC9PticpDyiBkXC8AndGbdjkmc400YDgkIoAQgj6Mi4tCRdPlbIh7XrYXl7hPETWlTBUedieEmhPtqeoDBo0lVkIVEfvRFbErKwoFDw9aRdXSmpCJv225MWsiyyfBVa9fUwMLqRoCqgNGwQtwd5+ieNJkrZHzHYxhMi5pz5+cn3BpGsIUVQwD651VMzVNfhYPsUCoBOOEimWoUZvILOPCwX8Iy1JMq6y+vjlBAoET/Z9J5zhLUvTyVQvfMbCsBamzj6ufmozq7rvZo8ztoDjC2su5HW1r6Mx1EjYGCps5xsv9pYmAOcD4xY7yWSSzZs3s3//fjKZDMVCf4QQ/Ou//uuEBqiZeUrJZpnIjXjVw3cTsQfKF9x70msLXu9KufSkPf770Q5goNHj+SvLuHNPnCfbU3QmPbpTHnv7HdW7KVt0L2QZVAUFGU+yyFI36MGrbldCfJDnyHdjFdMflpGt6Csh5Xjs63dIOV5OrKRdyf6YzVG1yuQtpaQ77amO37ZHe8oZInQ0w2MJJQDyiw0ujpoYhkFlEFZUQEvcIe5I2hIqxst3T43FnTK41tFgV9dwxxpcAVsIgePJXB8wW6o2IFFrQPz6CwQQBE2BKQQhyyDpeATzrUrZY8QdjxMXRYpalqaTqV74lEoxC5MRbCVcu4loxWY8s589JXiDDQxOKj+J19e9ntdUvoYyqwxLzG8bQH488u5uLXZGZP/+/Vx22WW0tLQUFTk+WuzMD4rdzH1GM/GXwqp3XMwnX7qBo+77Cxt2PsCD687IvdaXdtkfczAFqrKwZZB2JY+3Jrl3f5zygEF1yKArOVB7RgABoVbrSccjaQOSoqtuD4E9jPIY7pudv3nSBdPzVKyFlLleVglH0pqwqQiatMQdko7E9aAlubCqlo6XurCBm7W0xW0v1y3dAJrKTBaXDcQZVAZNTKEqwn5yfT2nNkVz38WtrckxZQuN5OoajmJWITO7ecYDyxA0RQtvtf4C4ZTFA9fW4ojJ3pgk40ksoaS27WWtWKHhLUvTyVQvfEplwMIkCFQ+CTV/w45sxRWlBxyfV30eF9VdxKGRQwmb89+K45Onudndk565gUwz4xI73/jGN2hubmb9+vWcc845VFZWTlmvjx/+8If87Gc/44EHHhjy2te//nV+8IMfFN3vscceK5oWrxk7EzHxj0R+YOHyt7yRz64+jWsyLrWWRVhKUq5yCQGsrAgQDagbaNhU7iXHA9uT1IRN9vY7OXXiZ7KETElAQMojF2wMFKy6M16p+RgDDI6p8Y+relpJMlnBczDmUhaUOK5H2FAiydNapyR60qog4N/fspyr72vn+d4Mu7rTJDMujYOEg285W1sf5l/W1RZt+gmwpMzi8mNruGJtzajiZawumMFWobQjMVXJH1aUWwUuzfwFwomNkdy11ZfxKA8I+jOSjCtzTVePqw/zldMbZ0WW01QvfEplb7yb8sbbKWvYhB1oKXm/NZE1vL729by25rVUB6rnvRWnGFaeaWeXtuyMzAMPPMDatWv5+c9/PtnjKeC+++7jW9/6FlVVVUVf3717N8uXL+eqq64a8lokMrMZC/ON8Zr4h6NYYGFDxKIqZNKedLImfokQsKzMojI0sFJUlhnlgsq4ku6Uh6AwrkNCNgtmYCXTlvRYme0qLrKvyzxrUH6zy7Fge2Bnz5w/Bg/oz3awdGTxnk+aofifYUvcZvn1L9Kb8dT/KftCuifD8orAsII7P5YjbApitkcq6+K66t4Wrn+mZ0rEw2Cr0Mu9Gb72RCd9todlimHHe87yMjYsL+PHT/cUCGlTwBsPLed3r18+4xYdn6la+JTKzsROftf+O/7S+1fCSzIl1ZryKxxfXHdxLuB4IZP/n+lIunQkHeoj81/0jesdJpNJTjnllMkeSw4pJb/61a/40pe+hG0PX1xt9+7drFu3jje96U1TNhbNAKWa+EdLBfUno75sh+qygKqJsq8/Q0XQ4LqTVQG253sy/NcjbdSGC03ivmXGzHbMTrsShHJd+W4kiXocsQRVQYOY7RE0KGi0GbcHLDxBU4AcsMoMh/8uhttmuOe10CkdiRKhB7IlpC0BZtYy5gIxW/Jyb4aAYRC1lOXjuvUNuYKNfixHZcDIpn7LXK8x24Md2UJ/Pzx36aQLnsFWoSNqQ6MuEL62tYOfPKOEjh+fJKX6bt/2coxvPNHJ1SfWDznXTBX1m+yFz2ikvTSbujdxU/tNPJ14uuT9TKeB9yx9I2+qeyONoUYCYmGkWI9GYFARwUdakrxuVcUMjWb6GJfYOfTQQ9m3b99kjyXHpZdeylNPPcVrXvMauru7aW1tHbJNLBbj4MGDXHLJJVM2Ds1QRjPxj5YK6k9GnUkXx5N0p52c4AibAtvzuPmFfu64eAX1EZNQNkYnPz4gZ5nJCghXSjxvaEVhgRJCbdlgyWXlJtGAqqprGQIhsl3FAaQsKRtKxxVPPRaQH1vq+Oo1j5SrMuhSrgpg98nPFtqXFTrB3M1dEDDU/7k77eVSpP39xioaShEboy0QHM/jC4924HgQMSlwCwWkJOXCFx7t4MMn1GIZA66wmS7qN57YppEo9lm2ZJr5fcfv+VPnn+hxeko6jpQC4sdQkTyXzxxzAWctqZuyEIu5SsgUBRboh5q12BmWd73rXXz6059m+/btrF27drLHxMGDB/nc5z7HW9/6Vt797ncX3eaFF15ASsnq1asBZW0KhUIYhlF0e83UU0qxsaqgwVPtSWK2x5HNL7Cu5XnuPPoM+sNlJB2JEJKn2pNsa0sVxAdUBz0S2RmwzBKYQEoZdGhPukXdTx7gxyuGTGhOOJQHDN65ppKKoEl/xuX/tnfTb8uccNLMPKUKSt9690R7mrfevp//OrWBzpRL3JaETUnKVhlwridzhfoEykJkCmXh+f72bv74Yv+IhSb9+JP8ybg77RZUwh5JbIy0QPjtrj56Mx4Bg6Kp3AFD0pvx+O2uPt51VDUwe4r6jSe2qRiFws2louZpFi3dTCr8eMkVjqVThhE7jfLYeawIHsrlxzVwxtKZj3GajUhgWbnFvpi6oW45kJjZAU0T4xI7FRUVHHXUUbzzne/ktNNO49BDDy1aXXm82Vh33303wWxxsOHYvXs3AFu2bOHLX/4yzc3NRKNR3vSmN3HttdfqmJ1pptRiYx8+oYaetIrB+MdHbubD9/yMlBVk85Gn8fZ//AZJAvSkPdoSDoYQnL+yjPv2x2kd4XocqeGJ/5Ltgu159KQ9vrK1i6oACMMgUUIFv+FS0DVTw3iSljtTLv96XwsVAUFvRtKXcbGlEru+5RAG/o+d2ay4j97XQllA1UoqVmiyPGjQkI1naE86ZFyJJ6HfVvFA/n7jFRt7+mxkthdWMQyhgu339Cl3/mwr6jdRfOEWc/tY3HQ/Vt3f8AItJEvc/4jIEbyh9o2s4mxS6XKqwybrGuZWj67pxhBwZE2wQOw0x22ayua3m29cYidfwNx7773ce++9Rbcbr9gZTejAgNjZsWMHV155JeXl5dx333385je/4cUXX+RnP/uZtvJMI6UWG3uiNYUrwUTypqc2ARB2MtTHunCtIIan3AydKZe798X5+hOdOMNYXQwBAQPSJcyOQgxkUUmg1wZZYjhyXmysZhZje1AXNknYDqnsvzY/YH0wHio1XNgetjfQmsHJxm31Zysa7+tPYQhoiJhEA4LmmEPKBS+7T8Qyxi02VlYGEEJZm4r1Y/SyRQZXVqqJaDYV9ZsonpT811OPEFp6O5U1D4KRKemKtAhwbPA1nF91EW9acjIhc/wtHOZ6M9Px4HiwNK9FhERZGD/6qrqZG9Q0MC6x88UvfnGyxzFmTj/9dCoqKrj88suJRpXffePGjdTU1PDjH/+Yu+66i/PPP3+GR7lwKLXYmBBgCsGSjoPUxwaaXf7+uHNJuWoZbhmC2rDBFx9tpy1R3EUF2Qki7++RgocHG3BGEy6DxY0WOnODpCMxDMFoVRvzv1O2p4oSSkku5dt/vjOrmlwJrQk3J0z8ViIHYg5eVBIwDaLW2MXG29ZU8uF7W+hOe5hCDknlznhQGVDXw9bWJG0JZ8xF/WbbhJ50U/xk7x3c3vN7epfspFSpUmM0Eug/m2THWWxLVPOQC9eXt4w7Tmmm455mCkPAqxaFuPVlg67s9/vXu3q12CnGxRdfPPpGU8yZZ57JmWeeOeT5d7zjHfz4xz/m4Ycf1mJngozlJllqsbFDKoNEA4JXapfQ8Pn7OW/3g1yyfRM3rz03Nz9FA4KulMfWtmRBoUCf/Gks36ozmdYXLW7mJmlX5urqlIoqXChzWXzD4WeJ+Y9dqcogvNLvYAgImwaNUZO4LbnjlRhA0Xif/OvIMgw+sb6e6x5oI+WCKSS+VnOyosowBP94VzPBrNvM9Tx60i6mEFiGIGKq4paOJ3GkJGDIXFG/UhIGpksINaeb+fpLv+He2G14Zl9J+0gpODx4AqeXvZGbnzycvTGLgKHihQTjj1OaLXFPM4EhoC5sceriCLe/Egfg8dYUu7vTHFEzvxqd5jPvkuvr6pQ6TSQWRtDVVDHWVc9oxcY6kw6rqoJUh0RuMkoFw9x27Dncduw5BcdyPagKquJqPsNZbbT1RZNPyvHG1Uh1QvHpWVdTwvF4sVcd6cuPd/Cdp7pYUm4hpWRvv0PalYRMwfENIT5+cgM1IZO2pENj1OLcZVH+ti8xJPMsbAqWlFmEsguJ3d0ZetOSjpSTq9Lsb+7XiaoOGnSn3VEn9H8+ribXyHaqLBue9Hik/xF+1/47/t67RbmOSyiuLNwywvHTMfvO4+OnnMxnH+nk2Y5kwb1lvK7D+Rb3NFYcD3b3ZFg2qNv5r5/r5TOnLpqhUU09JYmds846i/e973285z3vyf1dCkII7rnnnnEPbiTe+973YhgGP/nJTwqef+mllwBYvnz5lJx3ITCeVc9IxcZa4upG/3KvzXv/1jJqUHDK9XiiPZ2z9Ix0uzGyNUny5wgdX7Nw6S+hH9Jk48KQbL5+WxKzVbPZfGK2ZPO+JH8/sJeygEHCVtYY/7tuCZU5mPHUpORKVSk8YqmyDAnby33Xh1TyRtUjksAHNzdTFTKHndBf7rP5j4faqQwaU2LZ6HP6uK3zNn7f8Xv2pveWvJ+VOYTKxHlEYmfwUk+QlZUBHCnY1p6atDil+RT3NB78+LP6sMHiqJn7jv5qVx+ffnXDvE3VL0nstLS00N/fX/D3TFNdXc0dd9zBtm3bOOGEEwDwPI/vfOc7mKbJhRdeOMMjnJtMZNVTrNiYJz1SriRsCuojJr3DRBP7acGmUO6BlrhaufpdyfO3gYHnLENNEMmBbhEq3VirHc0MM9JX0PZUSwxz0HaOBCcr2Pwq36pkQoCWuJsrmlkMIeCQigAVQYM9/Q77YjaHVgaKTl5pV5J2JDUVBpFsifHJsGw8l3iOm9pv4o6uO0jL0vouSS+A23ciXtf5VMlj6HUET/fbVAQlV59YT1fKm9Tmo7OlmelMYQioyVakP2NplJueV3P7Cz0ZHm9NcfLi+SfwoESx89xzz43490xwzTXX8MADD3D55Zdz2WWXUVtby5133sljjz3GRz7yEQ499NCZHuKcZKKrnvxiY20Jh88+0s4rfXZOOPntE3LHhKwPfsAM73pQETSpCZt0ZGvoDBdPEbWMbPFANXHURUwsoarvar2jme2YxlCrkI9Eif2k7dGVdkk43ojuNilVh3UhBGUBQXe6ME5bSknCkcRsL+dKdjzVaNXxVJXpqCWoCRns6Ejxf0915ZqqelLy21197OmzWVkZ4G1rKnNFDjNehk3dm/hdx+/YHt9e8ns3nHoqEhswes7lpa5yWhIuB0ybiqDBcXnVmLe2Jie1+ehsaWY6U3gSurOLzqNrQ8CAIeNXz/UubLEzG1m2bBm//vWv+eY3v8kvfvELMpkMhx12GF/+8pe56KKLZnp4c5bJWPX4xca2tiZpjjsFwunQ/lb++1f/w81rz+XOI08jFYxgCLWPzJrsAwb8w2Hl3L0vTlfKHTaxJmjAucvLeM3SKJYhuOWFPnb3ZOhLe1roaOYEo1kg/UDotOONuq0H7O1z6Ex5VAXV9ZZ0JOVB6Mu4tMRdUq6n2m5kj7UvZuesp2rhoa7DtAf/+VA7FUGDkCloiSuxJbPxSR++t4UPr3epXXwPf+z8I91Od2lvWApC6WMJx87H6zuJuG3iSQhbHlVBySfXN3BqU6QgUHqym48OPl7SVfcdy4CIKaatmelMkW/ZqQmZHF4d4PkeVcfpt7t7+doZjZjF6iDMcSYkdtra2ti/fz/p9PDmylNPPXUip+AXv/jFsK8dfvjhfPe7353Q8TWFTOaqp5hwet2Tm7hs621ctvU2EoEwJ1zze15ZvAqQuXo6x9aF6bdVrI9ExSIUW9FmPPjdC/388aV+1taH+cJpDbQlXP70Yj9/eKFfCx7NrKeU76hEuWlLQQBJxyPlKJdwzPEIpV3VI8yTWIa6nnyxk3bV4iKQrUPlx9MZwKKoSXfKZW+/uvosAQHTI1r1DLVNm/gj2xCtpV1lFWYFwdgZdDWfQ1v/UtoTDgnXxsAmaAoChuCkxgj/sm5oR/rJbj7qH+/ddxzg6c50gdhT8SzWuJqZzrYU/+HwA5R9DqsK5sROa0IFtp+3snymhjdljEvsdHV18e///u88+OCDo267c+fO8ZxCM0NM5iqqmHA66/G/5V7viVTwfP1KDKnEjB8496XXLOLLj3eQdDwWRUxaEyP7zm0PnmhL8YY/7aM6ZBK3tQtLM0co8YsqZen5YgGheoeVBwyqArCn38aVStSAwBlkKnWzta3cvOeFUFaOF7J1WEwzTt3iLSxauplAuPSYzbC9ijfVXcyHVl3EDTtSXNPcSsa1CWRj7Typ0v4tQ3L+yrJhxcFUNB/NVVQSg0tbjP3uMZdq9vj3WZ8zlka5c088t6D89a5eLXZ8vvzlL/PAAw+wdOlSjjvuON2aYR4xmauowcLJkJL+sipSgRBhO81tx51DwFLF2MKWwbF1Ia5b38Du7jT3H0hiuzIXrzMaEmXp6Uqpwm8azVygVAkzllhZ23fJWHDpmhq+ua0LT0ocCQaSkKUWIL51x5Oqf9hgd/HemE0wuoeGJZuoXfQghpkZerJieAGiqVMI9W2krfMwfoHgVUHJrS/FiFoGQUOScmWujlB5QNULunNPnI++qm5EwTMZzUf9JAxXwjG1wVyNIr9m0cGEOyRAeySrzUjZq1dsOsA1J9YX9FmbaWtPvhsL1OPj6kM81aE8NH94oZ//O8fLBa7PF8Yldh588EGOPvpobrzxRgKB+d1PYyEyWauoYsLpmg9/FyMe4/it99K6dBX/e+ZiVlUN3Aju3Z/gc4+0k3bHs74q3iFbo5nriFItQKig/caoScyWlAcMqkMGVSED11NWnJTr0ZZwCRrqevELGEI241HYVDY8SsOSzZRVPl/6IO16qpPnEu5/Lcl0FX22R8CQHIg7fOrBNg7GbJrKLMKmIOHIgqDopCtLSveejOaj+UkYhmFQNmhOrw1TMJaRrDZnLYsOm71aGZDs6bf56H2tVIeMWWPtGezGAji0KpATO/0Zjz++0M/bj6yaieFNGeMSO7FYjIsuukgLnXnMZK2iigunCHvPv2jIRe9JyRcfayeeKd1kr9EsBCIBQSYz8gLAAFZUWNSGTZKuJOhJVlYGCJqClCPpSnu5QGc3K3ICBnhC9RTr9VqpXXwP9YvvxQqWXuG4zltHrPVcgsmTSXkmva7Et1n5GZwv9dp4UlIfEblssXzCJtOW7j2WJIzRao5dfUJdQfZqwvFwPJUd2ppws5+zpCpkYAoxKyo0D3ZjAbymKcJfXomTzpr7vvVklxY7AMcddxzPPz8Gxa+Zk0zGKgqGF04AW1uTueceaUly/4FkQX8ijUYDPZmRrwgBhExB2BQFsXVvW1PJN7d18WR7ClDZVoaQSNdvhOpRX/csS1dsZkn5VkSJJiTpRnG6zyDZfj5dyUUcTHiETJslZVARLDSVhAyyqe6SnrRLTWhoWYtSEx8mIwi41CSM2rDBJx9sH7Hm2I+e7ibteAQNwb5YJicm/aDnoKE+Z08KygPGrKjQPNiNBUDI5MylUf62V7WPeLglycPNCV7dFJ328U0V4xI7H/7wh3nPe97Db3/7W972trdN9pg0C4C798X5yuOdOdOwJ6EnrYqmzS9PsUYzNkroY4oAKgKCmD0Q15bxJC/02Riolfvg2Dr1SKoU80Ccyob7WbRkE6FoS97rI+MlV+J2vZbO1tPoSVmETCgLGHjSI2krt83KbGFDUCnvB2KqgrohoL/foSPpsrjMojKoJtxSEx8mKwi41CQMYNSaYwfjDhlPBYFLwBICIWSuZ5/tqaw4P/xlNlRozq+zk8+rF4dzYgfgq1s7+f3rF7jYOfHEE3n3u9/NZz/7Wb75zW+ybNkyQqGhDcSEEPzyl7+c8CA1c5u798X50qPt7OrJZIWNpN9WVZWbyixCYcGu7gy+92p+1i3VaCZGfhsU31EkhIrnyS0QsjnUUsLu7jTPdqY4ELNZWmbSnZYQfpnapk3UNDyEYZZa4djC61tPom0jXT2H0ZNW7pmQIYl50JdxcpYM6UqaEw4VwSB9GZe9fTaZbLuLpjKLvf02MVvySp/NygoIZOvajJb4MJmNO0tNwiilcjOA7amyGWFT/T/yi0T6IYT5wb4zXaG5qGUH9dwJDSG2tQ8EKj/emuSkedIyY1xi5w9/+AM33HADUkp6enro6ekput187bGhKZ2798W56o6X+csnLmDrUadw30nn8cvlp5ASQVxPVXPtz6hVaVDAKNZ6jWbeU8yqU+xOWhdWva9WVgZUdlM2C8txBwJjI5agz87Q2PgYh67ZjFm2q+RxCLueUP+5lMU30hmP0tXncPayCH/bEyeZzeby27U4UlkxPCCR8ejPOByIuWSyRUKXlStrjykEB+M2CVuyt9+mMWqOmvgwFY07S0nCKKVyM6j3Zxl+FlzhP89vcZN0PKJZwTPTFZqLBSj7vGpROCd2AD5+fxub/mHldA1tShmX2Ln++usJhUJ8/OMf58QTTyQanT+mLs3k4d+kTtj+ACs79rNyy34u2fIHui/7Mr896fXYHuzrd3K9rLQ01sxnaoPQVWL29mCKrQH6Mh5NZRaGUBlNAO1Jh+a4g+tBMNxO3bJ7WV5/z5gCjkXiWNLtr6Wj4wT6MxJDCAKGzUmNEd57dDW3vhRDZoObfeERECCQZDxlmW2OuzmR4AsdUPE8a4IhulIOMVvyhdMaeceRVSOKlKlq3DlaEkYp7q6lZRYHYjYrKyxaEwMVqn0rXCAbs+MXTB1PxefJpliAsk9DxGR9Y5pHW1WM1+Z9ce7aE5sXdXfGJXYOHDjAJZdcouN1NCPi36Su2L4591zGDPDno8/EzjP1+s0/tVFHM5+pj1jEHYf0JCUbpl1JyBwQOe0Jh6Qrqah+hoYlm6iqe6LkgOOIKGeJcw5bd51FW28jKcdDCImU4EhJIFv0rzutAnBNMdRyb2VbTTgS1tWH2NGZYVVVALOIkKkOmSQdl4aINao1Ziobd46UhFGKu+vyY2v44uMdBE3B4dWBXEp92pW0JZxcLSFDSBKON66Kz5PNcG4sn7ccXsnjralcDahr729jw4rhCz7OFcYldhobGzHN+dkkTTN5+Depx487jcV97Zyy4wEePvrV9IQrgIHVj6QwHkGjmW9Y2f5vo/W38rd1Stgu7UoOxhz6bY+UjFPXuIVVSzYRjpZe4VimDsHseS3dHa/hqX5BwgbINhzNjsEUKtPrzj1xPnJCDaYQuFIOmTxcCXZ2n6c60iQcye7uTIFlx2csrpzB2VN+erdlqJpCU+kWGs3dddayKDe/2J+1/lgqhkoIyoOCsBlgT7+NIQS9aY+gKSZU8XmyGMmN5XP8ojBPtCnrzrb2FDft7uNta+Z2Kvq4xM6b3/xmfvrTn3LFFVfQ2Ng42WPSzBP8m9Rt61/Hpv/3BsoS/QS7OnKv+/dzW5fV0cxzXAldKaegeJ9pqEDiwQKoVNEvJfQZL1O/ahN1ix4oucKx9Czc3lPobzufWO9qGqIWridJOHZuNa/EmXrsSSWsnmpP0pWqojpk0J12yXgym32kKjD7CQamgKaoyYG4S8KRvNKX4ZDKYE7wSClpS7isrLDwpEpYGMlq4LuTHm9NYntSJTmggrLz+2pNlVtoNHfXSH226sMm//HqhllXQXk4N5bPJavL2dGRyt2bP/lgG5ccVknQnLvWnXGJndNOO40777yTN77xjbz+9a9n5cqVw8btvPnNb57QADVzl8E+73i0goNmFNFrayuOZkEhgbbUwLfeMlTNm3QRE85o1h8hHKrrH6NhySbKq3aXPAYvU0em81x6Ws6mI1GerX3jETRdwqYoCIz2JJiGUKJMSGwPetIeNSGDdQ3hQuHhDYzZFMraUh40WSJELhtrf8xmTU2QrpRLc1xlb70sJW++ff+o6eOGEJy/sox798dxsgHPY+mrNRmMVnNsuD5bCDiiJjSr+mON5sYC9foFK8u59eUYAC/12vzo6W4+tK52OoY4JQgp5ZjnnSOPPBIhlH8WimddSSkRQsypRqAbNmwAYPPmzaNsqSmV/JTR2rCJ63ns7imxhbNGM4/xY9VKJRDsor7pbuqb7iUQ7C15P7f/OGJt59Pevo7+zNAYOVPAsjKTPbGhMS+qfYSyokjgp69dwpLyQO6ajlqCjCtpyTbrtQzBioqBGjr5dXbKAgYJ28MQ0FSmKj2nXUlnyqUiaAybPu5JycZb9vJ4axLHU321fOtJ2FR9tU5qjHDHxSum3Wrij217R4olUbNon6219eEZGVsxNmzYQMz2ePe3fj/qtgnb4zOPdJDICvJFUZMX33s45cG5WQltXJadD33oQzqtXFMSg33evUktdDQaKFXoSCqqn80LOC7N5yvdKHbXmXS2nEdX36JcGwB1xEJXmSshWcTC5N/hPakyiiwD6iLmkGs64SjxUWaJgmKBAJVBk7Jqwb6YQ3XIpNuAleUWhqEmzFLSx/1Eh4n21ZoKxtpnazZQimUH1DYXra7g17tUJl9bwuXrT3Tyn69umOohTgnjEjtXXXXVZI9DMx/ZuxeWLi3weV+7pYXN+5MzPTKNZlZjmAnqGrfQsGQz4Whzyft5yZXE286nve3V9CYDWVFTKGSKiSxXylGTBAQqBgUK41geak7w3492UBMyiAaGTqJpT7ns4rbH4uiA0Mkdd5T08fxsrJnuqzWYqcwUmypKCVD2WVUZoCZk0J1NIfzy4x28+6gqDqkKTuUQp4SSxM5LL73EoYceOuGTvfjii6xevXrCx9HMAaSE886Dnh646CJ497vhsFfRq5t8ajTDEo7uo2HJJmobH8AcQ4Vjp/cUulvOp71rFUU6ARRQTNQUqZmXcxX5P8agbfw4lhMWhbn1pRjbO1JELGPEejShbO+uwdaZkURBqb2sZqJI32we23CUEqCcz1sPr+QHT/cAkHAk/3JPC7e/afmc8+6UJHYuvvhi3vGOd/DBD36QysrKMZ+kq6uL//3f/+WWW25h+/btY95fMwfZuRN2Z4Mnf/hDft5fwac3NNAS124sjSaf8QYcy0wdiY7zaGs+k95E+aj9tEZicKPRwdlYfuBxV2roYmUs9Wi6Ui5dKY+U6+XF3RjUhI1hRUGpvaxmokjfbB7bcJTqxvJ5zZIId+2N81KfDcBfX4lx0+4+Lp1jqegliZ2f/vSnXHfddfz+97/noosu4qKLLuKYY44ZcR/P83j88ce56aabuOuuu2hoaOCGG26YlEFr5gC33FLw50+OOJvygKE6IGvjjkYz7oBjp38tqbbzCKVO5qVue9jSDSYquHhwOE4xTeQXOgwI1a/K9lR6t0D1daoJK9fTcBaKUurRXP9MD0+2p3JWIl8WJB2PRMzj+IbioqDUXlYz00F89o5tOMbixvLZuLKM7z/dkxPUV93bwulLoywpD0zBCKeGksTOCSecwJ/+9Ce+/e1v86tf/Ypf/vKX1NXVcdxxx3HEEUdQU1NDJBKhr6+P7u5udu3axZNPPkkikSASifCe97yHK664gvLyuV9yWjM6npTseMPbsbwosd/dTGVnK/HD1uA4UGRhqNEsICTl1c/S0LSJ6vqxBRynOs+k/eC5dPUvIiDgqFrBkjKLgzGVyh00IJk9XNBQmVGuJ0csUGgJJX4WRQzaUx4COKLKIuWJollFI1koRqpH42Uzd6XMNvodNKbR8ntK6WU1U8zmsRVjrG4sUNu/dkUZd+xRXdHbky7vuuMAd12yEnOwf3OWMubU897eXn7xi19w6623snfv3oED5aWiAyxbtoyLLrqId77zndTU1EzeiKcQnXo+ce7eF89d9HHboyftUYZDZVmY9qSL48kxpdtqNHMBUyiBkXahmHxRAcf3ZwOOD5Z8XDd5CP2t59Ha8mrSdhBDDFhGa0MG5UGDw6sDnNwYpSfjcv0OtfoOZ+NHPClzMTz5qeamEFiGet2VsLoqSNLxOBBzqAwZNEatIRaK74+hs/hgtrYmufCPe+lKuUNaw4jsmGrDJn+5aMWIWUuelMMW95tpZvPYfDZs2EDC8bjq+7eMvvEgbE/ymYc7eKXfzj33mVc38Ok5kp015mysqqoqrrzySq688koOHjzIjh076OjooK+vj3A4TFNTE0cffTQrVqyYivFqZjH5NXXqwiYBQ9CT9ohLi/6YavhpGQJXqx3NPCPX+NGETJ64GG/Asd3zajqaz6W961BcKQiZAj+jWwiJ7cKlR1Sytj7MH17s49e7eunPeLkKvilXEsyuuAWFAswyBKZQMSWOp9xUUUsQsbJd1CsCdKbccVkohpvw25IOPWkVpxOxxJBKw2lX0pP2aBulNMVoxf1mktk8tnw8Cd2jRbEPw7uPquTLW7typQw++3A7Zy+Lcsay2WW9Ksa4Us99lixZwpIlSyZrLJo5jN/hvD/jZXvECDypCoipcvLKhK3RzDcsQ03aqez8YQqHFUufIFT3N6JVu0o+jpepJ952Lq3NZ9CXrCh4rcA+kFUJlhB8bVtnbnERscSA4JGquB3ZQGMpB0SP50mEoWI3TEOwuEx1E086HuVBgx9saMIQokCwgLLOjGS1uHtfnC8+2s7Tnelck9Jj60Jct76BzqSLKyV+t4HBng9V6FDSOYtStOcrYw1QzqcmZPJPx1Tx3e09gPoqvvvOg2x/16FUjvOY08WExI5G46/kHmpOsKMjRW1oIPVUpZQaJBy1rpSoG61GM5+whLLmqIDje6hffA+BUOkBx3b/cXQ3v5aWtrU43tDolcFp345UdWseaUsWLC4AIgFXVSlG9Y1aUmYRMAWOK5X7wW/tIJVFZ3GZSWXQLMgcOrExUiBk8l3TGVcSNMWQFg9374tz2R376Ui6uSai/QL+fiDBs3fs58p1tZjZFg9+dX0fKWUu46suPLsnzPnAeAKU86mPWBzfEOLJdmWp3NNv8+H7WrjhtUsna4hTghY7mnGTfxPsz3j0ZjyOen4bdWGTV9acAIa6mb7S5+X89FrqaOYXkmD5TpqWbKK6fuuYAo4THWfSdvBcuvsXlXAWZZ2xs4uFQysDNMds6sJmgXBoilrs6bdxPEnGG7Ck9NkeKyssXr+qghuf7yPtShZFTCKWWowMlzk02DUdCquaMts7Unxg80F+sGEJZy2L8rEtrbQmXARZS1c28NnxoDXh8vOdvVQFDXoyHrYHljFQxNDx1PbVIYNFUT0lTTXjCVAezLvWVHIg1kV71hL302d7edOhFVx02NhL00wX+pulGReDb4K+Cf1jf/4uG5+7n9bqRdx21lv4/lv+jUMq4MVe1VFZG3Y08wHDTFLXeD/1TZuIlJUecGykV2J0X8Azr5xEyg6NGKzviwEJpByJIZT1oyFi8Z6jq/nmtk5Cg7pQVwQNVlYEOBi3SdiSA3GH8oDBcfUhrju5gXOWl/GG1ZW5RUpP2h02LqeYaxoKWzx84oFW3nZEJTs6UoBq0ulvJ4CAobqhv9Sb4fhFYZ7vzgzpbxWxVH+rdQ1T17lcM8BE3Fg5QiYfPK6azz/amVvA/uNdB3mlN0NjmcXbj6ye6DAnHS12NGNmuJvgYrubc55/GIDGnjbqu1sBdQOuDKoeNqaAhK4rqJmjjDfgONNzCqG+C0jEDuNg3CWZ8VhSbuF6ktaEqzKksr4qZe2Qqkx/ysOPYpFAecDgo6+q5axlZfzf9q5hK/d6WSWReyVPVI2UIp5Pft+nwdVyY7akP+PxeGuKHR0pMp4fEyTIn0aFEFiG6pq+vjFCV8qlL+1SFzExhcCVkoTtURUyZ109mvnKRN1YPkIITm2K8GCzav/Tlfa4/ZUYF62uGGXPmUGLHc2YGe4meMGBpwi6A0rmryeclzORN0QtPnBcDb/a2cO2jolfaBrNtCEcquu20rDkLiqqxxJwXEd/27m0HDwDw63m8OoAEUuwOAJ9GXVdrKgI0JFSYsfIi2kB6M2o7CVTQFPUJGCq/lLf39HNuobCyr1JV2VWpV2PlriD7amYudVVATIe7OhM59xO5ywvKylzaLi+T/0ZL+cqE0A0G5cnIRfTU2BwygqtNTVBLj5soB5NylGtFNY1RKalHs1cSA2fDibDjeVzyepydnSk6c9WtnykJcW7jpydlZW12NGMmeFugk+cvIGzvnofJz98Bxue3sKtq04haHsFJvIzlkY59w976LO1P0szuxlvwHGm7zg6m8+lpfV4ZLZcXkNYCRzLEESyvaBSjkRKLxfEnyu8lz2Om9emYVFUWVBrQpL9MZtPPdjGm1ZX8GR7iqc707lUbt8tFjBgSbmFaRhEDFhaJtjXn+HD9zZz6RGVHFIZ5G1rKrGM4cv51WarJnemXMoCBlFL/d2ccHClJGCo85UHDDqzaeUSFVdk5qkdR0LQEJyyOMLJi6NFrUowerbXRCglyHqhMCluLJ+QyUWry/nFc6ozer/tMVtv7RMSO+3t7TQ0DBQU+vOf/8yjjz7KihUruPTSS6momJ3mLM3EGKn5XaxpGbe/4f388rz38Mn1DZzaFCm4cZ3YGOGw6iDbspH8s/S60CxYJOVVO2kYR8BxvONMmvefQ3988ZDXO1Ie3WkPIVQvqOqQQavr0pb0iFiQV6etAFdCZXCg51K/7RGzJY+3ptjZmSFmK5ExOJVbSrJiysUyBH1ph46UpD2V4emHOjCAf72nmU+e0sDVJ9YPOa+fRt6ddrFdJbrCAYOakEHa8TAB24WQJTANCJkDqfeeVOMWDARUH1MXylmSBluVplqIlBJkvZAEz0Tq7BTjhIYwt7wYI5a17nx/ezf/dOzsKyQ8LrFj2zYf//jH+ctf/sJjjz1GeXk5P/7xj/nqV7+aM8H+/ve/58Ybb6SqanaatDTjp9Tmd/+yrmbI6swQgsuPreGqe1t0JWXNrMEwk9QuUhWOI2UHSt7PSaykq+U8mptfjeuGcs8P7izuu6OEUL2gUi5UBASH1wTZ3p4uqKMjsu4s3+bSl5E0RiX9tsfefgfXk7nMLJE9kSGgMqCynQzAlrA/5qjigTDkWvOA7ozk2vvbAAoET744WBy1aIk7OBIStkfS9nJJBr7bak/MAVn4nm23MKD6K6c3FrXUTLUQKSXI+kuPdXDWsuiCcWlNqmUnyxlLI/zlFdVKYmtbisdbk5w0ywosjkvs3HDDDdx+++0cdthhJJNJwuEwP/zhD4lEIvznf/4n+/bt4//+7//4/ve/z7XXXjvZY9bMMBNtfnfF2hquf6aH7R2pYZsYajTTQTi6XwUcL3oA00qVtI/0LJLdp9B64Fy6e1YzqOSf2maYfQ0hCBiSlKsef/OMRVzy5wMEs+4tAcQdSXPcyYmjlOuRsD1a4i5uXjq5nXUlGUKQyWY4wUDjT9/iM1LjXVeqKrgfPqEWyzCKioOgKWiJu6RcD8crrHzsF1SUAqQ3kG1ZHlRVmY/NywIbzHQIkZGCrIUQ1IZNdnWn2daWmhPVjyeDyQpQzufQyiAQz/39wx3d80Ps3H777Rx++OHcfPPNBAIBHnroIXp7e3n729/ORRddBMCOHTvYvHmzFjvzlIk0vzOE4CunN3LFXQfY0+8M6ZWj0UwpuYDjTVRUP1fybl6mjp7WDRw8cAaZzNgt1rYHEtVN3Le4/PK5fmxPsjhqYmbjZ8qC0JPxSDoeAdR2/bb62+9iHjDUb3/6toSyiMhB15JbwmKi35b8+rle3n10TVFxUBk0qQgYJBxJLONyIK5cIMFBaebBrIirCBr8+oIlLI4GRozHmSwhMlLg8XDxhT5hU9CdUtstFCYzQNmnIWJyTG2QZ7qUiPrDC/1892xJwJw91rJxiZ29e/fytre9jUBAtXd/4IEHEEJw5pln5rZZs2YNDz/88OSMUjMr8VNYd//lPgJ//QvpN13EkRtejTFC0GP+vj88bykf29LKE22lrag1mokQCHZT33QPdYvvIRjqKXm/VO9xtB88l/b2dcD4JwkPZWUJGWAYgt6Mxy+e6yVhe6QcmyXlFpXZBlh+ccCMp+rRdKRcZbHJKhkLFZcjs+nlfhE/363lU+oi4qGDSd59dM2w4kAIQVlANXsWuBhCucos/9xSiS/LUAJicTTAiY2REeNxbFdOWIiMFu8zUnwhZHuImSoOcaEwFW4sgP/XFMmJna6Uy6a9MS5YNXvidscldnyR4/Pggw9imiYnnXRS7rne3l4qK2dvNUXN5GAIwZG33wTf+x58939g9Wp49lkIBkfd95zlZTz8tkNY9ZMX2B/TxXc0U4GkvOo5GpbcNaaAY8+N0t92BgcPnEMm2UTIVPViXG9AQFhZN44rKckdGzCUpSXjgSFUnlZT1GR/TJJwJHv7bFZUZi0pQYMV5RYv99m4cqC5qF+h2M26jDIuhEyJRORiZoLGwHhK9RLHsi1dRhMHiaw5aXGZSW9Gkna8XHxRxDJojJjEbElH0h01HufqE+omJERKre5cSnzhQipmOBVuLICasJkrnwBw4+6+uS92Dj30UB588EE8z2P37t3s3LmTk046ifLycgC6urrYtGkTq1evntTBamYhnge33DLw94oVJQkdn6fa0ziexAQWjiFZM9WogOMHaFiyaUwBx3ZiJR0Hz6W15dV4npoArWwad8AQdCVdWrOWBiuXAqXu7oODkgeTv7WUEA0aVARNlpULXunLkPHgQMyhrFqQ9qA34xIwBREhWBQxaEm4pD2JJchVI/eAtKs6oQdNJXJcqVzKNSHVxTzujG7facy2aRgt+SDueAQNQWXQpDGqUuYdT31G0WzriaAnqQ0bfPLB9hHjcf7wYh9HVAfZ0ZkesxApPd5nxYTiC+cjU+HGUpgcWRPk2ax15979iSk4x/gZl9i5+OKL+fSnP83GjRvp7u4G4K1vfSsAt9xyC9/85jfp7u7mne985+SNVDM7aWmBxkb1G+CSS8a0u2+ijgQEcVvq2B3NhBhfwLFJvOsUmg9soL/3cAYHHKu2B4KoZRCKStqSLhJIu4V1cfK/uwGhdnTyLEFSDlhaTEO5qkDFuBxSGWR/zCbtSvbFXMoCglVVQV7utanP9rAyDYOX+zIM9up4gCEhbAg8KXGzlpaulFtyAsCKCmWtHy35oDZksKrSYn/MZmmZyNXeUe9vQKAAo8bj7O7OcN3J9bzS3zlmITKWeJ+JxBfOR6bKjQVwXF0oJ3b29Nt0Jh3qIrOjnN+4RnHppZfS0dHBL3/5SwzD4IMf/CBveMMbANi3bx89PT1cc801bNy4cVIHq5mFLFkCTz4JL72kLDxjEDuelLQnVYGyMkuJHY1mzAiH6ronsgHHO0vezc3U0tW8geaDZ+LYwwccC1T8iKoG7lEREPSNIMwFqvWDIUAgc60U8tO/68LKVeVTETRYUxNkb7/DR0+oZeMh5bQlHd7/t4O5/lfDndESyoVw9avqaI7b/N/2blKucptZ2diakTAFnNo0EAA8mjgARrWUdKW8kuJxVlUGxyVExhp4XGqLjIXAVLmxgCEByVvbUrx2ZfmUnGusjFtyfehDH+JDH/rQkOcvvfRS3v/+9+dcWpoFwqGHwtVXl7y5H1j4XFeantTsrbqpmb1YwR7qF99NfdO9BEPdJe+X7D2WlgMb6O44gVICjgOGoDmuGmYeVxeiO+3xTGcqV0RvMAK/bYJyNQUFlAUM+vNq1HSmXOKOpClq5URPypWUBQQbDynnxMYIW1uTBAxBT9rFFIKDcQcpIWKCRFlxPGB1ZYCejMemfTHIVjTONdsczbcGhExBW9Jha2syJwBGEwejCZStrcmS43FObIyMWYiMJ/C4lBYZC4Gpc2NBxAoV/P14a3Lui53haGxsnOxDauYZ+YGFYVN1PLZ1hUFNSUjKq3bR0LSJ6vrHEUZpkV6eE6W3/TUc3H8u6WQTFQGD8oAkNoLK9qfQa0+q46TFETqTLl0pl8883K5aOaAykfxsJD+Gxq9Dk/GUdUVK6B5c7Eaq4oJ7+m1WVgQoD4ghMSrdaZe47dGTVvt62eOaqN5TjlRBweVBE8MQPN2hqpI3lVlZS5QkbnscjDkjxsMlHcnb/3qQskF1cUYSB6OJoVILj/rvdaxCZKzH1wwwlW6smpBJQ8SkPWtR2zqLMm3HLXaSySSbN29m//79ZDKZXOXkfIQQ/Ou//uuEBqiZXziexyceaKUj6VIRELQkVKE0g9IzRzQLj4GA481EyvaXvF8msYK2AxvoaP1/uYBjgITjDWmxAErAmMaAWKkJGZzSFOGrW7vY1Z2mL+3Sk1H3utDghpeoOB5DwDvXVPFwS5Ld3Znc91pATqTYUsX1OJ7qdVURNApiVO7eF+eDdzfjSVmQ4eJXLVYF/UQu7iectXL44/JTxV0JwoCQGHhdoGJ68rupxzMeSRv+vj/Bzs4D/Hzj0lFjWUYSKBMtPDoaU338+cxkt4sYzLJya0DstM5xsbN//34uu+wyWlpaioocHy12NPncvS/OJx5o5fHWFFJCb3ogVbaEhBHNAiQcPUB90ybqGu8fU8Bxf9d6mvefS7xvaMAxqO+dU0Rdu6gEQ1AZRm85opIP3dOSS28WEnoyqkxCsQ7fplCxOWcvj7I/bnMwZpNwBsQJgOlJ0p46v6qQLDm2MsAXT2vknOVluUyjzqSbK7iZP1T/UllREShwgfmxPfmuHctQwkbFHalzLi6z6Eg6uHnzXcAUuV5WLQmHj21p5dG3r5qQWJjqwGAdeDw+psqyUxUyeN2hlcRsybZ21YZkT7+6BpaUB0bZe+oZl9j5xje+QXNzM+vXr+ecc86hsrJySES8Zp7z4ovwD/+gApIvuQSOOSZb0aw4m/bGeN/fDtKddpFSTQq+B2GkcvaaBcg4A46dTC0dzWfTdvAsHLt6xG29EcS1RAmE9x1dzUu9dkF6czpPIUlUDyiyQkEg8bLf7Z60y+7uDNUhk4TrFFqAhED44cb+NZB33G1tKZ5qT6omn9lqyZYHmbzqyH69HRhw2xxXHwJJQSp31DIIWQYJ20Og3F5lJhzIEzp+DytQVqG0K3mmM83W1iQnL46O+DmORjF317qGEE+1p7nzldiEA4V14PHYmaoAZT8O6LQlhd+ZP78c44rjaib9fGNlXGLngQceYO3atfz85z+f7PFo5gq33AJPPaV+Pv1p2L4djjuu6Kab9sa49Pb99GTUDddDxTFoNPmogON7qG+6Z0wBx4neY2jefy69naUFHA+HPz2GTAgb8PcDCbpTKnXWX8wFTCNnvQG/zs3Al9kQEDUFOzvTxG2PurCRq7/jZ2Rl3IG8KstQr+2NOXxg00GuflUd7UmH7vSA0BFCgAlBT2V2SZQl1BdeXdlI6eXlARqjFq/02QWundqQEjsSqAkbxB1ZIJoCg/x5loCMJ3mkZeJiR30mA+6uu/fFufCP+ya1w/lsCTweqW3FbGKqApRrw+qYpzZFqI+YuUy4nz3bM3fFTjKZ5JRTTpnssWhmGSNevDffPLDhIYfAsccWPcbd++K8/28H6Ul7WIZaQaZc3QtL46MCjuubNlEzpoDjCF1tp9N6YAPp5JJJGomSSmlXVSbu6Var35idYUlZANMQONmifsPF03sS+mzJ9c/04klI2h4BQ5BxJQFDZvtjDRQg9KQqxlcbNNjbb/ORv7cQylZAzgUjZ49tGoIgA4KnM+UhhEcso7K8fvZsL0JA1BIsLrOI217OtXN8g4pXak869GZNqQKGuOFyL0j/weQx1R3OZ5LR2lbMJqbKjSUl/N+TnUjgmNog9x1IAvBgc5IdHSmOq5/ZYPFxV1Det2/fZI9FM4sY8eJdFoVzz4XeXtUa4pJLirqwclVObdXA0DRE9gZbuBrWLDxUwPGDNDRtJlJe+r0kHV9O68Fz6RoUcDxZ5Aft+sQdeL7XxmRo/Mxw+JlZCRcsVIuFjFcYaAwqjqcqaLAvruJzBFARNOm33Vwwcr4gMQ2ByHY+f3VTmM17EzhSxb35gcwxW/Jyr82V62rYeEhFbqECykX2wMEE/76lNVt80Jde2XFJiZPNIjtl8eR9vtPR4XymmGsibirr7PgcXRvKiR2AH+zo5jtnN03pOUdjXGLnXe96F5/+9KfZvn07a9eunewxaWaYki7ez30OPvc5eO45iBQ3IftVTmt8M7oc0EQllP/QzEPCkQPUL9lMXeOWMQUc93WeTMuBc4n3HcFkWxxKZSz5K/mCyAFE1iWVr/GjlmBpuaUyEqVUPa2kclv5WVu+4Alk43NcqbLFqoMGDzWncLN1d3zxoOJvVPfxn+/s5X/OaMTKa8x7YmOEExaF+fnOXp5sT2F7YBkydz36oUOrKgN0JN2C2jsTYbI6nM825qKIm8o6Oz4NEZPVVQFe7LUB+PVzvXzjjMUz2gV9XGKnoqKCo446ine+852cdtppHHrooYRCoSHb6WysuUf+xbskapJ0oT/jYRmCJVGTgwm38OI98shhj+VXOW0qs+hIeSQdj6AQ2J5uC7GwcKmuf4L6pk1U1jxb8l5Oupa25rPpaB494Hi2IxlwTQUN1YuqPmKSdFUzTUvkQpYB5V7yHJmr2+MH8ZtCBRE3llns7MoMxPTkIYQgYEh6Mx6/3dXHu46qLnjdEIKvnN7IZXfspyPpDsmENIWKA3r/XQcnzR0z1orHc4W5KOKmss5OPucsK+PF3h4AutMe9+yPz2iBwXGJnXwBc++993LvvfcW3U6LnbmHf/GGTcELvQ4p18sZusOmQU3YKPniza9y2hS12NOvev94Ult2FgJWoIf6pnupb7p7TAHHsZ6jaTtwLj2dr2IiAcezjaglMA1BOFvZVwgVA+QByIG2Es3ZSsn51iFTDAQ4p13JsvIAz3ZmyDPaFGAIZaXZ02cXff2c5WX8YuMyvvhoO093pnNu5aSjCn2WBQwMoao0P9WenLA7ZjwVj+cCc1HETXWdHZ/DqgMF9/mHm2e2mvK4xM4Xv/jFyR6HZpbQkXTpz3gkbA9XqmwR/wubdDwycY9owCjp4i2scmqxsiLA/mzdEf8C0MUE5xuSssrdNCy5a0wBx64TobP1NbQfPHfSAo6nApOxubPyqQ6Z2J6KwfGzpQwhkR74ERR+EH+myEkMAWFLEDAE+2NKxHiSosURvazLeGXl8PVN8tO225IOn324nV1daVwJ+2NO3iJHYHvuhNwx87Xi8VwUcdNl2fGrKbdl54pbX+rj8OoAbz+yesrPXYxxdz3XzE9qwwYJx8sFPfo3JZWiKinr76G/opra8DBLyjyKVTldVm7xYq+NzN6km8osetMufbo51pzGMFLUNj5IQ9OmMQUcp+LLaDt4Ll2tp01JwPFkI8ZpkhSolHZXCq5cV8vmffFc8L9/uKChApY9WejmNYSKoQmYqm5OwvHoTXuUBwT9tsQUcoh4sLPVn9+2pnLEcflp21tbk7zcm1Fp6UMWORIhlIVnvO6Y+VrxeC6KuOkIUPYJ5sXo9Ge8XJmEmWDCvbEeffRRnn32WZLJJNXV1RxxxBGceOKJkzE2zQwhsre5wT7oskySPZ/ZwM6mw2hsfjP88/tgxYoRjzW4yqkKtlTm+6AhaEk4RSvZauYGochBGpb4FY6To++ACjju6TyJtgPnzWjA8Xjwxc5YNI9AWWskKhPx3BVlXH1iLb/d1cdDzUl+sbOHpKPcu55Uv/Pr4BiQEzqQdY14cOmaSn76bG+2w/lAWwkVdAyXHVXF5r2Jkmq+tCUcegbX9mFgkWN70JP2aEs44/nYgLlT8Xgs9XLmooibjgBln2Ce2TFgiFwtnplg3GLnueee4+qrr+all14ClIr1L5CVK1fyjW98g6OOOmpyRqmZNrpSHlFLELMlGU9iCZFrdHjOM38naqc4ce/T8MWn4cRjRxU7MLTK6V9f6ee727tJujI3CWjmEi5VddtoWHLXmAKO7XQN7c1n09FyNk6meuqGNw2M5Tsrsu6nhCNZWx+mO+3mCuv1Zzzijsymjgsynsy1q/CDmR0JvdlmoFHLIOVKQLK2PsK/rDX4xc5eejNerv1EecBgcZnJLS/2c+PuvpKCjDtTKvXdFMUDng0hcaXabiLM9orH46mXM1dEnM90uLH81hE3Pt/PS9m4sWUVM+fCgnGKnebmZt7znvfQ29vLySefzPr162lsbKS3t5eHH36YBx54gH/8x3/klltu0V3Q5xj1EZPyoEFF0KAr7ZF2VMEyA/iHHXfntrPDEZ4+4UzWSVnSjco3l3tS8rUnOqkIGCQdjxm0amrGiBXopb7Jr3DcVfJ+/T1H0X7wPHo6TwA5YWPytDI4pswdZIUMGNmKw+7wsTx+bZ3KoMH5K8v44N3NubIOEVPQl/FIuyApbIgrgazGoTXh0JHMtlnxVPr5fz3SRsgyOKEhxMmLo5QHDGK2x027e+gbY82XuoiJKQSulEUnBSWEBHWTYBGYLRWPodCK83Jvhq890Um/PfZ6ObNdxOUzHW4s33JUlhfH1D3DN/tx3Xm+973v0dvby+c//3ne8pa3FLx2+eWX88c//pGPf/zj/OhHP+JTn/rUpAxUMz3k+6APrwqQdFWRMcuA317wPvZWLeKi7Zt4fukR/PM9XRyxLcZJjRHKAwYrKwO8bU1lQV2PwfjZXrYrtdCZE/gBx5uorn8Mo+SA4zCdrafT0byBVGLpFI9x6qgKquCVlCsJZ+MP+jMqps1ACQAEDFdMwb/VBw3Bd89ezP9s7SqoydKX7RXn7+2hjus/9gkYapLyU9ArLEF50MSTkh2dafbEHL53ThNfebyTuMOYa74silhUhwy60+4Qi66T7bxeHTJYFJlbYnUk8q04acejJ6PceCsrAkSyLsOx1MuZTSJuJKbDjeW7qw6pDAJxAJ7typCwVYLLTCDkSG3Lh+Gss85i1apV/5+9946Tq673/5+fc870LdmanhBKAgYCIaFJERIUsFKUoqLXBnLBrwVFUH/XDlzuVUSvDQtWFKkiICpBBaVHCIQSENKz2d6mn/L5/fGZMzuzO7s7u9m+n+fjEUKmfqac+bzOu7ze3HTTTYPe5oMf/CA7duzggQce2KcFTiTr168HYMOGDZO8ksml0FTQz0G3p112x1W+flHMZKHI8KoToiXl5rs2DKE2Bz90W3iGA0ro3L8tzlefaNMOylMcw0hT0/gIDQseIDqCguNUYiGte06lo+V4PHfq//APR8wSvH5BlCvW1lETMnm0KcnXn2gjaEBnRpJyvVytTUFtjoQ5IUHQNIhaAhdwPcnVx8/l84+0UBEwiFgGPVmXHT12PnozGAIVyXG94vSZ/3xhU83sWl4TZE/coTJoEDZV2szxJJYhiFqClCtJ2B53vHXxgE3Zk5LT79zBU80pbE+SdWVeeAVN1QG2dm6E+89aMiWjFSOlv3Gq60le7bFzxdmCpQUT5QGSjjfoezedWL9+PUnH42M/uHPcn8vIGWNe+Kc9+cu+e8o8/vPw2nF/7lKMSqa3tbVxxhlnDHmbFStW8NRTT41qUZrJpX8OuiMl6cq6mEKd9VSFTHYkBS0pZ0AhZWfG47P/aKE6KAhbBkFT0BCxkEj2xB3iWZcJsHjQjJJQpClXcPzwyAqO29bS2nQq8e4VTKeC4+G48OBqvrt+fn6D9y0XgqYBYuAX2c1FaTqzEkO4REyDuVGTdM7zxvdk8TyPHb3DCx0LQEBd2KQt6RalyvyBoHEHTNfjpY4MlmEQMiU7ex1Sbp9rub+OrFva86Ww0LY369EQEXmfnaQjp2Sh7Wgp5XrcnftRUi7WkqakQ2UwmL/PVPTLGS0T5bNTGzY5+8AqLvvr3vw8ts883Mwpi2McUjvQhHi8GZXYmTNnDtu2bRvyNlu3bqWqaui2R83UpTAH/WhTiq8/0Upt2CRiqWk6TYk+Hw7omxvoxwl7spKllQZdWZUT99g3jxLNeOIXHD9AVc3zZd9rJhUcl8IScMMpc4s2+PqIiSdhe6+NBOV8LJTRX2HUxY/29HoeqR6P2rBK8wZNQUfaZW/CKS+iY/bVy5Q6dvyuMFdCb1ZSGZRs67GLXZFz60h2e1SFBK90ZahvHlhT0v8kJ+XIKV1oO1pKuR5bhsi/l5YQZByPpOPlO+Cmol/OaJkonx0p4WfPd3LKoih3vRYHIOlITr19Ow+es5QVEyx4RiV2jjnmGO6//34effRRjjvuuAHXP/zwwzz00EPDRn80Uxs/B+2fzYRyNQud6b6hhf4PROFcHVD1Bl0Zj9a0V1RwaYrBJ0ZrJhYr0E39vL+pguNwe9n3UwXHOYfjaVZwPBJO3y9G0FSbgl/Iujdhk87VsYXN3Hd/mEoAR0LKgXOXV/Ktpzvy4n84/KnoBqVrgvzjL39bION6eaFTGIORqBONroxUabhBuoymU6HtaCnlehy1BGFTNU1Yhkrh+b9nU9UvZ7RMpM8OwKr6EC92ZtnSqZ5zT8LhpNu2cffbFnPM/OiErWNUv1SXXHIJf/nLX7j44os5++yzOfroo6msrKS5uZknn3ySe+65h0AgwMUXXzzW69VMAkufe4JFvUGS4XlELDFovY0f6fGvTTiSVO6X179caKEzyUhiVa/kCo6fGGHB8Qm0NZ06rQuOyyVsQsZVIudvu5L5aEfC9ojnQvLqHKC8L3TK8Xi6NUM59yg8hlwPYkEDawixUXh7u4SK6hfkoSpoYBli0C6jfSm0HYlHzWRRyvVYCMG8mMmOXontyVwNoiTpeFPWL2e0TKTPjs+nVtfy/ee6eKZVDf9tSbq84bbt/PjU+QNmt40XoxI7Bx54IN/73vf4zGc+w29/+1tuueWW/HVSSubMmcN1113H8uXLx2yhmonHk5Knm1O87qP/wZN7dvLk/kdw+5s/wO9W90Xs/KhOKZO1QnM0/7aGjuxMCn0FxxuIVuwo+34zreB4OIIGHDLHIouaAXfjs5184+n2fCFrwBB05sz3RoIj4baXe9jZmx32GOh/VW3IwPEGP8Honz4LCBXFkbK0sEo5ksaoOeZTuUfjUTMZDOZ6XBU0WVKhUpSGEHRnPIKmmHFpvIlKY/XnPcsr6Uw7bO9VjS4ZV3Lhn/bwfHuGrx/fOO5CctQx6BNOOIENGzawYcMGXnjhBeLxOBUVFbzuda9j/fr1RKMTF57SjD3+D1fgmX9x7x7VjXPUa89w957dyCNkkbgRqNZ0p6BbxBRQ6uRBiFztjhY8E0Io0kTD/A3UznsYy0qWdR/lcLyG1j2nEu8+mJlUcDwUISOXCpIGEklPxuWGZ1Sr+IKoScolP8jWxy/M7x8fEwV/+8GWrd2ZvEtxuetZUhUgM4hNQ6nOLE+CYai6E9dTay1MaxXdZwynchd2N0UtNUjUk+V51Ew0Q7ke99geSyotLl9Tz7Kq4JSNTu0LE53GKuTdK6q569VeXuzse/5rn2rn+Y4Mvz59IZXB8RNh+5Rwj0ajvO1tb+Ntb3vbWK1nADfeeCM///nP+ec//zngunQ6zf/93/9x77330tHRwcEHH8wnPvGJknVEmvIp/OH6/PN/L7ruN4esY0e82DLe/6EtvLQ2ZBTPicn9bXuzZeucTEZbcDyH1qZTaN97Cna2ZhzXNzVxPSVMtnVnsaUS5D3ZLAEDejOecjceweP1FxeRgIEjyxt8GzRgTthESrVBxAKC/3umk+aCbqDCx5fA/Jgaumi7fTU+/SOrAogV+JyMRZeR393UnnKxPUlnurhtPevKMYsejRXTzfV4LJmMNFYhl6yaw992Jbnj1Xj+sj+8Fuf1t2zj7rcvZll1cIh7j56yxM6jjz7K4sWLWbRoUf7f5bIvwuPvf/873/72t6muri55/eWXX85f//pX3v3ud7P//vtz22238eEPf5if//znrF27dtTPO5vp35b5y7Mu5ZlDX88Jj91P/Z5tvFq/mLABC2IWXRmPjoyXK4zsmxtkCOjMlj6D7R92N4GAiTYYHAOsQDd18/5O/fwHCY2o4PjgXMHxmhldcDwcvlhP9yu0V11TQ9Splcjhyn5/mwI6Uh6DZKOKsIQyY5NSsr3X5vqn25mTczQv9RzgDxo1aIwIdsYHn18VNEWR2BmLLqOnW9Jsak0Tt718N5MplLdQypGkkWxqTe9z9GismQ3F2KWYrDRWIeccWEVNyOQXL3Xn68w2t2dY9atX+djhNRxWHx7z0RJl/bJ94AMf4LLLLuOyyy7L/7v//JTBePHFF0e8KCklv/71r7n22muxbbvkbR599FEeeOABrrrqKv7jP/4DgDPPPJO3v/3tXH311dxxxx0jfl7NwLZMT5hsWrGWW+euIuV4hOhzcm2MWiyphK09DvURk3ceWMkvX+qhLeXgyfJSVR7qsUYyWFFTyOgLjjtajqd1z6mkk4vGeY0zh1LfU2eQL27hxa6E+7YnynoOX3jsiDvkxmDlW9kN+gRWYdG/FPBqt40xzM9ywRDqMesyakmpIaKeVGLK9WQuutRHa8rlzzviU0rswPRxPR5LJspnZzhWN4apj5j8cHMXXTkhH7clNzzTyReOrh/z5ytL7Jx11llFQz3PPPPMssXOaDjvvPPYtGkTJ5xwAp2dnTQ3Nw+4zR/+8AcCgQDnnntu/rJoNMo73/lOrr/+erZt28Z+++03bmucqZRqy0w6akaWQKWhPJTPjiEgbBrUhA2yrsffdidxpeTQuhB7Eg57k8MfUKp1d9xezoxFFRw/mis43l72/WZbwfFEEDJUh1NXxsPOfZd9UeJ/tfvP2BoKS0BT0sHx+iagt+csHHyn8pApqA4KWlOeikjlnsg/wci3pecUkZ/CyrqSuO1iCDFmXUbtKRdXqjq+jFM61SeBb/2rg2PmRWd0img6MBUiOz41IZOvH9fAt57p4JUuFdhIOpJvPdPBBSuq2W8MU1pliZ1rrrmm6N/XXnvtmC2gFHv27OErX/kK5557Lu973/tK3mbz5s0sW7ZsQCH0ypUr89drsTNySrVlOp46ey3s7vAD4UnHI5PwCJmCtGvTEFERId8xUzO2hCJN1M/fQN1ICo6lQVfbGlr3vHFWFRyPB6V0ue1BV9YjZAksSX6Gln+2ao2wA9GWkLK9om5G0wDP6zMQzDiSDikHLT6WqBqUxRUBAqbA8SR7Ew4JR9KSdKkMGhxWH+KcA6qwXcnG5tSoUzh1YRPB4BEun4zrTbnandnIZBYoD8bFh87hrtfi/GOPcm1vSbq85fc7efz8ZVQEx2aW1qgS9FdddRWnnnpqfpZUKe666y7uvvtufvrTn4748R988EGCwaEVXXNzM6tWrRpweWNjI6AEk2bklGrLNIUc0MZqF5y2uhIcT2IIScgUJGyPrG63GkO8goLjzWXfy85U07b3FNqaTsHOTs48mtmARBU3BwOC37x5IXVhi1te7uYbGzuwcvOByj0aBGpoqNvvxMIS4Iq+Ceou4Lp995H0RZP8NWVddT/fBdgUSoB9/uh6LENw+ys9XPNU2z63iddHzJJ1S/0JGYLn2tJsbE5x1DzdrTtZTHaBcilqwyZ/PHMpp9y+jaealRfPCx0ZPvNwM99fP39MnmNUYufOO+9k0aJFQ4qdxx9/nCeffHJUixpO6AAkEgkikYFh+HBY5Z5TqfLm+miK8dsyb/nGr4h1tPLE0W8kXjFwoywaE4EK0fdkPV7syCARurV8DLACPdTN+5suOJ7iLIyZuegJ1IUt1syNcP821WniTw4fCUIU2zoEDNUmHjBUGqr/w/n/tgwlrHxBJIG2tOociJhqbt2q+jAH14a45MGmvHdQKKwiufvSJm4KgTPo7HdFW1oV5310QxP/c9K8WZHOmoomi1MpjeUjJfzihU7O3r+Cf3dl81HRHzzXSdCAY+dH9rlguaxfwptuuomf//znAy679dZbS97etm06OjpYsmTJPi1uXxjPmqKpwngdSOsWx1j9+K+oeewfuL/6InetOZ1z3/M/RT/AUPpELj0CV1lNKSSxyn9Tv2ADNQ2PYxiDd9YU0ldwvJ50cvE4r1FTSHvaoy5iYrsy38K9tCqAGKWBZmdB11XAALOg6nioh8t6fenlwrV1ZbMYqLP5K9bWcd1T7UVDMAEilhi1yWBHWnnrOJ4cMpVl5kTc9l5nynnvjAdT1WRxKqaxCnn7sgp+8VJP/t93vNrLQXMC+/y4ZYmdc889lx//+Me0t6uzSyEE8XiceDxe8vaWZbF48WL+67/+a58XOBjRaJR0Oj3gcv+yioqKcXvuqcC4HkitrdQ88QgApvQ46ID51IRNutJuvuiy1G+aljijRxgZahsfpWH+A0QrR1JwvCBXcHyCLjieJFKuZFfcIWDA1m61iZy/ooqP/23vgHbx4TAFvOfgKm7Z0k1vVua6sGSuuFjdZqiMUclny1UnSwkbdiR4pjVNRUAMOCEcrclgfcSkImhQETTY7XeQ9cM3V4wGDJZWWmPq3DwVKfQqG6vo2VgxFdNYhTREIrzcleWxvWov3xV3aB0Db5KyxE4sFisy9Tv44IOLWtEngwULFtDa2jrg8paWFgDmzp070UuaMMb9QHrxRZgzBzo6ADj0IxewdK9FZ9olaKowud8uDoOPi9AMTyi8l/oFG6ib+xBWYKQFx6cS7z4EXXA8NbA9+MKj6vdnWXWQCw+p5v82dY4ouuMBx82L8GqXzVPNKRxPknb7urL8Lqtyxq6EDFhcmStQdpVnzzf+1Y7rQVdapZXmRy0qg/tmMlhY57esKsD2Xhu3IJ0GfUOA50etMXVunor09yobi+jZWDIV01j9Oe+gKh7fm87vKR3pfW94GVVC/5prrilqRZ8MVq5cyd133006nc7X6QA8/7xyjD3ssMMma2njyoQcSCedBM3N8PDDcM89GG94Ax95voeP/W0vtkfey6N/94emXDyqa59RBce1z5V9L11wPPVpT3tc9te91IUF4YDJ/lUB/t1tl318SKm6m/xxBj0Zl7qIScaRNCddJXQMVRA9XDt7NKBczBO2R3PSzXv2GELVBaUcj+29NksrA3nBMxqTwcLxC71ZjwUxi+akU2QUGrEEiyv6nmcsnJunKv29ygqZCkJvqvjsDEXAFKyoCfJSbqzEgzvLOxEcilGJnbPOOou2tjauueYaVq9ezemnn56/7rTTTuP444/nU5/61Limkk4//XRuu+02fvvb3+ZNBZPJJLfddhurVq2a1Hqh8WTCDiTLglNOUX+Ai1bV8OPnu3iuLV10xtbfT0QzOKMvOF5BW9OpdLWtReqC4ymPC8QdSSSgCoRNMXxbto8E/r47xXnLq/j+uvlc91S7SlV7SqAEci3o5ZzndmY8ujPZ/PEZNNTa/BEOAQNsKWlKOlQGg3mTwcPqQ3hS8qdt8SFrAfvXDBauNxYwyXouAQPmRi0aIsXf27Fwbp6qlPIqK2Syhd50iOwALJ/TJ3Ze6szw7X+1YRpqjxtNsfKofjmbm5u54IILaGpqIhgM5sVOKpWip6eHm2++mUceeYSbb76Z2trxOQM98cQTOfHEE/mf//kfmpqaWLZsGb/73e/Yu3fvuPsATSaTdSAZQnDdiXO56IHddKRdkrYkW+aP7uxGEq18lYYFD4ys4NgN0dHsOxzrguPpRsqBPQkHmXMSDxjkbfGH48Zn27nl5W5W1IS4Ym0dNSGTlpTDp/7ezJbO7IhOLERBu7rtqVRSfcSkOanmWBkC0rZHR9oh6UgsIehMe7zz3l1D1gIOVjNYuN4vP9bK1u4s9eHijXWsnJunKqW8ygqZbKE31QuUS+FJNY1+XwaFjkrsfPe736WpqYkrr7ySd7/73fnLI5EIjz76KL/+9a/56le/yne+8x2++MUvjnpxw3HDDTdw/fXX84c//IFUKsWKFSv4yU9+MqPnYk3mgbRucYwbT13IFQ8380xrWkdzhmC0BcfppCo4bm/WBcfTGd9tHPqmqdcGBR3Z4Y+aOSGLWMDg2bY0lzzYxA/XL+C0pRW4cu+Ijzm3X92MBOojFiFTsDfhknY9XKls+pdUBmhK2OyK20PWAg414dxf7xn7VRIyjZKTxcfKuXmqUsqrzGcqCL2pXqDs0xgtXmPUMmiImNSGR7d2IeXIzfpPPfVUVqxYwXe/+91Bb3PxxRfz4osv8tBDD41qYZOB7xu0YcOGSV7J4HhScvqdO3IHkjXgQNqdcFhVH+b+s5bs8w9Jqdb2v+1KctFfdrO91yk7ND+bCIWbCwqOy5uFpAuOZx5mQQGxlWu5bowY7E16QwoWARxQHaA6ZBYdz189rp433LY9P3NqtIeeAayoDRK1DLXxZlwStsf/njiXX77YzXPtmSF/V+47czFvvmsnTzWnsD1J1i2ecB4wBGvnRvK/P8URIOXqPBXar8ebQkHYX+hVBg0uX13HsurghHvvrF+/nqTj8bEf3DkhzzdaqkMGIcvgjXfsyF/26Hn7cez80ZtRjiqy09raypve9KYhb3PAAQcUdXBpxobCYsAxP2O6/374/vfh7LN56Mh1fO0VryhMvbwmSEfapS1d3vTm2YMqOK5fsIHq2mfLvpcuOJ65FB4e/klBZ8Yb0EVl9avnETmXY0dKakNmvgbv9n/3YnsQMJWBnyshMwoTHw+wXQmWGvXSnfFYXhNkRU2Ql7uyw9YC/nZLT8kJ51KqqHLGLZ5wPlsni69bHOOH6xfkhV5nWgm9RRXKL2YsnKtHy3RIYzVETI5bUCxs9ibKKwEYjFGJncbGRp57buguki1btlBfP/aTSzWDH0ir6sP7dtD87ndw991w992sCUV5+X8foaIqlg9nP7E3TW/Wy3tmzHZUwfHfcwXHbWXfr7d7BW17dMHxdKRci4X+JwMGyiencKyDZOBx5ElV1NyWhh04zIuZeFKQ8CeMFnjmlIOV61V3vb5192Rd9iQc0o5ECOUN9J8P7s1bWZQiZECLLfnz9jidGRdPqmGkPkJAUKjfia6MR0uqb2OajMnik+Fc3P85T14U5eRFS/KXbe3J8r8b24jbclK9d6ZDGqs2bHJgvyGgL3RkOHMfHnNUv7Qnn3wyv/rVr/j1r3/Ne97zngHX33777TzyyCNFE8k1Y8uYnzE5jhI6OR496CjqairyZ3mOJ0nmzuZmd1CnsOD4CQzDLutefsFxW9N6UomZ2Sk4Gxitn5RpKOGRcQvGO4iBoqgQD9iTcJkTNDhmXpifPq+6qGwpy46sOrkDtvBXoS2lTLIilmB+zCJoCrb3OvRmPTrSLvX9Oqd6si674w4ZV3JnLsIkUBEqs9/PjUrfSdonsaV8MpyLh3tOVX7QTtyWk+69Mx26saSE+7b2sqwqwNYe9Rt737Y4nzu6YdSPOSqxc/HFF/PHP/6Rr33ta9x2222sXr2ayspKent72bRpEy+88AK1tbX853/+56gXphmeMT1j6u6GM87AufsPWD3d/P3o04rC2U1JZ1aLHGFkqW14lPoFG4hVbi37fqrgeH2u4FgPP5zuzAkZ+XEOI4lwOh4IU200ftqq3Jq3nqzHucsr+doTbbzSZY9Kbfl3MXMiZ1HMyvvwACytFGzOujQlHGpDBoZh5J7bZUePTdZT92uMmsR71G9BxlWDf33BI3MizBQMGiEab8bCcLVUVAgY9MSynOesDhpTxntnOvjsgIruvOOASr71tDK3fWRPiqaEzfzY6EZHjErs1NfXc/PNN/PlL3+ZRx55hBdffLHo+qOOOoqvfOUrM9rFeMZRVwe//CUPvtzBT793J3sPOSJ/VdLxyDgeAUPglRhEOJMJhptpmL+BunkjLTg+ktamU4l3vQ5dcDxzyObqZEwB86ImuxLlbRr+FPLR4AG/3dJDVdDEwN6nFLInYVHMJNavhVcIFeXZHXfYHneYG7UIGbA77pD1VOv8oooAhlCv3Xd0zrqSsKn+38l5Ac0JGTRGJz49OxrD1f7CpjPj9nkb5SI0vkdQa8oZELU5eVG0rOf85OraKeO9Mx0iO5BL1RbkayXw+1d7+eiq0dU3jvobuWTJEn7yk5/Q2trKSy+9RFdXF9FolIMPPpiFCxeO9mE1k0xddYRHDzuRioCBf37h5Px0TKEmK5frF2KiTMymHx5VtZtoWPDAyAqOs9W0NemC45lM3JF56ZoeYYFwYYfWSLl3a5zWlEN9xKA97Y36cVRWq/SGWxs26c16LK0M0J52abFl3uJiUc79WEpJ1DJI5H4EJJDJuTlHLIFlCJZVB2lJOmxsTo15rcxQtTgjNVztn3rypKTXloRNJfxCYUFH2uWZVjWjaVGFxfyYVRS1ufzIurKesz3tThnvnelQoOxTGTSIWoJkLgx6x78nQez4NDQ00NAw+jyaZmpRyiPCMnLW9J4KUw9Xt+DP75luQse0eqn3C44jA+euDUa8ezmte06lq+0oXXA8CxCoFFTbCOf1jFSgFB9ngt6sR9JWlcYjOZEQFB+TXVmXilxkR0pJ0pG5ieWSWEDww/XzMYTg/m1xrn+6gyWVVl5QCCGYFzPZ1uPlT3qkVCdDSVtiGpKt3Vk++Jc9Y14rM1xdzEgMV/unnoIheKXLJu1IXE/ieBA21Uwm/3PoyHjUR6yiqM2Nz3WW9Zx1EXPKeO9MhwLlQo5oCPNIUwqAv+5KkLA9YgFjmHsNpKxf5ttuu42VK1fm52HddtttZT/BO9/5zhEvSjN5DNbabhmCVE5dC3LeIRL6NwMawLIqi6akm1fjUxu/4HhDzuG43ILjIB3NJ9DWtI5UYuk4r1EzlZioTkT/6DGAN+8X5Q9bVXFwuU0CApV+MkRffZHrKlEipaTX9vLGgr7Tc2VA8MDOBG9aUsGblsa4cXNnyWhE/yGf/j89DyKWQW3YHNNOo3LqYso1XK0NG3z+kdai1FPC9sh6kpCphGxT0mFhzCLteliGejczjkfS8YhaRj5q05Rrhx7uORsj1vhZhoyQ6ZLG8lnb2Cd2HA++8lgLRzSERzwyoiyx84UvfIHLLrssL3a+8IUvDAjZ9UdKiRBCi52pjpSQyUDBMNVSre0VAQPbc/M/toU/dqaAOUGDrlxbugtkp7gRjzCy1DQ8RsOCB0ZYcDw/V3B8oi441oyI0XZyza+weF19BE/2Ca1yHssSYOWm9kqpohUBA6qDBlt7bOWVI4snqPfakv/vkVa+9a8OVjWEaIhY7Irb+WiElJLdcSd/e19QFYqw1pRLXdgkYhn71Gnkp6xakg5ffrx12LqY+85cXFb0BBiQenI8mZ8qbwklbBK57lORe6GeVJutT9gUSAkLKyx2J5xhIzaGEONjGTJCplMaCwbuJdt6bJZUjrxIuSyxc9lll3HMMcfk/33ppZcOK3Y004QXXoBjjoEzzoCzzoK3vx0qKga0tm/tyfKpv++lVNxDSjVhucf2cD3oyXh4U9SIJxhuKSg4jpd1HykF3e3K4bhXFxxrRklFAHrLCxzmEcC8qEV7auTdkK4EM5d39jfpVfVhrj6+gQvu243r9c3OkijR4wuXuO3xXFsmbxroRyNczyuK8AZNkTsaZF6ApRxlUxELmqPuNCpMWSVsj66MR8gUxIOSymChv0/f429qzZQVPelIewNST5Yh8usvnCeWF5VSRdisguxJ2pWELMFHDq3hG0+3szvhELUEhhB4ufRg/4jNVDBZnG5prES/ItH6UY6MKFvsFPKxj31sxE+kmaLccQckEnDbberPCy9ALoLn4yG5+ok2BmsU8FBdG/7/d2aGtsSfeDyqap+lYcFfqKp5DiHKW52draJt78m0Na3DztSN8xo1MxlLQCxg0muPrJLNELCzN8vG5jRS5rx5GNyfpy5s0JNV9TQeYOdq7PwN7roT51IdNIgFDKpDBqYQ7Ek4+SnoQggChop01OTa7BdVBKgJGbzclaUz3RftCObazl1JXwQE9f9xRxLLecKFTUFLUnL/NnVyMdzm3j9lFTAEXRmPjCvZ3muztFIVS/sU1uKctl/FoNGTK9bWUR00eLQpCUDa8YgG1KYZtQRh0yDleJhCYgCxQN9lEkk0YBDNqZ3CqM1Fq2pIOB5XP9HGjpSLlEowVQcNLj6sZkDEZjJMFouff3qlsR5JpIr+fenhdbyuLjTix9HVlLOdO+7o+/+DD84LncIzq3jWoyMzdKim8NqpInR0wbFmKuCLjc4y24oDQpkQIlX9SFfGw5My3/IdMtTlvrkf9B1zNSGTurDFnrhN0lF1JBUBg0PrQlx1dAPrFsf407Y4tiepj1ikHIntSayc0IG+yIYrVdSkNeXw/XWLMITgJ5s7+eFzXbmxFX2vbzDp0pv12BW3ybiS659u58bNnSWLlvMpq9y09J6My6KKAEIIPOnlW94dKWlKOlQG+9x1+3cylYqe9G8p78ooA8WllVAVMvOF1zt6vLynUMQyqAlLknH161YbUgNP+0eK/rYryQ+e68QyyBdze1KSsD1+8FwnqxsjU2oO2HTx2QFwPckDO/osP5ZUBjikNjjEPQanrF/yq666alQPLoTg6quvHtV9NROAlHDVVUrw3HsvnH02MPDMKlVur/kUIVrxGg0L/kJNY/kFx54boqPlOFr3nKoLjjX7jIESDSFTFfZnR3AIORIMBKYBhidxpYoG+IaGtqfEE/SJHIESAwFTELUMFlcF6Ey7fP7oBo6bHymKphQW8hbWqvjIgpSNHzXpSHuctl8FnpT89IUuHA8MQ9VlGmJg6idmqe6xbT1ZbE9FThZXWGQ9Sk5R70tZSboyLmFT0Gt7VAXNflEXigqFB+tkKoyePLgzwSUPNhUVN4dMl11xh9d6bBZWqPENliGIBgxMV1IRMGhKuARN1Q0EymfHv8yvszl5UZTT79xBb9bLizOfmpCcUGfkcplOkZ37t8dpKThJePeKqlGX0JQldu68884Bl/lPWGpoul/IpsXOFEcIOPdc9SedhnS6pDHXVInUDMXoC47n0brnVDqaT8B1p87Zl2Z646Haw30xUS5+jYjtSQxTKFGRC50sqw6S7cjgShXN8G+baxYikkuz+AJgv6oAB1QPLOQstJeoCRp9tSq56x0piVjqsZKOVxQ1WTM3wqF1YZ5pTWN7YBkyL7R8sRM0VGTk5S4b21P/XlBhYRoGEQMWxtR4is88tJcPHTqH6//VQa/tp6yU2Mm4kh29DksqoSpoqqhLr2oL980MwRu2k6nw92xBzKIr01f/s6zKYkevQ3PSIeOo+pu1cyNcsbaOmpBZloPyxubUlHFGLpfpUqDclHC4eUtP/t/VQYPPrB39vM2yxM5NN91U9O9kMsmXvvQlhBB85CMfYc2aNVRXV5NMJtm0aRM/+tGPAPjmN7856oVpJphwGMJhni5x8FYEjBF7ikwUoy84PpLWPevp7VpJbrvQaMYUV1LUteQznPgRKOGQcWR+WOgNT3eqqIan0lgLKywyjqQ15eJIlfqaGzFJOh57Ew5pd3C/m0J7iY6MS8BQM7dMIXFRU9XnR62SURNDCK47cS4X3r+Lttxzg4oGmUIJs6qgwc64EixRS7CgwqIq5+vTm/VoSjqkbI+n0y6f/HszAEsrA0QsA4mK3ghUCmNvwqUyYFAVNFlSSX5GV1fGIxYQg3Yy+WmxR5tSPNem6p2ebcsUeR35Yy0MQckIWH9KiZWRePtMFaZDgXJH2uWWl3uKPq+rj28cVWGyT1li57jjjiv697XXXks2m+X2229n0aJFRdcddNBBnHTSSZx11lnccsstfOUrXxn14jQTT6mDt3C68dTAo6rmWRoWPEBV7bNlFxw7uYLj1qZTsDOjP0PQaIajlOmf73UzFLLE/5sCpPSQwsh3FyVtD0MY1IYNHE91E8VtiZf1SLvKBbg+YhEyS8+GKrSX2NSaot2V2B6ELcGCmIVpqA6sUlGTdYtj/PL0RVzzRCsbW9L0Zr282JkTNNh/TpCVtSF+/1ovi3MRHVBCZ3uvjZurP5L0icEdcYelQlAZNAhZKmVlGZB2PZKOMjusDBhUBASH1Yf44rENNEaskuKkMC3Wm1WRnMJ0n48roSWlxNRBc4KjiryU6+0zEc7I5TLV01gdaZfvP9tJd0Hu98wDKrlkVc0+Pe6oqi/vueceTj311AFCx6exsZFTTz2VP/3pT1rsTDNKHbweQjkoT+7SMK1e6uY9RMP8DSMqOE70HEjLnlPpaj0aKUc3RE6jGQn95fdIUln+sebfx/agIyPx5VPEVCMZvnhMA41Ri8MbQmxqzeSLe7d2Z4vqRyKWoCYkaU66fO6fzfzj3P2wDKOokPeBHQnufLWHPXGHuC0JenJI/5d1i2M4nseF9+8hZAmqgwYNYQNbCrb12OyOO5hCqGLfXOC0KengSknQUAW8FKS97ILC4/lRi+29NnYuL2Z7kqSjUlbVIZOrj587aMHvAPNBg/zgVp/+UbaE7TEnPLrobinH+fxjT7AzcrlM5TRWd8bl5y92F31mRzSE+dmbFuyz3c2oxE4ikcA0h1aGtm3jOP39dTVThieegMMPh1BxC99g4yIsA1xvckZA6IJjzXSj1IlBuYJnuJOKlCt5vj1DY9TKRyPWzI2wsTlFU8KhPtJnvOenjTKOmqf1VHOaE363LS8Y/ELe1Y1h1i2O8vjeNCA5Zl6ENXMjg6Z0HtgR54L7dtOV9TCAVtelNyuZFzNZGFNGhI4H7WmXhTFBypVkHA8rV8/peCpibOdqcHwjv6TjURk0WFoZyHdxDZeyyr9vBfU58yPK5LQzXbwH9S/G9t/vLR0ZjplXvklo4Yyusw+s5LXuzKQ7I5fLVE1jtadcfvlSsdCZGzX545lLqB6DSNSoxM7y5cvZsGEDl112GY2NjQOu37ZtG3/+859ZuXLlPi9QMw50dcHxx0M0Cm95C3zqU7B2LTBwXESk4AfJQ9UGRExBzziPghhtwXEmNY+WPevp2HuiLjjWTBsKHZGjFiSHOU+M25KmhA30pV76p6AL00aWEBhCiYwtndl8SuvkRVFufK6TG5/rpCnhIKUkZBlDzrR6cGeCD/55D10ZlWryU1Ipx2NHr2RJpUVdRBkhBg3lcBwyBa4EkVuDaQgWxEyak14uZSXx6DM/rAiolNZhVYF8BMuPjmxsTg05CFRKyXMd9qCzyLyC99uXIDt7yz8xLzWjqyFiMSekOrYmyxm5XKZiGqsl6fDtTZ20F9SGLq8JsuHspcyLjY39x6ge5QMf+ACf+MQneM973sMHP/hBDjvsMCoqKujp6WHjxo385Cc/IZVK8dGPfnRMFqkZY+65BxwHenrgN7+BCy8sunrd4hgfPayGLz/WRnOyOJZjS7DHUejogmPNbKTwiIqaqgtqOO59Lc5b96/K/7t/CrowbQSq6FkImBcx6cx6XPFwMxLJs60ZPAmGoU5kQqZkY0uK996/i/86poGLDqvJC4p89MT2EEKJFt9nJ2Aoz569CZcDqi0MYXDp4bVs2JlQRcKoOpmIZTAvZlIVNBHCZUevup/yI+pLWVUFjaKUVTmDQDvSLnG7vN8nA7XxS2BpVXnp7cFmdO2K21QGDK5aW8+y6uCkOCOXy1RLY/VmPW56oasoonNIbZAN5yxlfmzsyg5GJXZOP/10Pv3pT3PDDTcMqMmRUhKJRPj6178+oLBZM0W4666+/6+shHXriq5+cGeCb/6rnYStQtSmAdIbOPRz7BhlwbFdRVuTLjjWzCzahjHw9HmlK8PG5lRRzc78mMXW7qwaxJlLG0HfbKyIZRANGCRdyabWNOQ2+5Dp169I4rabbyX/5N+buf3fPXx2bT01ITPf3TQnZJDMzdby93OV8pakXY+urGpZP3VJjM+srWNjc4qLNzQpB+QKCyNXtFwVNFlSAdt7bQwh6M54BM2BKatyBoHOCQkSBUJnsDrDQC4ahVTdbTUhg/NXVJW4ZTGlbDmgeEbXHa/2cv9ZS6akyPGZSmmsrCv5yfPFQuew+hAPnL2UxujYGrqO+tE+/OEPc9ppp/HHP/6RF198kZ6eHubMmcNhhx3GW97yFhoaGsZynZqx5Ec/gjPPVGaCtbVFdTuelFzzRCttKTc/KwcgMw7L6Cs4fpBQpKXs+yV7DqJ5z3pdcKyZ1Ty+N82b79qe78YycgKl15YkHSdnRijzAyxNQ7kEA3SmXXW9VEaEQoCXS1f7EZhgbmzEE01p3n73TioDAtuD7qxH1BRYhiDrSYIFG7ufHurKeBw1t6+V+6h5Uf73pHlcvGEPe5IutWHytS09tseSSovL19SzrGpgVKTIKydqknJVNMAyBAuiJnuSLtc+2cZ7Dq4qmhTv/z1A8MjcKA1P1SJ+7uh6LGP4aLCfJptOnjqlmApprOqQwVv2r+KjG5rYFe87jV5eExwXoQP7OC5i8eLFXHTRRWO1Fs1EUVMD732v+tOPp1vSbG7P4KF+CCQCV8ox7cRSBccPUNPwGIZZbsFxkM6W19OiC441GkDVtbSlVeGxZSivmmCuxi7pSGRO5AhRnDpK2B4pV+bNCIVQkR9/cnmeXDFxMlfcbAALYya9ufv7233alVg5jx1Pqj+VgdIt66OZ+u2LjLAp+He3Q8rtiyhFTIOasMGWzgxP7E3lxZZfl5N7iUWvy8m9lpqQweeOrufyNeVFhcfKU6ewuHky0l1TYVyEECpa98PnOvOXzY2a/OWs8RE6sI9iJ5PJsGHDBp5//nl6enr46le/yubNmwmFQhx00EFjtUbNBNKWUmZgMhfihZE5wA6GEFlqGh+nYf4DxKpeK/t+2dQ8mnXBsWYW0X9zHoy9KS9/e09Cc8pl+Zwgy6oC7E44pByJQDI/ahENGPlohONJPA/CpqrB803w+w/z9KSKChlCpbmynsQQgohpkLA93ILbZwvME2tCBj9904K8eOm/ud935mI2tWbK3uzbUi69WY+4rUZl5JHQ63mkXY+KgEEsoAwCfT8jv7td1QKByEV0zjmwgnccUMX5K6rKiuj4jIWnznB1RxPBVIjsuJ7kg3/enf+3AG4+YxFLyqydGg2jFjuPPPIIn/nMZ+jo6MiPhvjqV7/KAw88wA9/+EM+/vGP6wLlaYg6UGVJ59fREAy1Ur9gA/Xz/j6iguPejiNp3rOe3k5dcKyZuZRKs4z05EIJE0jZfTOjasMm7SmXoGnQmfUQhiBsqg25I6NS1PVRi86M6oYyKRY7gj7Dv4AhELmTHkdCVVDQa/c9d9DwB4eqWpgrj6rn1CUVgNrcr3milc3tGTKuJGSK/FDS0/arKOv11YaNIqHT3yfH9iBue5x1QIyfbO6kM+MRNlVU2n9NAknaVULsN29eNCKR47OvnjqFdUdRSxALqMGi/Q0fx5upUKD8cmeW7QUdcB86dM64v/ZRiZ0tW7ZwySWXYJom73//+9m5cycPPvggACtXrqSmpoYbbriBQw45hDe84Q1jumDN+HJ4Q2gMxpZ7VNU8lys43lR2wbFrV9HW9AZam9aR1QXHmhmOQKWfyhkSOli0x++E8lBiwzfiC5sCQwguy3VDFaaNjmwI05lR08jnRUx2xNVAUAqeIz/vCj/NpS5POx6dGS9fwOwLIEOo4Z8BQ/CXHQkuX1PH33Yl82MlckFiegU8tDvJC/fv4penLyprg/NQHl+Fr7cQmbveMFRa6qp/tpB2VXeYn1rz63MuPKSaDTuSo0of9bflGImnjl931J5ysT1JZ1qVBhhA0FTjOiZqYOhUKFC+5eV0/v+DpuDLx45/je+oxM73vvc9DMPg1ltv5YADDuD//u//8mLnjW98IwcffDBnnXUWP//5z7XYmUr85jfQ0ABveAMESocLN7VmCJgGplAFjCPRPaYVp27uQ9Qv2EB4BAXHqd6D2LtbFxxrZjaCXOeSVKLDlX2+MsNhCZVyGuqx/U0fVAQHJLGAwddfrzaSjrSX3+T/tivJxRv20JP1mBc1aUs5JAraLSOWoD5isjfh4LgSW6rn2JNw85Go/luyQFAVVPUzG5tTXPFwM81JNy/qRK7zy/GgOelyxcPNPHHBskE3dz/99YsXuvK/Q0M5Uz+5N5Wvv7n6iTa6s16+ZqkioGqW7ny1l1te7hl1+mhf6o42taaJ217eRNHMici0K8nkuuMmorh5stNYu+I2L3X2RZYuWF7Fgorx/90fldh54oknOP300znggANKXr948WJOO+00/v73v+/T4jRjiOvCJz8Jzc2qQPlzn4NPf3rAzfwurGVVysE0XUYdW6RiKw0LHqC24dERFRx3tx3H3l2nkkrsN8IXo9FMP968X4zzV1TTGDX5340dbGpN05l289PCB6NQJPW/XDIwGtOTcdneayMEfO3xliKTQH8j7b9pVwZNgqaauRU0RX5AJvSJLMtQz+FHovwUUcgUSAkp16MpoepnHm1Ksbldnb0HDPIpH9+PJ+vB5vY0G5tTHFXCubiwtqUzN9uqf/rKr8UxUcLxhXYlsj55ZB0fX13Lb7f0sL3HJm573PpyNz1DtK2PVPD4YzbKrTtqSTl0ZTw8WTxrUAgICpF3im5Jjf/UgclOY93+796if398de2EPO+oxE48Hqe2dugFVlVV0dPTM+RtNBPIY48poQPQ2anck0vgF+HZniRgGNielw9XFyJElpqGJ5TDcdWrZS/DTs+lZc962vaeiOuUl7PXaGYC5xxYwXsPmQPAqUsqeLolzT+bknzlsTZcT7VgDyd8CvGHjRa2W8dtj9ZcN9CimKX8dgbZ2Ett2r7I2Bl3kJKiKI4AvH6RKP/ywk076Uh29trYXrHQyd8n58dje6p9vr/Y6e+pEzaFGjZKX+rPECJXmC3z4uuWl3u4d1s8L+zee8gcPCk5/c4dxB3JwphFypXEbYllwMKYxe6EM6r0kT9mo1zaU25+AGopTAGulLRPwHT0yUxjbeux2dzeZ2Ry8qIoqxsnpk1/VGJnwYIFPPfcc0Pe5plnnmH+/PmjWpRmHHjmGWWR6v9aveMdJW+2ujFMQ8TimdZ07ixM/cD4x2Aw1Er9/Aepm/d3AsHeko/RHykFic7VNO1eT2/noeiCY81s5NqnOlhaHS6KIvTmzNTqIiauzLWMQ5HoKYzcFGkhQ/nkkLu9mRt6aQrVhl6VS1UUmt7139gLN+0Hdya4cXMnlgFLKi1sV9KU7Etnl6ot8tdq5NrX1WUF8ab+IZn+L6rfadRgxn1Ry8m/N44HlugrmAYIGcoF2Rd2Fz2wm0+vqcfx4Lm2NCFT8Eq3Tcbx8rUyIcugNmRMiDdOXdjsq3PKNfTk34Fc15sp1O3Gm8lKY6Udj1+/1F102dWvHzhuarwYldh54xvfyE9+8hNuueUWzjvvvAHX33TTTTzzzDP8x3/8x76uTzNWXHopnHce/OEP8PzzsHDhsHdRvyMChF9w/JcRFhxX0tH8Bpp3ryOb0SaTmtnNv7tsLrx/F586so4/bVdFwwlbFfy2p5VrccBQBn+uJ4vEhZsTFG6udmZu1CQWMHClJJF1CVsmZ+5fya3/7qEmZBANFG9mw5ne9RcZKRfSjqv8bOjTLKboExjQ16IOvgiBqGWwuDJI0FAR4lLbqiMhaAiOmVe8jsGM+xZVBHi1O5sXXoX1SwawtCqo2uItQVVAsr3X5pN/byZiKVdmL7f2gNFXK5NyPJoclXYbzhtnX2mMWswJGXRmvFyxtMy/r35d0ZyQMW4eM4VMhs+OJyU/e6GbpoLxQ6+fH+G4BeUPX91XRvXOXnzxxfzlL3/hS1/6Erfcckt+uvmXv/xlnn32WV544QXmz5+vDQenGvX18IEPDHmTp1vStKYcFlVYdDk9ROv/Ru28DSNyOE73Hqi8cVqORsrgvq5ao5kReEBTwuVz/2xhTsigPmJRExR05oYfulL9IBsoR2RQgkcAFZYgEjBYkIt2tKYcErbydTmiMcqVR9Vju5Jb/91D2CodOR3K9K6/cV/a9XC9gW3xvl9NkUmfp6JKEUsZ/AEcNz/CyroQz7SmybgyL+JkQcfYyrrQANE1lHGfL/b6Yxp9bmA9WZcdceUe7UlJZcCkKxc989PxBgPTbrXh8Y02r24Mc3hDhKeaUzieJO3KvICMWMqN+vCGyKBt62PJZER2fvtyD/9q7UtfLaywuOcdSyZ0DaMSO5WVldx888186Utf4oEHHsiHL3/zm98AcPzxx/PVr36VmpqasVupZkJoS7nI0GvULXiAuqp/gFFewbH0AvS0vZ49u04lFd9vfBep0UxT/HRQTdAgYilzPlEgILKuzHnEqM05YKhOoq8c18hx8/s2w1LFsRubU6M2vfON+5J2nyOzYfjGon1rF0IghMy3ogtgQYVFRcAgYsKepPKaWTM3wnUnzuV99++mJelgF2zuhlCRjutOnDugTmYw476mpINEGSE6EuYETTozLgFDia29CZcKS7A34eJ6Ul0u+6JO/vptT2LmCmeK027jS2Hbek/GpS5iYgrlTp+0PapD5qBt62PNRBcob2xJc8/WPo81S8Atb15EzQSk7AoZldhJpVLU1dXxne98h/b2djZv3kxPTw+xWIxDDjlE1+pMQzJehgc6H+Cm3t/S8LoXyr6fk55LW9N6mpt0wbFGUy7tGY+KkHIzFgICQm1CHkoMGUJFSuZGTeK25KA5waIoSKn6kkLTuwVRVWfneBLLEERMhjS9qw2rSesqvaREjSsHigBP9nnXgIqQhHKztfYki71m1i2O8ckja7n6iTa6ch1VAJVBg08eWVuyA6q/cV/KlcSzfcaH/jDT+ohBT1Z5OPvDRzszyk3Zys3BMJA5cQbIPgHp5t7zwrRbR3osB+KUpn8HXNpR4vPwhsiEOyhPVIHyC+0Z7ttabCZ7yaoajp/A9JXPqMTOO9/5To4++mi++MUvUldXp710pjFNmSZua7uNu9rvosvpKus+UgpSXUfQtHs93R2HoQuONbOZupCgIzOy+EBnxqMm62IZIh/tCJrK/G5u1KIqaBC11GYf9OSQIwh8/OjBhffv4vmObN7ID6GO0IbI0NEDkasiybeJi4FF0b6LsSHIF9x2ZTxigdKTyq//VwfxXPQKqR4zbntc/68OVjdGBmzw/mt43/271Yw+mZu3BTioSNe8mEksYBKyXFKORyDn35MpiB7ZUhKxDGIBA0uAFOTTcv5srMK0Wznv71gwmrb1sWY801j+gE+ATa1prnqktSgVes3xjVx51OQYxo5K7OzcuZOTTjpprNeiGQ9+/GN47jk4+2w44QQwTTzp8VjvY9zaeiv/6P4HXpljPj2ngq7mU9iz6xRdcKyZ1lQGyI882FcypQpJymBvwuXAaouwaajIRU5AVIcMopZRNILg8IYQG5tTtKXcfH1JoUlg4WYp8NM05AuMC/5Tko60GmEQtyVZV+Y9dvq/MstQQsHNiZDlc4J846S5NEatAZPKr3i4mb1JVc/Zv2Znb9IZ0lQwLx1zgqtwIf7rmx+12N5rk81FaoK5RWdzU+DnRy1iAYOQpd7fgKHWPS82MO02EbUyPiNtWx9rxjON5UeMdsdt3vL7HfQWVNl/5NA5fHZt3bg8bzmMSuwsWrSI7du3j/VaNOOA/PGPEY8/Dt/+Nj1HHsnd932S29tuZ0dmR9mPkY0fSMue9bQ264JjzcwgMYbebY6rBmU6XnGn0lBYBqRdj5SrIhU7ejyyueGcGdcj7XgkHUlV0OC0pTHefNdOtnRmiGe9XAu2JGoZVAYNls8Jcs5BVSytCvDlx1pJ2C5BQ5DO5Zp8IZB0vEE9ZeojJhVBg4AhaEu7g46wMHOP5xf7DhbP2tic4vmcn0p/E71Qribn+ZwJYKHPjt8V5kpYWRvMp+L2JBwyjmrRbko6VAaDVAYNllRYeQNFXzBKYEmFRWVQicL5UYttPVmyXs4ZOmyQ8Qam3WYL45nGqg2b9GRc3vr7neyO9x1kb1oS47unzB/guTSRjErsXH311Vx88cV8+tOf5owzzmDx4sVEIqWV6uLFi/dpgZrR848nX+GExx/P//uuQ5q4Yff1Zd1XegES7a9nz671xHuXjdcSNZpJYSTmfcORloCrIh4BMfRYBz/944+JsD01+TqQM/LMeLCt20EIqA4arFsc4wfPddKb9QibgniugBggaatoxUO7k/xtV5JoQA3M9KM5lgHCEEipun8y3uAjCQr9tUDV7aiC3r7bCPUyEVLNM3I9yStdNhf+aTexgFE0fuHxvSmyniQwyN5mCTVF/fG9xWKnsPXcMAxiuQy5ELCj18HxJCnbI267GELQY3ssqQpw+eo6llUH2dqd5Rv/aqfH9rBMQdgUmAbEAgZpV1IREOxNemWNeJipjGcaK+tKjv7NVrYURI4WV1jc+pZFBAZzVJwgRiV2PvCBD+A4Dvfeey/33nvvoLcTQvDCC+UXu2rGjj/v6OQH//g1kcPqWb25DUPCX9dXDnu/OWI+r2w7hT27T8B1hr+9RjPVsUT5EZd9wUOJqOqAIOHIouf0W4wX5WYA7Yrb+REBppC4Uk0TrwmbGELgSUk86/KLF7sJm4JlVQFe6bbx8MczSDIutKb6ohlZt8+Buc8EUPaNm/CUv8oftykz0MFqRfwaov6CMGQqv5usq9JQrqduHMx512xqTeVdmvMps8H2t3wxUPENBms9rwqaLKmEvQmHhCNpSbpUBo2SgmV5bWjA7Kq1cyNcsbaOmpA5abUyU4Xx8tnxpOTnL3YXCZ3qoMEVa+ryBpeTyajEzqGHHjrW69CMEU2ZJm5tu41fNN+BfEMPF71hCbXt8znhH908d1jpMxiB4Piq4zm34VyM5OEc//cdE9CMqdFMDCWaisYcgz5PmrgjWRoz2Bbvq4ZT9ThqY60ICCqDBodVBfj/jq7nq0+0sa3HLnIMBggZgvZuG6SkNaWKca1+m7PMPbYQIu9fUwr/Ks+Da55s57ubOjm0LsRVRzewbnGsyF+rI626mvIdV6jCYE+qWpjmlHJV9lDvbUtunl7YFNiey7VPtvHV4+rzbeGGMdAx2MmNkjhmXnGtzGCt56AEjylUQfTnj67nuPnRkoJlKhQB+/jDTCd7HYWMR2RHSsmvXuphY0ufl0510ODhc/fjsPqJq4cailGJnV/+8pdjvQ7NPuBJj8d7H+fW1lt5uPthVXBc8F3uqAtw9zsGVsBXGFWcXX8m5zScw6LQIgD+2Nk7qHmXRjMdmSivWF/wuBJ2JPryP370PmF7vNadpTJoUB8xufr4uVQHDZoSzgDHYIBeW9WopFzYnXBUV5LIGfRRULPrt1eXoNTFGVfSlnZ5aHeSF+7fxS9PX4TtqsLk+TGLurBJ0pHYrkdT0s0XLDtSvYZUQSrNT90hIOVIhJBsak1hCMGhdWGeaU2XdAwGOLQuXDKdVth63l8kdWY8VtWH+c/Da4cUDZNdBAzFw0yzrhz1pPWxZqwLlKWUbNiZ5J9NqfxlloDfv33xlBE6MEqxo5kapLwUd7bdya2tt46o4DiQOZCe5jfx5cPP5K2Liqvj/UF0/pBBjUYzctzcrKNATiT4KS1PQm/W46rchvenbfGSaZvebPEEbL/N25OqLsIy+s3MGuTkpNTFBn11Q81Jlysebub76+YVRFQMYgEBAQPDEOzodbA9mR+86fSL+Bi5LqhAbrhnV8ajLeVy3YlzufD+XbSl3KKUnl8gW8pUsNB8b3fCoTY3CDTtqs606VJQ3H+Y6b5OWh9LxrpA+Z6t8SKhI4BLD6/hDYumVi1U2WKnvb2d73znO/z1r3+ls7OTefPmccYZZ3DxxRcTHWSCtmb86HK6+OgrH+WV1Ctl3V7IAMHECciO0+juWUbC9phf4nPLD6wDgqL08D+NRlNMrnylCCH6Ulu5xiBlaifh2890sGZuZEDaJul42J6kKe7geX3RIoO+OprCwmG/HscvdE47w/v9GIbAEEqcZD3Y3J7Gk7JkRKUqaLKkArb32hhCtab7zxs0wDT6XrUQAiNXf9SednnvIZX88vRFXPNEK5vbM2RcScgURemzUvjme9c82crmtr77HVYf4qqjBr/fVGGwYaZDDWSdSMYqjVUdMvhXa4b7tyeKLv/xG+fzwZU1+/z4Y01ZYqe9vZ13vetdNDU15S22d+zYwY033shf//pXfvOb3xCLTe0v4Ezj922/H1ToCE8ic7+CpjOXYPdpZDtOJutW5rw7nEG9JQoH1vl29Y5X+gxRo9GQ928pLJmJmuDl6miCplCeN4CZO5LitmoDv+/MxayoCfFUcwrbU6kkV/YN/PT/+JGiwufwr1ORHkFDxGRP3CmKvBgMjND626sQyn3YduHnL3Rz9gGVbO3ODoio9NgeSyotLl9TT1vK4cuPteWmrA/cqNU6BXW5yME+1c/0/9GZJj9Cgw0zheEHsk4EY5XGerolzd393JF/uH5qCh0oU+zceOON7Nmzh3e84x189KMfZcGCBWzdupVvfetb/P3vf+cXv/gFl1xyyXivVVNAj9sz6HXrN3Rz+XdauX/tG7ht+fm8+rqjCAVM0q43bCi41MA6XcOj0QyBVDUKds4hOJrzctmTcDHIOfvK4rRT2BRs6cywqTXDaUtj/G1XIl+0a+aON+Vjg/KFcZUvj1kQ3fG9fQwB86ImtWHVaeTm1E5/cQTqtr5GcSVkXfVYv3qpm5pwnIaIRXXIpDXl5DuZCjueNjan+M4znXRmXLKexBJ9ZoFObpTEnJBBY8QqeM6R1c8MSAHlIl/PtWcmPQVUDkMNM4WhB7JOBGORxvrLjsQAofN/p8zjosOmptCBMsXOww8/zOGHH85///d/5y87+OCD+e53v8ub3/xmHnzwQS12Jph1c9bxq5Zf4ci+vH6VWcU76t7BRRv/SnT33bxv9z2cG3yAw69/jA4rUpa3RKmBdYYQbO2281bsWvdoZjP9jwF//EBNSJ1E/GVHIney0CdYCrc9CXSkXGJBg5akw5+2J6gIGPmTi8IuKAFkXDiw2sob7DmeJOV4fOGYBiwhuP3VHl7uzNKUcKkIGEiUJ8+ckEHWlexJuPk1BHJKx83V/viXz4+ZWIbBrrhNRUBw1VH1LKsKDojEqJOhcFEkysu9/rApCBiCwxtG70g81VNA5TBURxkMPZB1ItiXNJaUkjtejfP714qFzrfeMJdLD68di+WNG2WJnaamJk4++eQBl5umyfHHH88999wz1uvSDMPK2Eq+c+B3uLX1VkxMXl/9et5U8ybCtoD7/yt/u9Bb38zN5ywfUQi5/8C63qyXP3vTQkczVShs955I+h8Db1lWwXnLqzh/RRWWYbBmboT/+NNuOjMDV+cX9boSko5Ha8phS2eG+TGLsClIOrLPMdhV07t9p+VYQI2Q2J1wWNUQyXckXbSqpihN1Jlxue6pdrZ0ZtSwS0PV+PjiSUJ+CjkoIVERUCkXX1Dc8e9e7j9ryZAFxL1Zj4aIyPsC+Y7P+1JAPNVTQOUwXEfZUANZJ4LR+uxIKbn7tTh/2Zksuvx/Tmzk46snbwxEuZQldjKZzKBFyDU1NSQSiZLXacaXoyuP5ujKo4svtOPwhS/AHXfA448jzj57VD8Khbn2+7fFue6pNuK2nJTNRaMpxWR/F33h8sYlUQ6pDeU3+HWLY1x5VB0f+2tz0RqN3O1NQ+C6EoGgK+vlUx5CCNUFhRIV23vtvHeO7UmSTuk0dKk0ke+d05Zy2dqd5WtPtNGaUg7E/mBNcutZWNEXQSlHUPQ/GUrlpnePhSPxVE8BlcNU7ygbTWRHSskvX+oZIHSuP2kunzhy6gsdKFPseN7gPytCiCGv10wwFRVwxRXqz+7dMGfOqB/K/xH1pORrT7QBOo2lmV0MFT2SqAjNNU+2EzQ7ijxUDqgOUR0UyisHVdOjMkiCrCcxc7U9BpRMeVQGDZZWBoqclktNFh903f0E0PLaUL67KW5LkrZ6vHkxi6pg8cZXjqAYL+O+qZ4CKpf+grBU/dNkMdICZSkl92yN86/WTNHl3183j4+umtqpq0K0z85MZuHCMXsoP+ithY5mMikUH+PtBWUCIUu1cw8meAKGKg7OehR5qNRHTCpDJlUh6Mh4ZBwvV9ujfGxqQwYSOGZeZNCUR6HT8hePaRgwWXwkFIqTR5uSfP2JNmpCBtHAQNFQrqAYD+O+qZ4CGglTycm5kJEUKHtS8ustPUVCRwAXHTpnWgkd0GJHUwYdaY+oZRD3vAHdHRrNRBMo8KwZT/VdFRL0ZCWNUZOELUm5asimfwxYudqbdK6eprCA1m8pf7YtzUHVAVKuzNfPREx1u1X1ykF4uJTH1cfPHZNIgC9OVjeGufu1OM+2pYlYxpQSFFM9BTRSpoKTc3/KTWNVBgV/2Jrg8b3p/GWmgF+dvpDzV1SP5xLHhbLFzoYNG9i9e/eAy1966SUArrrqqgHXCSG4+uqr92F5mqlAfcSkMmgQENCS1ilLzfgzWLo0bMGCmEXGhZakM8ASwW/bHg6roL27//OC2hDSjmoZjwUMFlaYJB2PeNajKemoGVVSmfK1JB2qggY1ISNf77KpNTNg064IqE17d8Ip2rQnOuUx1QXFVE4BzQTKSWNJKfnbriQP7elzRg4YcMubF3HWgVXjvcRxQUg5mNF4HwcffPDoHlwIXnzxxVHddzJYv349oITdtENKeOklOPhgBh2UM0o8KTn6N1t5pjUNUo+R0Iw/hWInbEBdxKQp4VIXNkg5HilHXV+Y0jKEKrbdFXeKinBLPXbAGOgOrjxuRM6pWI0+kMDSSovasDov7Ml6bO3JIuhzMfYxBcyNmnhS8LM3LeC0/Sp4cGeibAfhiR4aWTy7SQmKqTC7yWcqDtGc7qxfv5647fG+b9825O3uerWXBwqKkU0Bt75l+godKDOyc80114z3OjT7ysaNcNRRsGIFnH02XHYZLFgw9s8jcrUSOp2lGUf8r5cllKu3RImZ1kEii27utnPCJi0pl5QjCQC1ERPbUwMkC7+ypR7FyAkdIDcHStXNJB1JjZSkXEna8fC80vd3JexJuMwJiuJ6lwFzJEq/5olOeUzVmhKfqZgCmgkMl8Z6vDlVJHQMATefsXBaCx0oU+ycddZZ470Ozb5yxx3q7y1b4Jpr4KKLxuyhn25J05pyWFRh0ZHxSPY/pdVoRom/rfbXzv4QTcMQNCWdskaW2B40xZ0iY73aiInnqZEHboHJn1PiKyylRAo12sH21Bo+uHIOt73Sy+b2TH4QZ+Fdfe8a6Ls8bksOqw8O7gTcNnWcgCdCUOgIzdRiKJ+dHb02393Umf+3AH5x2kLOXT79anT6owuUZwq+2AFYvRr222+fH9L/kbp/W5yELVlSaVEfsWhKOOxJOMM/gEYzDP3dhfOXS8hINedNiNIznko91pVH1XHiwliRsV7Gkfm0mAGYhnr8wpodQ/gDNiUiN4fqsPowb92/kltfyY1mGaSQqP9FHvDbLT386qWeae0EPBYUp8rUnLCplCqbjQwW2Uk7Hr96qacoan/18Y285+DpL3RAi52Zwx13wJ13qr/HIBJXWGuQsD0SjrKoX1QRIGoJ7bejGRWF3xvfe8YffAkwJyhwPEk8p6UlEDUFQRO6MnLAY/l/e7nb7kk4+UiFb6zXknT41EN7ebnTxgNK2YIFDVhSGSDtShK2pCZscO0JjVz3VDuuhJW1QVK5ouiOAmfkwnlXhlCvyfHg8b3T3wl4XxkQ2QqryFZhi74WPBPPYAXK922LF53EvvOgSj67dnoYBpaDFjszhde9Tv35/OdL/5qPgAd3Jrjw/l20pVy1ieRqFJKO5LXuLAsqrKJhhRrNcPjbfUXAYF7MpD3l0p31cHLfLQEsiJnMiwVIZF3+3W0jcoMsTSFQ/nIDv239YyIJe+BtXu3O0pwcOhKZ9aA9rYz2jmxUXT/VQSMvWAzDIGZAVcjIix1fuBUWNju5SFQsIKa9E/C+MBNmXM1USvnsbO3O8lRzX4v54kqLG9cvGCDUpzNa7MxEDGPUd/Wk5IqHm2lOugiUL4gw1bBD21N/7004ymNkZv5Oa8YYQd8E7jkhgx+sX8BJCyP8dksPjzYlueXlHhrCBrGg+jlycrktS4AUgozrUVHC/M6nUN4cM095wxSmT3qzHp25qFBA9KWxRE6t+HOjPrG6hjP2q8zXlPxpW3yAYKkNmewUTr8UmBI6MtfBVRMyOOfASm55uWfaOwGPlpkw42qm0j+N5XiSW17pLTqOfnzqAmrCM+u7qcWOpoiNzSk2tyuFHzDI/1AFcj/mjhzYsqtTWprBMEVfmmlOyOCnb+pLXbz3kDk0RCzu+HcvkQIxYxl9aVI/uuOPVugfsyz0FawMGLz74OoB6RMB+aGcjgRDqvlUQK67UOJK2K8qWLTxlhpdIIRgftRiV0G43z8u7Jxp4OeOrueoedEZ4wQ8GmbCjKuZSv801kO7k+yK932f33twNW9aWjEZSxtXRh8C0MxIHt+bzv9oF/5AF9ZV+PjbkxY6mlIsiAgWV1pUBA0WxixuecsiTl1S/CNaKCiklCRsD9v1CBhCpbg8qeZHWQYLYsXnZoVCxxTwxWOVEV5h+iRiGQRMUdT1ZXtKcPi4uVRZXb8oiz+6oD3tFt1+bsxiYczMP6bjqceoCRlcc3wjl6+pzxv3VQYNdiccOtIOXRmXjrRTZCoI6gTjT9vibGxO4Q1vezYtKPxcSzHTI1tTGT+N1RAx8aTk4d19beYVAYNvnjR3Elc3fkz7yM7555/P008/PeDygw8+mN///veTsKIJ5le/gmOPhQMPHKMHlH1/FZyU2Z4sEjUBAwKGQEpJxp38CdSaqYUlwMXAk3BUbiRCYTGq3+nXknKYH7PY0pHJjV5Q3zN/LIMrVZ1H2BQQMqjICpJ233dRCJgTNPjc0fVcvqaejc2pAemTgCGKasy83B8hwZESQ6ioU2Ok+OdwKKdhR8L+1RbvOqiaioDB0qoA56+owipIIa9bHOOjh9Vw9RNt7Ei5+dRZddDg4sNqADj9zh0zslNpJs24mmkUprF+/HyXShvn+O4p82iITntZUJJp/6pefvllTj75ZN785jcXXT5nH6Z9Txuam+F971M7w6GHwn//N/R7H0bKMfMiBA2B7cl85MaTuRoHis+kQUV/TEPua020Zobx9v0ruOiwWuojJoc3hNjUmuFP2+LUR8yitvCsK0k7ku5srqbGyNX3oMSJQE0Fb0q4BE04bn6UT6+ppSXpsr3HHiAySqVPopZBJGCQtNVsNz+6YwlJ2BQEDMHhDaU33n0ZXfDgzgQ/eK4Ty4AllRaGEHi56NU3/9WOQOBIOSM7lab6SIrZjO+zs6UzwzMFAz7XL45x4SEzo828FNNa7OzevZtEIsHJJ5/MO97xjslezsRz991KhQBs3gyRfS/0WzM3wsq6EM+0psm4UkVvGJiqcjwwhMQ0hM6FavL4W9ffdiW55S2LeGh3ijfftTMvbDwJvbYy/JsfswiG4JUuG8hFXWRfd1bUVJGQRRUW/31CI3OjgSJDOj86tGFHMm9WV6rOBmB+1GJ7r42Tm+I5P2YRMFSH4XAb72ichgu7kRZVBIoiG3OCHs93ZPGApRW+O7SYcZ1KesbV1MQQqtvqR5u7ii771hvmzqjuq/5Ma7Hz8ssvA3DAAQdM8komiX/+s+//6+rgxBP3+SENIbjuxLm87/7dtKYcHE+WnHTu+ArIk1hi+hYpB3PHdnY6Ln4CMHKf7WDjQQprYSwDgobyyenOevx/j7Ry2797inxWtnRmSTsSz5PYnsSTgqwnCeU6/iwhiAUECVtiSxUxfLEjy1ceb+Pq4+fmN//BzOquWFtXMn1SGTRYUqEEjxBguxJDiLI33pE6DQ/VjdSe9vJzt7b2OhgCIqbB/JhFZdCYUZ1KU30kxWzE8eDOf8fZ1NYX1fnQyjkcWj+zU4rTWuy88sorAByYq1dJJBLEYrPobOGmm+ATn1BmgqYJ1th8nOsWx/jF6Qu55slWNrepAYY9WW/QDc+RqtJ9OukFA5VaqItYJGyPf3dl869DZ+QUAQOWVgZwJeyK2/muqqgp6Mn52RR+5o6nIhqWUAHH217podfu81lJOh6OJwkaSjztTbjMjZp9ER0P0kjSuS+agRJQnoQtndl8egcY1Kzukgeb+OhhNWztyQ5In/TYHkuqAly+uo5l1cFx3XgH60bqzXrsTjj5980fQRH31IDRZVVBYoGZ1amkZ1xNLQwBfy8oSo4FBF85rnESVzQxTGuxs2XLFkKhEDfccAP33HMP8XicxsZGPvKRj/C+971vspc3/ggBRxyh/owxhWdkzUmbd927i6F82QoFgu+pMlXFjyEgFjCoyxWkOrniaxNlUSTk1F7/RCGBgCmotgxaUw4JW1IRENSEDHrsgRuxQL1v2VytTWfGZW60z1DONxAMGAIhJWnXw/EMkAMja76wyuZmVFUEDDrTHlc/0YIQYkizuj9tT/D9dfPzdUGTkT4ZLJ22M24XnTT07xLbFVd1SLpTSTNeuBK29tj5f394ZQ3zYtNaCpTFtH6Fr7zyCplMhubmZq6++mpSqRS33norX//61+nq6uL//b//N9lLnNb4Z2S/ejFDxlUdNv0HIZbCneKRHgNVw+Fj5eYihS3BwooAe5MOKdsr6lLwma7puuEwUMLGyxnjgYrOZF3VvxQwBJYhsQxBuIRJnqD4vfFHJ4TMvttaRu57UVDsboqB72f/x3KlGvApBDy8O0UsoFI+Q5nV1YRM7j9ryaSlT0p1IyVsl3SJL1Wh4Ek6kpaEw5FzI7pTSTMu9B/kfNkRtZO0kollWoud8847D9d1i6I4b3/727ngggu48cYbueCCC2hoaJjEFc4MtvfYSAkBs28TSg8TYZ9qqSBffAlU/YZpqJRL2pV0ZFzCpiBkCioDgqo5QRK2x45eW9WXlPH4JsMPqpxKFIoJ//+llAXjD1SkoSujRiisnRvhtKUx/rQ9wXNt6QGP17+IPWIp8eFHNpKOh50reM/k6rxATQjvv/2XKoi3TJUby3rQnfWoC0siJX69Cs3qJjN9UqobabDXOuC+htCdSppxI1sQWjx+QYQD5wQncTUTx7RupHnPe94zIF1lGAbnnXcetm3z1FNPTdLKZhZLqwJ5J1shBJ6cfj/CQVN19Vx7QiNr50ZI2B5NCZeE7XF4Q4SvHNdAXcRkd8Ih6XhELEFV0Chqte8frQoZaoAkTD1xNxyFB74vLlwJIUOwtDJAVdBg7dwwvzx9AXe8dTH3n7WEy9fUc/9ZS/j80Q3UhAzqwwZmv6+CKdSMq5hlsiBm0ZRw2NKZ4dWuLNt6bTKuxPGUWHY8aE65JQvgSyFEzvJAUjSwsJCpZFbndyOtqg+TsD26C2ZqhUxByOj7HArfgvOWV+lOJc24UZhGPeuAqslbyAQzrSM7g1FXpya1JpPJYW45Tfnv/4ZgUE0332+/cX+681dU8fG/7aUz42GKgWen04ED5wS54eT5rFsc4/I1dSXTG6sbI1z7ZBubWtN0ZTzcnOGcm6vhEajUTMAQ1OccSJOOR3PSpSFs8HL30MMmJ4JyC6wlEDGVn5KfWZESMq5kR69NQ8Ti6uPnDth0DSE4bn6EyqBBRcBgcYUaxZBxJSFT1fOkPUjYHicujPJceyeOp6JFlqBkatBHiQDIFphU5rVUbiRD2BR4QNqRJGyXWMGYialoVldY+/bPpiSfeagZN1eHhBAYos9E0c69T++bwV4nmqnFqUtmj6ietpGdPXv28Ja3vIUbbrhhwHWvvfYaAIsXL57oZY0/tg3XXQef+hQsW6a6scYZy1AOtZahzshLOdqbDJxAPVWoChpsfPey/MbtpzdO26+CNXMj+XTBusUxrlhbR9AURAOCJZUWh9UFiZh99SXzYxaH1AZpzNX8dGY81s6N8IszFlETMrBy0YegMTlnEkFTUKKkpgiBqs+pDRv5z0yQmx+bu2AoSVs4RkEIQV3EYkFFgLqIqqPpSLssnxPk+Y4MFQGDioDyanLkwBb2gCiuWZFSDeqk4DLIjXQwBPMrLBbELISA5qRL0vHwpCTpeEVjGKZSCsj/vl12eC2H1YdBKFHpSXLTSAVOzl350Pqw7lzSTAgRS7CyLjTZy5gwpq3YmT9/Pt3d3dx66610d3fnL+/u7uZnP/sZCxcu5Mgjj5zEFY4TDz0EHR19/161akKe9vI19VxzfCM1IWPANhgQqvi08HIDBqQ4JosLVlQRNIdPa3hSct1T7dieZP+qALVhC9MwWFwZJGiozbo97ZbcXLvSHiFTsF9VgGhAHVbjkdoa7C31dYqTq/4d6sCOWIJFMZPOjCrCDghYXGGxX2WAA6uDrKwN4kq49sm2krOa+s99KiU4zjmoipc7s8yPWRw0J8gB1UHmRcyi74hACZig0fe6Mrmp4YWYAiKWwZJKi6qgScAU1IUNltcEi9KRq+rD/GAKOw/7HlbzohamUF2AWVfieBJTwLyoxXUnzp1SQk0zczmyMYxlzJ7v2rRNYwkh+OIXv8hll13GueeeywUXXEA2m+WWW26hvb2dH/3oR1hj5DszpejshEWLYNcudSr+9rdP2FNfvqaej6+u5bdbevj1S138ZXsSF3VG2n8TW1ChhjC+1p0dcDZfblfXvqI2ScFr3TaelMNuIoMZwVUGDfarCrIrrmpOdsZdYoFiQ7qNzSmCpiBoCpbPCZJ0PPbGbTrH0K3QAlbWBTCEoDPj0ZP16Mp4BAQYuZTU/KhF2DKUwZ+QbOt1eccBFRxYHcQQ8IetcfbEbbqyMl88vKgiQGWwWGDUhhnS2G44d1zblXmfGZEzCowXdIHki6LJCR5U8bEEUq6qh3IlNEZMqkImUUs9jp+qOrwhwn1nLmZTa2ZamdWV8rAKmYJD60NcdVTDlBVqmpnHEQ1TI9U7UUxrNfDGN76R73//+9x4441885vfxLIsVq9ezTe/+U0OP/zwyV7e+PDOd8I558BTT8HTT0N9/YQ+vWUYvPeQObz3kDl8Y2MbVz/RRnfWyxeZClSB6txcmmf/6iBbu5VhX9BQRcJpV9KU2LfeJQF5czrfDFAIaIxauXlKUBsySbmybDfawYzgQAmeFTVBdvQ6fHJ1LafvV1G0ufZvNY5aBmHLUAUoY0TIAlsKIqZBXcQgbHn02lklNnPvQUXQIGop4ZJ0PKpDBv/viLr8a7/q6Aaebklz/7Y41z/dkZ/Z1J/CrqbBGMod1xd//X1mCvFbzEEJnoCU2BIuPLiKw+rD/O/GNuK2zIvplOMVzVWyDGNapny0q7BmKrCsanZ0YflMa7EDsG7dOtatWzfZy5hYhICjjlJ/JpHCSM/2Hpu47eVdc5OOmn9kGUoopF1JZUCQdJRAyWV6yI4ivOMLHdMQ2K4kV+tJNGCwoJ85VtikbDfawYzgfNKuJBYQnJ6r9Smk9ODDkb+2odivKkBb2s37tkQtQdg0SDkeEkk00Cd0BivWLWzHvnFz55CvtZyupsHau0v5zFRYoiiiYwj1x8dFdSn9x+vmcNS8KMtrQjN2rpJ2FdZMNkurApO9hAll2osdzeTiR3p83ri0YsAGtXZuhCvW1lETMmlLubSmHD73z2YEsDPultXd5bd9+145ElXkaaA2SUMUGwX6jKQVudQG7VNOp0//1E7CLs+E0AKG6+OqDAi++YZ5XPrXvUVjEGrCBsm4Uoy1IaPPO2iYydL7+lqHo6T4swRBEzI53embOapOJPUurawL5UWAjoBoNOPH4orZtf3PrlerGXfK2aA8KfnFi90825ZmQcxkT2JwwWMIWBCziJiC7b22ul2uq8cUguqgwM2NdqgIFG+CI920S0dnRFniodTrb0k6fPnxVp5vz5C0S5sTGkBlUCCFoCtTOsxlCvjisQ28aWklP1xvDBCTfu69NeXQlHDLioCMxWsdjgF1PS5UBw26sxI3N2DWzUXmTAENkYEFujoCotGMD7VjHXqe4mixM12Qud7UacBwG1ThRtub9VhcadGWckm7fRPWDaAmbLC4MkAmtwH7QxyXVgVoT7vURUwaIxadGZdLHmwak017uMLbctInha8/ZBn512kJgSslbi6SURkwuPKoOg6oDlEfMXlwZ5xrnmijOyvzEazqoODzxzRw+Zr6/PpKiUlgxBGQsXitw1FqvZ0Zl/9+qk0X6Go0k0jNLBM7QspSrimzk/Xr1wOwYcOGSV5JCb7+ddiwAc4+G848U3VkTXMe3JnIb7QZRxWizo9ZnLQwyvMdGV7uzJJ11Qa8oiY05AZc+Fjl3mcoPCnHLH0ykrU5npevgVpaFeD8FVVYxvg6RIzla53Kz6nRzHbWr1/Pa9022977AzIfO4TgVPEHmQC02ClgSoudI46ATZvU/69cCZs3T+pyxorBNr3RbIZTeQOdymvTaDSzg0Kx4338kAHDdGcyOo01HXj11T6hA2pMxAxhsJTXaGo1pnJ9x1Rem0ajmV2oDtbZI3RgGjsozyoMAy65BObNU/+eQWJHo9FoNBPLLDJOzqPFznRg2TL43vdg92547DFYvXqyV6TRaDSaacpsFDs6jTWdMAw45pjJXoVGo9FopjGzsV5QR3Y0Go1Go5lFzMbIjhY7Go1Go9HMIrTY0Uwtkkno6prsVWg0Go1mBqHTWJqpxW23QUMDnHYa/PCHkEpN9oo0Go1GM82ZjRv/bHzN04c77gDHgT//Ga64AszZZe+t0Wg0mrFHp7E0U4dEAv70p75/v+1tEAxO3no0Go1GMyPQaSzN1CEYVJGdD38Y6uu1kaBGo9FoxoTZGNnRPjtTlUAAzjhD/fnBD9TUc41Go9Fo9pFZGNjRYmdaoGt1NBqNRqMZNTqNpdFoNBrNLMKbhYkCLXY0Go1Go5lFzMaqCC12phquC7feCr29k70SjUaj0cxAZqHW0WJnyvHII3DuucpM8K1vhZdemuwVaTQajWYG4c3C0I4WO1ONO+9Uf2cycO+9UFU1uevRaDQazYxiFmodLXamHH/+c9//v/71sGDB5K1Fo9FoNDMOb7IXMAno1vOpxpNPKsFz551w3HGTvRqNRqPRzDBmY2RHi52pRiQC73iH+qPRaDQazRija3Y0Go1Go9HMaGaf1NFiR6PRaDSaWcUsDOxosaPRaDQazWxCFyhrJo8vfhGOOAJOOw2i0clezT7hScnTLWnaUi71EZPVjWGM2Th5TqOZ4uhjdXYiZ2FoR4udqcDOnfCVr6j/j0Tg+9+H979/ctc0Sh7cmeDaJ9vY0pkh60qCpmBFTYgrj6pn3eLYZC9vROiNQDOTmUnHqmZkzMbZWFrsTAXuuqvv/1MpWLFi0payLzy4M8HFG/bQm/WoC5uEwoKMK3m2Lc3FG/bww/ULptSP6FBiRm8Es5PZInCn27GqGVtmodbRYmdK0NYG4TCk08pE8OijJ3tFI8aTkmufbKM367EwZiFyG0TEEtSEJHsTDh//WxP/fUIjc6OBQTeRUpsNMOYb0FBiBtAbwSxktgjcoY7VhTHB7oTDtU+2cfKi6IwUehod2dFMFl/+MnzmM3D//ZBIgDH96safbkmzpTNDXdjM/3j2Zj2akg4p28OR0NWe5cw/7KImZHJ4Q3jAJlJqs2mIqK9oa8oZsw1oqLPaix7YzZyQpTeCWcZsinSUOlZ9hBDUhk22dGZ4uiXNmrmRSVqlRjO2TL9ddaZSUQHvfOe0rdVpS7lkXUnI7BM623ttEraHW3AW4XrQmXF5qjnFxRv28ODOBNC32TzblsYUEAsYZF2PZ1rTPNOaJutKYgEDU5DfgPz7joT+Z7URy8AQgohlsDBm0ZnxeL69vI1AMzMY7jvRm/W49sm2GWPE1v9Y7U/YFGRddTvNzGW2FSlrsaMZE+ojJkFTnQ0DNCUdHE+C7MsPCyBoCiRgezK/iTie+rs95ZKwPXbHHbb12DQnlVByJTQnXbb32OyOOyRsj/aUy+f+2cwft/aysTlV9kY03FltzDLIehJ3kMfTG8HMYySRjplA/2O1P2lXEjTV7TQzl9mWytJiRzMmrG4Ms6ImRHvaJWG7ZBwPUxQXwgkBhgBLCLKuJGoJtnRm+O2WHja1ponbHmlXYgiBZRTfVwKmITCEIOVIOjMeTzanufBPuzn7np2cfueOsiI9w53VRi11ecrRG8FsYbZFOgqP1f5n91JKOtIuK2pC+Xo5zcxklmkdLXY0Y4MhBFceVU9l0KA56eLmIjqFUZ2AoTYTIZSplQAStuQvO+J0pF1cD4KGwBAMeiRK+s5IPAlzQiYVAaPs1NZwZ7VCQMBQ69IbwexgtkU6Co/V3QmHpOPhSUnS8didcKgKGlx5VL2uSZvh6MiOZuL4z/+ED34Q7rlHdWJNc9YtjvHD9QtYXhMEwMvZdPrpK//EWeZU0J6EQ2fG5Xcv9+DkxJGbOwJLHYdSSmxPFl3nSllUWzFcamu4s9rOjMehdWFqQqPfCDwp2dic4k/b4iNKsWkmh9kY6fCP1VX1YRK2R1NCpZBX1Yf5wQwqxtZofIScbVVKQ7B+/XoANmzYMP5Plk5DQwPE4+rfF1wAN988/s87ATiexwm/28ZLHRlsD7KuJGCQr4fIuLKoaLl/ICeQS3/1zyQFDHC84tseWB2gOmTSm/XYFbfJuJI5IQMQzAkZvOugKr76+gasgg63ws6b2rBJ2BSkXbWpVQUNfrB+AUBBZxgETYbsAvNb5h/YkeDOV3vYE3ewvZnbvjxdGcxHp5zvxEz8/GaLr5BGsX79el7rttn23h+Q+dghBAdJ3c5EdOv5ZPHAA31CB+Ctb528tYwxlmFw9fFzuXjDHtpz9RBZDwQSKaGw8iFgqLB6YQrBHkR+u15xWswUEDBFvvPL8dTjd6Q9JNCedrn2qXa+u6mDLx7bwOVrlIeOf1bri5nOtBIzq+qL2+FPXhQtayPwW+Y3taZoT3tICWFLsCBmETTFjGxfno4M56NTzndipmEIodvLNbMCLXYmi6oqOOMMJXoA3vKWyV3PGLNucYyPHlbD1U+04cm+wXOFUiFkqKJj//LhQoyFw+sEEAkYRCyDV7qyuFIi6BNShY/Xa0uu/EcLQJHgGU7MlLMR+BGBnoxLwlZrsAzIepKdcYellQEWxqwh/XlGcnatz8RHR7k+OuUKXI1GM73QYmeyOOkk9ae7GzZuhOrqyV7RmPLgzgQ/eK4Ty4ClVRYC8mmBtKu+eL7QGU0m1QOqgwYpxyPteAhZHBESFAseR8LVT7Tx8dW1+ZTWSM9q+wuNwxtCeX+W2pBJZ8bGykWqTJTgaUo6LJ8THNSobSSuvbPF4XesGaljcLnfCS08NZrpgxY7k011NaxbN9mrGFMKN5dFFYEi7xJDCHbFnaJUVmHXVjn4j6Y6uCS2N/A2suB2ErAEdGc9frulh/ceMmcEz6YoJTTmxyy2dmepj1hkXVn0nKBa7DOOR9LxCJuCznRx+/JIXHtnk8PvWDMejsFaeGqmO+okc/aIc92NpRlzhtpcYjkfm6LOqzKVTsBQdTrzYyYRSxWQNidLe5/0b3s3hHqe7T32iF9PobtzRcBgfsyiImDwcmeW9rRH1pVYhhiQivNb7B1vYPvySFx7Z5vD71gz1j46g30f9sXZW6PRjC9a7GjGnKE2l1jAwLcrcTxwPIlTIjJTaluSUomd6pDJ8jkBDCBsQdQa5Pb0RXikVOJjaVVgRK9lKKExN2oiJTQlHCImhE1DdYvJPhFnAKYY2L48kmjDbHP4HWvG0kdHC0+NZnqixc5EE4+DOzOcWAdjqM1FCEFD1MJAFRNnveLurKHwJIQsg6hl0J1VHVdzoxYLKwIEB/km+wXDjlQ1PuevqBrRaxkyShUwCVuClCtJOZJ5MRPTENie2hRtT0V8OjPeAH+ekUQbZpvD71gzlj46WnhqNNMTLXYmmq99DRYuhIsvhj/9abJXMy4Mt7n0Zj0sQ/npmKL0l7DUebFpwPyohZSSrowaR1EdNKgKmiypChAq8UACsD0leD53dH2R3045DCc0FsRU8fXelItlCBZXqHbzbC5aVREwShq1jSTaMNscfseasXQM1sJTo5meaLEzkUgJd9wBzc1w443w+c9P9orGhaE2F9/4LxYwOLQuyEFzguxfHSBqiXwqyu+kKnpMYEllANOA3QmHioDBnJCRFxVVQZOVdSEawkbxl1pATcjgmuMb823nI2E4oREwBXVhkxU1QRK2R9yW1IUNjpob5uuvb+S+M5dw/1lLBhStjiTaMBsdfseasXIM1sJTM1OYbYlW3Y01kbzwArzySt+/zzpr8tYyzgxm0rasOsjWbpv6iIlhGMRyysQQgu29NrYrEQLmRQ08BN0ZNWerKmjmz5brwianLY3y110pmhMOS6tUx5cQgiVVQRbGXF7rdWiIWPzXMfW8++DqEUd0fHyh8WxbmoUxUZS68IXG4Q1h7jtzMZtaM2W3IfuC8OINe9idcEq69hZGG0ZyW01pxsJHp5zvw6r6sBaeminPbBM7elxEAeM+LqKjA265RUV3/vpXeO45OOSQ8XmuKUJ/L5KWlMMH/7yH+TFrwCbTm/XYk7BJOpLqoEFl0GBFTYhlVRa/3dJDry0HHKC+k/LCCovasDkuFv/jOUqguIV56LEUI7mtZvyYraMlNNOfwnERiUsPJhqYPckdLXYKmNDZWJ2dUFMz/s8zRfBFz6NNKb7+RCu1YZOINfBAS9gurSmX85ZXc9z8CLvjNl94pHXAnKz+GEB1UGAYgpqQyTtzM7EMIcbE+G08hYZ2UJ5+aOGpmY4Uip3e/zyYisE6O2YgWuwUMKFiZxZRuDFkHI+urJoftbQyQFWor7ahJ+OyvVf54MQCBkFT0JZ0y+7WMiBvmywERC3BvJhFxpUjNn4rJSoALTQ0ebTw1Ew3CsVO9yUrin5/Zzq6ZkczrvR3/q0Lm4TTLrviDq/12CyqkNSGTdrTLrt6HTzABHqyHp4cWV7Zv2/AVB4+vbakt8tmbsRkQYVVtuOwdsfVlIMeoqmZznizLMwxe2JYmglnMAO2+ojF/lUBTAHNSZc9cZumhBI6BqrDKThIa+/wz6mCO4UHclvaRZRp/KbdcTUazWxglmkdLXYmhI4OePxx8EpYBc9gCg3YABK2R3dGtfxWBg32rw4wJ2Rw4SFzVKExELZEfrTDaA5GCbiyzzlZ5P7dmVbJsKGM37Q7rkajmS3Mtt8xLXYmgltvhWOPhSVL4LLL1KTzWYBvwJZ1Ja902bzanWVbr/r7lS47NyZCkHQkjlTGfz77chiWGixa6IsymPGbdsfVaDSzBZ3G0ow9d96p/t69G373O6iomNz1TBD1ERNPSrb32qQc5XjsuyanHI/tvTae9IgFcsKiQF+UMhYsB0Hp+xY63g5m/DYW7rielGxsTvGnbXE2Nqdm3dmTRqOZHsy2XyZdoDzexOPw4IN9/37728GcHRXwhzeEcsM+IWySj5YIIGBI0q667qwDKvj2Mx04HhiGRAiVyhKi/InoPrLE/6thnCqNFjEZ1Pit0B03Yg0UPMO54/YvbA4YsKAiwFkHVHHqklhZ3TqO5/HbLT1s77FZWhXg/BVVozZE1Ch015RGM5DZFtnRYme8qahQrsl33aUiPO9852SvaMLY1JrBMgSWAbZUXzZfwPhpK3W9waF1YZ5pTZN1wTTUUWigOqwAQgY0Rk32JJSjMigBYxkC15NFPjzZ/qVRArb12JCbw9UQMUs6Du+LO27/rrOsIWlKOOxOpHmqOc03/2VyeEN4yI6ub2xs4+on2tSQ01z7/Mf/tpfPHV0/qlEXGt1Zp9EMxmyLOutTxolg6VL4JOCXkgAAL7ZJREFU+Mfhb3+D00+f7NVMGG0pF0MoP52IZeQngXtSErEMllYGMISgI+1x3YlzmRMy8FBiJeuRFzABAdUhk0TOQdkSEDBUhMjxBroq90f4xc75G5Y+qx/twMj+hc22J9kZd8i4Mj+NPW57Q3Z0fWNjG1f9s4XO3IDToKnEXGfG46p/tvCNjW1lveeaPnRnnUYzOLMtsqPFjmbc8NNCQVOwfE6QA+YEWVal/l4+J5hrMe9LC4VNg4DRNwndFBA0oDFqccGKKsKmwMtFheycGHJzfwbDQHV4LasKcFBNkEPrQjg5cVLqzGY0AyP7d53tTbi4nkpjGUIQMASOJ6kJGQM6ujwpebwpwZcfa82n+yxDYAiBZQjCOc+gq59ow5ll3Xz7gu6s02iGZrZ986d9GmvPnj38z//8D48++ii2bXPsscdy5ZVXsnjx4sle2qynf1ooWtBulbBdmpMuy2uCHFYf5K2/34UjJYfWhUi5EsdTaa6IKdjaY/OD57qwh1I1BZiQd12WqE6sgNn3/IVdVaVM4UY6MDJf2BxWnWVp18MyCmqUhDqLcmVxR1d3bsP9V0uKXlu9toxHXvCp+woChqQ7q2p53nvInLLeg9nOSDrrtDGgZjYy24T+tBY7XV1dvO997yMej/P+97+fYDDIT3/6U97znvdw1113UVtbO9lLnNWUmuxtu5I9CYe0o6abb+3OctKt29nanaU+or6OUqoaGSkFUkoyrvojKK7jGYzCXinfd8cuiNmGTUFneuiuqpG44xYWNvtptcLtVUq1bsvoe+4HdiT48fOd9Ga9ovCqJ8nXlviCxxAqurO9xy5rPZpiAVqKcr4DGs1MRqexphE/+9nP2LVrFz/+8Y+55JJL+NCHPsRNN91EW1sbP/rRjyZ3cbYNX/oS/OtfI28pmkEUpoXaUy5be2zSuW6nZVUB6iMWL3dmaU97dGXcAX48W7ps0rniHVOojX+kSMAtUEjDdVWNFD+C1Z52sUR+PFceR0pClkHUMkjnurTufLUnn2KJFUweNnL3LRRnXq5YeWlVYEzWOxsoFKClGOvvgEYz3Zhtu9K0Fjv33HMPRxxxBIceemj+suXLl3Psscdyzz33TOLKUMXIX/4yrFkDy5bBk09O7nomkXWLY9x35mKWVQeoDBosrw6woiZIdUhNPp8bNfEkNCXcAX48aUfmIzmOZNjp54PhR0n8rqoVNaGSXVWjobCwuSPj5mp0wPUkWU9iCsH8qJV/7gUVFnvidj7FUhMy8uvzyIklqUSOlBLbg+qgwfkrqsZkvbOBQgHaf9bxeHwHNJrpho7sTBO6u7vZuXNnkdDxWblyJS0tLbS0tEzCynL4RoIAu3bB/vtP3lqmAJtaMzQlHBbELGLB4jqKqGXkoyEqeqPaviVi2JRVudje8F1V+4IfwTq8IUJFQOSiMxA0BIsrLEyD/HOfdUAVttdndGgYBvOifREG3wHa8ZQXkWXA546u1347I2C0nXUazWxhttXsTNtfz+bmZgDmzp074LrGxkYAmpqaJnRNRWzd2vf/J58MdXWTtpSJppSL8FDuxElH5tNTjh/RQNWujJb+Lso9WY+E7XFYXYhPHVmH7coxcTgufK3VQYP7zlzMfWcu5euvb+SoeWHqwiZxWxZ1dJ26JDYgxTIvFmBhzKTw7fGAmpDBNcc3ap+dUTCazjqNZrYw2yI707ZAOZFQHhmRyMAi0nBYhaaTyeSErqmIP/4RXntNRXhmUVTnwZ0Jrnmilc3tGTI5cXNoXYhzDqwa1J3YL+o1gIAhcKXEdUefU/Y9eNzcBPTKoMFXjmvAEoLbX+3hmifbxsRgbijDus8eVc9n1taV7OjypCxpXjgvFqAhbPBar0NDxOK/jqnn3QdX64jOPjDSzjqNZrYwy7TO9BU7fh6+f1tpIUNdNyHsvz9cfvnkrmGcKbTi39qT5SuPtdCe9lT6SUKvgId2J3mhI0NV0GBPwmFexCQaMBBC0Jv12J2w8145jiexDAhYqo0b+gp++xf+9keg0mD+bSOW8rhZOzfCwbUhLnmwid6sR9QSxALK5NA3mPvhCM/0+zsmh8JKyPV/vFIdXaW61MKmIO1KOtIec6OWjjyMISPprNNoZguzLY01bcVONBoFIJVKDbgunVZTqStmycDNyaJ/ZKM97WJ7KkITNHOjIVC1K3sSyldHSpVSCpuCqgC0pmRRq7grwXGhUNb44sXy/WoKbt8YMQBBW8pFCKiPGMQCZq4+Q1IVNLhibR3XPdVOe8rF9iSdaVX0bKBMC+NZj4se2FMUSRlqnlJ/wzpfVEcswcKYYHfC4don2zh5UXTQCIKfYvHfv860es9W1RePlJiKc52m4po0Gs3I0GmsacLChQsBaG1tHXCdX5hcqp5HMzb0j2w4pmRvUskQSc5bxhA5Mz11VLkSFsZMOjMeSUeSdAY+7mDHn0TN1+pPyDRojFpUBw2299p0ZjykFIQskRcO1UGDTa1p4raXGzehPGxsVxJ31KO/2m3zgT838cm/N/Ou5VW81m0POk9prAzrhkuxDDfXaTJEh541pdHMDLTYmSZUVlayZMkSnn/++QHXPf/888ybN4+GhoZJWNnMpzCysSBqknLVJHEfP5pjCNU2XYhAFd0mnbExc2tJuYQtQVXI5ABT0Jl2+fzRDRw3P5Lf/P+4rZeujIcn+zqg7H7DQ0F5+HRmPH74XBcVAcGSykDJ9JTtylEZ1g0mTkoJouHSZB89rIY/bU9MqOgoN3Wn0WimPrMsizV9u7EATj/9dDZu3FgkeF5++WUee+wx3vrWt07iymY2fmQjbAr+3e3waneWjkyxqvEFT/+zh+aES1Ni7FxrXU+yN6G8VMKm6sE6aE6QNXMj+ShHe8rFlbKo06m/CINiw8KUox6v1Dyl2rAxYsO6B3cmOP3OHZx9z07+48+7OfuenZx+546SwyiHm+vUnnL5/x5tndABl3rWlEYzs/BmWYnytBY7H/rQh6ivr+dDH/oQP/rRj/jJT37CBz/4QebOncuHPvShyV7ejKUt5dKb9dibcIpMAAuRlDYAdBh+3MNISbtebiZVaVfcurBq6XalKoC2B4nfFl7sSujI9ImywvQUMCLDupFO3x4qTQZq1lfGUYNFJ0p0jCR1p9Fopj6zLY01rcXOnDlzuPnmmznyyCP53ve+x4033sjq1av5xS9+oedijSO1YYOk4+FI8pO9TUMM+2Xq730zFjhSjYJwvNKuuJ6UPLQ7mZ+OnvVKR3Wgr6DaJ9svABU2BVkXOtJe2YZ1o4mIDOdJZHtqrpgrx0Z0lPJF6s9Qayp8b/SsKY1mejDbgrDTtmbHZ/HixXzve9+b7GXMOkSuEbzwLD8wRGoHlBOwN9ZhHVSkaGu3zbyYVeSK++DOBFc83Mym1jRDLAtQKSxDCAQyL3iC/cYmFUaO1syNlNVNNZpi5sK5TqU8ibyCwaL9GemAy3ILjodaU//3RqPRTH1mW8p52osdzcTTkVZeNXFbzX6yhECIPp8bX1gYqGiJ74g8WERlrEg5Hi93Zjh5UZS/7Upy8QN72NFr40nVtj7YXC2BMjMsDFqYAmpDBSMccumpVfXhfOSoHMO6kUzfdjyP327pYWt3lqqgQWvKLTIdBPU6JEpYRkuonZGIjpEUHK9uDLO8JsjTLRlqQrLo+Uu9NxqNZmqzDwb10xItdjQjpj5iUhE0coMvPTKOl482RAMGMUvQknJpDJsETEFTwhn1AM+yEdCV8fjk35u57ZVuujKS5qRLNiewhspPGwIEEqdAjEUsQcqVhE1yZn9uyXlKwxnWlYqIyJwHkONJHCkJGJI/buvl3X/cRXfWKwovJ2yPxZWBPtPBjEvYFIRMgZTFkbWRiI6RegX9bVeSzrRHd8alM+1iCAhbgrqwSdqVetaURjPNMGbZoarFjmbE+BOln21Lc1B1gJSrhIJlqEjF9u4sYRPitotnq9xwxEQN9vQk2XEQPqZQUSTHkzzVnFGeOrnnKTymZcHtKwOC7qzMzeFS968JGUU+O4Olp8rFf682taaoDZn02B5dGS8/98tDvWff2dSJ9GugDCXOsh4kbElTwiFsGgRNOLwhwmlLY/zguc4S7sulBVkpRpJe6856+QjQwgqLjrRLypUkbUnacTi8Icx1J87VbecazTRitp2YaLGjGTGlxh1UBAQdaZdXOlUUp/9oB7W3j4/QySOUsIpa0J0dcFUeiRITFUGDigBcdFgNhhAsrQpw/oqqYR2UR4IhBKctjfGPPUlaU3b+PfGLtU2D/FiMoAFW7nTLEGAKScoFz5P85PR5zI0G8utY3RgZtl5oKMpNr7WkHK7/V0dRBKgubOYjUx0Zl5qQwcmLoiN+bzQazeShIzsazRD4IsB2JZevruP2V3t4uTNLc0JFLPwxDKahuqT8zFB2nOt1Ch+/NTXQ8wf6BIbM/enJehwzL8rnj2kYIGSGS0/1F0OHN4TY1JoZII4e3JngB891EjYFGaev+Nn/uyJg0JnzKHI8JXD8SIsQgqAhSThqZtabl/WtZ18HXJZbcNyecgdEgIQQxHJeAwFT8HJXdli3aI1GM7UYpLFyxqLFjqZsSnXuLJ8T5LNr6/nRcx302FlETuAMVYzsi47x0j+l6oP6iwxQkZQr1taNOGLT/33wZN8AU0OIfEeTP5OrN+sxN2oStz0scgNqpcSVqiancI3+HDAfQygRtL3HHrCOfRlwWZiK7F8EXVj7Uxc2R+UWrdFopjY6jaXRlGCwzp3n2jNs6Wwjbqshn+VseYUpruEmmY8l/Z/HlYLrnmrHEKLsepP+70PWkGzvtfM1S0srAwRNwbNtaT7w5z1kXUl9xMT21PNbhmraRwiELB6n4c8UK1Q7nlS1REurAvv02vsz9OT1vtqf6qChW841mhnIbIvsTGtTQc3EMJwxXtz26M3KslsZCyMYwTH6BvoP0//4NUpcJoCKgGB+zBrRiIVS70NzykUCYVMJleak6pby35eujEfIFCrqQ7GRl0AJGaPfv0FFV1xPkvUgZgnOXV45ovejHPzJ66vqwyRsj6aES8L2WFUf5ge5tnM/AlSuW7RGo5ke6MiORtOP4Tp35oT66k7KxUB1HpmGwPRkWREhUIJgXtSgJeXl/XtUMe9Aw0L/zMVEpbak/7ymYEEskBNrA9usB6P/+5B0VNu97zNkGTI/uiIWMJgTMujNOnRlXGrDFiHLIOV4BHPP4Qu+urBBa1pNqnE9cIXqbvOlhWEI3vr7XeMy5HO42p9yI0Cz7YdTo5nuzLYCZR3Z0QzLcKMC5oTMEX2RggaETCV0oPzanaABDRGTrNfnCbOowiIWMIpqcgTKfG9hzCKau86/PmIJllYGqMyFlEYyYqH/++Dk6pP8fd5PyTk5U585QQMz5/8jpWR+1MIUgqynojaOp8wMhYD6sEllQOBK8ikvA1gQM1kwwgjUSPFrf07br6JogKpPOREgjUYzvZhtaSwd2dEMSzmdO9GAclQeDoGKslgC8GRRMbEfdSm0MZe5mVaWAbe/dRHzYwFakg5ffryVbT02jRGTuVGLhO2xvdcm40gMARHLoD5i0hC1aE7a7I67RExYURsakNYqt8i2//tQmJry52oJ+trHMx7MCRmETCMfFVlcYbEn4ZB21HyrioDg8IYIVx5VzwkLwqy5eStbu20aIia1ESu/1pFEoMaDfe3+0mg0U4vZduxqsaMZlnI6d15XF1It6SXCNIWeMgdUBdjaa+dvFzQE+1UF2Jt0SNgeruwbP+F6Eg91BlITMpkfC+S7j0KWUZRaiViCxojJrriDBGrCKqKTclRayRTQELUGCB0ov8i2//sQtYx8aiqAivRELIOoJfLvy+ENkXxXlureUlPYF1RYnHVAFacuieVFw8bmFD1Zj6VVKsVW9B4OMkdrItmX7i+NRjO10JEdjaYf5dRtfP31jVz5jxaeaU3jyT5HY4ESAULAgdVB/uekRtpTLl0ZD0PAMfMirG4M8+a7dvJUcwrb9Ujm2rl91GNIOjN9kZeTF0W5/Mg6bnyuk6aEg5QQsgRHNKhC2daUQ1PCJWBIDqwO0Jn26Mh41IYl6QLH54gpyh6xUOp9mBsx2d7rkXbV482NmqT61bOsWxxj3eLYsFGRkczR0mg0mn1BR3Y0mhL4dRtDufZed6LgfffvpjXl4Mlc2zS5AmJD0J52+PBfmop8aAwh2LAjydkHVPKvljRxZ+BzS1Tdy/n37eYrx9UD8JPNXexJ9N14YYXFRw6t4aJVNYAqJn5gR4I7/t3N9h6HhOORtCXtaRcTQPStrSFilV1k2/99yLoq6uT77MRtSdCTA9yMy4mK6MniGo1mojBnWcWuFjuashmubmPd4hi/OH0h1zzZyua2DJlcL3ra8QhbgvqIRSi3mT/VnOLtd++kMmBgCEg7kq4hbJY9oD3tculfm/OXWQXDKHcnHL7xdDvLa0OsWxyjO+vx7WfaaUu5eKi6Gv/RXcgLHgA5QqefwvehJenQnnapDRt0pJX3TmPUGlU9S7lGf7rNW6PR7CuzrRtLix3NiBguQlEkBFIOX36sla3dWRZVBPKbt+15JG2PjAdSukRNQdcohmY5Ug3KTDsO+1VZ9GY9rn2yjZMWRrji4Waak26uYFgVCxdiCti/KkDEEuxJuiMu/DWEoDvrcf3THUWO0itqQqNuxdZt3hqNZqIwSlYwzlxmWSBLMxH4gqgxYtGUcKiPWHmhI6Vkb8LF9lRgJe1Cxz5MB5Uo0fPvblW3s6Uzw80vdbO5XbWRBwzwQziCPoPBfHu3YZTdel6I76T8bFuaioDB/JhFRcDY5xZx3eat0WgmAp3G0mjGiFIFt0lHknS8cZmL1ZJyqQwYPNaUwvaU0BFC5M0H+w8CTTiSiuDIC3/7Oyn7Qi5iiTFpEddt3hqNZryZbb8nWuxoxo1SBbe265U9VmI0JGyPaCB3ypJTOIURnVKMtPB3OEfpsWgR123eGo1mPJltreezLJClmUhKzVUaT6EDqgi5IiAIGiJvWGiIPtO/wgGkFQV+OCOZ7zSco3TYFGRd3SKu0WimLrOtQFmLHc244RfcVgaVg3DS8cb1AMubFwrByroQAJmcZ08gN23cFzthU4V8diecERf+FkasSqFbxDUazVQmbApCs6xoZ3a9Ws2E07/gtjsrx6UHQIkcdbayrDrIdSfOZV7UwhTKkNDxZH4CuplrWU86clSFv3oSuEajmc5ceVQ9wVmWx9I1O5pxp78vzZceb+VfzemiuVj9EUDIAkOqtvGh0l+WUH8yHtSEDM5fUYVlGAM8f0Km4NC6EOccWMWy6uCoC391i7hGo5muLKsO8MVjGyZ7GROOFjuaCaGw4DZkGbzv/t3sTap2cYGqtfH1jIGKnlx34lwArnmylY3NaXptD6dfG1dueDmZ3PiHzx1dj2WoC8ezq6kcR2mNRqOZaszWUzAtdjQTju+0fMXDzTzfniHrqdRWQMCSygCXr6njosNq8qKk0KSwPeXyt10Jbn2ll0RO/AihIjqfO7qey9fUFz3XeHY16RZxjUajmR5osaOZFNYtjvHEBcvY2Jzi8b0pQHDMvDBr5kYGiIX+guW9h8zhB+s9frulh+09NkurAvnU1USjW8Q1Go1m6qPFjmbSMITgqHlRjpoXHfF9LcPgvYfMGftFaTQajWbGobuxNBqNRqPRzGi02NFoNBqNRjOj0WJHo9FoNBrNjEaLHY1Go9FoNDMaLXY0Go1Go9HMaLTY0Wg0Go1GM6PRYkej0Wg0Gs2MRosdjUaj0Wg0MxotdjQajUaj0cxotNjRaDQajUYzo9FiR6PRaDQazYxGix2NRqPRaDQzGj0ItICWlhZc12X9+vWTvRSNRqPRaMpm/vz5/OpXv5rsZUxZtNgpIBQKkc1mJ3sZGo1Go9GMOfPnz5/sJUwaQkopJ3sRGo1Go9FoNOOFrtnRaDQajUYzo9FiR6PRaDQazYxGix2NRqPRaDQzGi12NBqNRqPRzGi02NFoNBqNRjOj0WJHo9FoNBrNjEaLHY1Go9FoNDMaLXY0Go1Go9HMaLTY0Wg0Go1GM6PRYkej0Wg0Gs2MRosdjUaj0Wg0MxotdjQajUaj0cxotNgZB+655x7OOeccVq1axerVq/ngBz/Ipk2bBtxuz549fPKTn+TYY49lzZo1XHrppezcuXMSVjwz0e/vxPPss8/ykY98hLVr13LYYYdx5plnctdddxXdJp1O87//+7+ccsopHH744Zx33nk8+uijk7PgGc7u3bs58sgjufLKK4su15/BxJBOp7n++utZt24dhx9+OG9729u48847B9xGfxbjj556PsbccccdXHXVVRxxxBG85S1vIZ1Oc/PNN9PW1sYvf/lLVq9eDUBXVxfvfOc7icfjvP/97ycYDPLTn/4U0zS56667qK2tneRXMr3R7+/E8+qrr3L22WdTXV3Nu9/9bmKxGPfddx//+te/uPLKK/nABz4AwKWXXspf//pX3v3ud7P//vtz2223sWXLFn7+85+zdu3aSX4VMwcpJf/xH//BY489xllnncW1116bv05/BuOP53l8+MMf5rHHHsu/z/fffz+PP/44X/7ylzn//PMB/VlMGFIzZmSzWblmzRp5zjnnSMdx8pe3tLTItWvXyve85z35y66//nq5YsUK+dxzz+Uv27JlizzkkEPktddeO6Hrnono93fi+chHPiKPOOIIuXfv3vxlruvK8847Tx5xxBEyHo/LRx55RC5fvlzedNNN+dskEgm5fv16edZZZ03Cqmcuv/zlL+XKlSvl8uXL5Wc/+9n85fozmBhuv/12uXz5cvmrX/0qf5nruvLMM8+Uxx9/vPQ8T38WE4hOY40hL7zwAr29vZx11lmYppm/vKGhgaOPPpqnn34amQuk3XPPPRxxxBEceuih+dstX76cY489lnvuuWfC1z7T0O/vxOK6Lk8++SQnnngic+fOzV9uGAZnnHEGyWSSF198kT/84Q8EAgHOPffc/G2i0SjvfOc7ef7559m2bdskrH7msWPHDr7xjW9w2WWXDbhOfwYTw+23386SJUu44IIL8pcZhsEnPvEJzj//fJLJpP4sJhAtdsaQQw45hPvuu483v/nNA67r6OjAMAyEEHR3d7Nz586ijdhn5cqVtLS00NLSMhFLnpHo93fiMQyDu+++myuuuGLAdR0dHQCYpsnmzZtZtmwZ0Wi06DYrV64EYPPmzeO/2BmO53lceeWVrFixgve///0Drtefwfhj2zabNm3iuOOOwzDUNptIJJBS8oY3vIHLLruMWCymP4sJRIudMSQYDHLAAQdQU1NTdPlzzz3H008/zZo1awBobm4GKDoD9mlsbASgqalpnFc7c9Hv78QjhGDx4sUsWrSo6PJkMsntt99ONBrlda97Hc3NzcybN2/A/f3PZc+ePROy3pnMz3/+czZv3szVV1+d32gL0Z/B+LNr1y5s22bhwoX87Gc/46STTuLII4/k2GOP5fvf/34+wq8/i4nDmuwFTAdaW1uHvD4UClFVVVXyuu7u7vzZ7sUXXwwohQ8QiUQG3D4cDgNqk9CMDv3+Tg2klHzhC1+gtbWVSy+9lFAoRCKRGPJzSaVSE73MGcVrr73Gt771LT7+8Y+z//77k8lkBtxG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",
      "text/plain": [
       "<Figure size 600x600 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "tips_v2 = pd.DataFrame()\n",
    "tips_v2[\"prediction\"] = pd.Series([float(s) for s in predictions_v2])\n",
    "tips_v2[\"original_data\"] = pd.Series([float(s) for s in Y_v2])\n",
    "sns.jointplot(x=\"original_data\", y=\"prediction\", data=tips_v2, height=6, ratio=7,\n",
    "              joint_kws={'line_kws': {'color': 'limegreen'}}, kind='reg')\n",
    "plt.xlabel('Mean delays (min)', fontsize=15)\n",
    "plt.ylabel('Predictions (min)', fontsize=15)\n",
    "plt.plot(list(range(-20, 5)), list(range(0, 25)), linestyle=':', color='r')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "988a3d1c-d336-4593-af3f-50544aeb5b63",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "poly_v2 = PolynomialFeatures(degree=2)\n",
    "regr_v2 = linear_model.LinearRegression()\n",
    "X_transformed = poly_v2.fit_transform(X_v2)\n",
    "regr_v2.fit(X_transformed, Y_v2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "be045a8b-6b06-4c39-8d83-7264a98cbd9c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MSE = 38.12229481381467\n"
     ]
    }
   ],
   "source": [
    "# Generating predictions using the trained model\n",
    "result_v2 = regr_v2.predict(X_transformed)\n",
    "\n",
    "# Calculating Mean Squared Error (MSE)\n",
    "mse_v2 = metrics.mean_squared_error(result_v2, Y_v2)\n",
    "print(\"MSE =\", mse_v2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "9e23abfa-95ae-420c-be33-6616ccb83db1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'2.58%'"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "icount_v2 = 0\n",
    "for i_v2, val_v2 in enumerate(Y_v2):\n",
    "    if abs(val_v2 - result_v2[i_v2]) > 15:\n",
    "        icount_v2 += 1\n",
    "\n",
    "# Calculating percentage based on the condition\n",
    "result_percentage_v2 = '{:.2f}%'.format(icount_v2 / len(result_v2) * 100)\n",
    "result_percentage_v2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "1cbde0c8-1836-43c9-ba11-6ec64211409f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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wYMceeSR87hajUaj0Wg0i4EFF+ExDIMbbrgBIcSY3/X19QFgmibPP/88UsqC4Emn04TDYQxjwWk4jUaj0Wg088yCUwdCCFavXs2qVatKHk+lUvz2t78lFotx/PHHs2PHDgDuu+8+zj//fF784hdz2mmn8alPfYp0Oj0fS9doNBqNRrNAWXARnnJIKfnEJz5Bd3c3733vewmHwwXBs337dq6++mpqamq45557+OUvf8nOnTv5yU9+oqM9Go1Go9FogEUgeKSUfOpTn+Kmm25iw4YNvOc97wHg3HPPpba2lquuuopYLAbAxo0baWxs5Ac/+AG33XYbr3zlK+dz6RqNRqPRaBYICzoE4jgOH/rQh/jVr37FySefzLe//W1s2wbgvPPO4/3vf39B7ARcfvnlADz44INzvl6NRqPRaDQLkwUb4Umn07zvfe/jvvvuY8OGDXz729+mpqZm0u2am5sBVfOj0Wg0Go1GAws0wuM4DldffTX33XcfF1xwAf/zP/8zRuxceeWVvP3tbx+z7QsvvADA6tWr52StGo1Go9FoFj4LUvB8/etfZ9OmTVx44YV84xvfIBwOj3lOQ0MD999/P9u2bSs85vs+3/zmNzFNk4svvngul6zRaDQajWYBs+BSWl1dXfzoRz/CsizOOeccbr755jHPOeuss/jQhz7E5s2bueqqq7jiiitoamri1ltvZcuWLXzgAx/giCOOmIfVazQajUajWYgsOMHz6KOP4jgOAJ/5zGfKPuf73/8+L3/5y/nFL37B1772NX72s5+Ry+U46qijuPbaa0sGjGo0Go1Go9EsOMGzceNGnn322Yqee/TRR/Otb31rllek0Wg0Go1msbMga3g0Go1Go9FoZhIteDQajUaj0Sx5tODRaDQajUaz5NGCR6PRaDQazZJHCx6NRjO/bNoEt94KnjffK9FoNEsYLXg0Gs388qlPwcaNsG4dXHvtfK9Go9EsUbTg0Wg084eUcPrp0N4O+/fDzp3zvSKNRrNE0YJHo9HMH0LAF74A+/bBH/4A73//fK9Io9EsURac8aBGozkMsW149avnexUajWYJoyM8Go1Go9Foljxa8Gg0Go1Go1nyaMGj0WjmnkQCDhyY71VoNJrDCC14NBrN3HPddbBmDVx8MfzmN+C6870ijUazxNGCR6PRzD0//CH4PvzpT/De96r2dI1Go5lF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",
      "text/plain": [
       "<Figure size 600x600 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Creating a DataFrame to visualize predictions against actual data\n",
    "tips_v2 = pd.DataFrame()\n",
    "tips_v2[\"prediction\"] = pd.Series([float(s) for s in result_v2])\n",
    "tips_v2[\"original_data\"] = pd.Series([float(s) for s in Y_v2])\n",
    "\n",
    "# Generating a joint plot to visualize predictions versus actual data\n",
    "sns.jointplot(x=\"original_data\", y=\"prediction\", data=tips_v2, height=6, ratio=7,\n",
    "              joint_kws={'line_kws': {'color': 'limegreen'}}, kind='reg')\n",
    "\n",
    "# Setting labels for the plot\n",
    "plt.xlabel('Mean delays (min)', fontsize=15)\n",
    "plt.ylabel('Predictions (min)', fontsize=15)\n",
    "\n",
    "# Plotting a reference line\n",
    "plt.plot(list(range(-5, 25)), list(range(-5, 25)), linestyle=':', color='r')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "6ae2b00d-d109-452d-8f71-d24fdff0f3df",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Splitting the data into training and testing sets\n",
    "X_train_v2, X_test_v2, Y_train_v2, Y_test_v2 = train_test_split(X_v2, Y_v2, test_size=0.3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "2b1fa9a3-c79c-4e5a-9a79-5f479df004ae",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(34024, 93)\n"
     ]
    }
   ],
   "source": [
    "print(X_train_v2.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "28fee2d4-2302-4dde-9280-7344c5b9ee16",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(34024, 93)"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train_v2.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "19fab2d4-751c-44b3-9fd9-64982ecde95c",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(14582, 93)"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_test_v2.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "cf66279f-bec4-45af-a2d4-5aa79cba41b0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean squared error = 37.701643368411695\n"
     ]
    }
   ],
   "source": [
    "# Creating polynomial features and performing linear regression on the training data\n",
    "poly = PolynomialFeatures(degree=2)\n",
    "regr = linear_model.LinearRegression()\n",
    "\n",
    "# Transforming the training features to polynomial features\n",
    "X_train_poly = poly.fit_transform(X_train_v2)\n",
    "regr.fit(X_train_poly, Y_train_v2)\n",
    "\n",
    "# Making predictions using the trained model on the training data\n",
    "predictions_train = regr.predict(X_train_poly)\n",
    "\n",
    "# Calculating the Mean Squared Error (MSE) on the training data\n",
    "mse_train = metrics.mean_squared_error(predictions_train, Y_train_v2)\n",
    "\n",
    "# Displaying the Mean Squared Error (MSE)\n",
    "print(\"Mean squared error =\", mse_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "8c1a5810-07b1-412c-90e3-fa9db7f57eff",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean squared error = 38.404664927645086\n"
     ]
    }
   ],
   "source": [
    "# Creating polynomial features and using the trained model to predict on the test data\n",
    "poly_v2 = PolynomialFeatures(degree=2)\n",
    "regr_v2 = linear_model.LinearRegression()\n",
    "\n",
    "# Transforming the test features to polynomial features\n",
    "X_test_poly = poly_v2.fit_transform(X_test_v2)\n",
    "regr_v2.fit(X_test_poly, Y_test_v2)\n",
    "\n",
    "# Making predictions using the trained model on the test data\n",
    "predictions_test = regr_v2.predict(X_test_poly)\n",
    "\n",
    "# Calculating the Mean Squared Error (MSE) on the test data\n",
    "mse_test = metrics.mean_squared_error(predictions_test, Y_test_v2)\n",
    "\n",
    "# Displaying the Mean Squared Error (MSE) on the test data\n",
    "print(\"Mean squared error =\", mse_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "59209f19-1882-4276-b4a9-5b96907ace12",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1185.6 -0.4 34.0\n",
      "1860.0 -2.1 41.0\n",
      "1138.0 -0.7 33.0\n",
      "1303.5 1.9 38.0\n",
      "2673.0 -2.7 49.0\n",
      "2845.1 6.7 60.0\n",
      "1059.8 4.4 37.0\n",
      "1260.9 4.5 40.0\n",
      "1424.3 5.3 43.0\n",
      "1527.0 5.9 45.0\n",
      "1050.7 6.6 39.0\n",
      "1184.7 6.6 41.0\n",
      "2172.1 6.4 53.0\n",
      "1069.8 6.3 39.0\n",
      "1632.4 6.6 47.0\n",
      "1981.8 8.5 53.0\n",
      "1915.8 6.2 50.0\n",
      "1714.6 7.6 49.0\n",
      "2657.3 8.5 60.0\n",
      "1577.0 7.3 47.0\n",
      "1308.0 8.8 45.0\n",
      "1422.4 5.3 43.0\n",
      "1259.3 8.5 44.0\n",
      "1239.3 6.8 42.0\n",
      "1204.3 6.3 41.0\n",
      "1368.8 5.0 42.0\n",
      "1484.4 7.5 46.0\n",
      "1322.7 5.0 41.3\n",
      "1067.4 16.3 49.0\n",
      "1059.6 10.4 43.0\n",
      "1683.9 9.0 50.0\n",
      "2239.8 6.7 54.0\n",
      "1871.3 6.7 50.0\n",
      "1107.3 7.2 40.5\n",
      "1053.1 8.5 41.0\n",
      "1060.7 9.4 42.0\n",
      "1402.8 6.5 44.0\n",
      "1330.3 6.5 43.0\n",
      "1429.1 6.2 44.0\n",
      "1234.7 7.9 43.0\n",
      "1335.2 7.5 44.0\n",
      "1491.2 7.4 46.0\n",
      "1149.5 8.1 42.0\n",
      "1056.7 7.5 40.0\n",
      "1483.9 7.5 46.0\n",
      "1484.0 7.5 46.0\n",
      "1801.9 7.6 50.0\n",
      "1199.1 7.4 42.0\n",
      "1728.2 7.4 49.0\n",
      "2733.2 6.7 59.0\n",
      "1672.1 7.1 48.0\n",
      "1229.2 6.9 42.0\n",
      "2244.8 7.6 55.0\n",
      "2226.6 6.8 54.0\n",
      "1325.1 6.6 43.0\n",
      "1342.8 7.4 44.0\n",
      "1061.0 6.4 39.0\n",
      "1109.0 9.7 43.0\n",
      "1075.0 10.2 43.0\n",
      "1206.5 10.3 45.0\n",
      "1363.2 10.1 47.0\n",
      "1197.2 8.4 43.0\n",
      "1315.1 8.7 45.0\n",
      "1398.4 9.6 47.0\n",
      "Total sum of squared differences = 801264.9740179777\n"
     ]
    }
   ],
   "source": [
    "# Initializing a variable to accumulate squared differences\n",
    "sum_squared_diff = 0\n",
    "\n",
    "# Looping through the predicted and actual values\n",
    "for values in zip(result_v2, Y_test_v2):\n",
    "    # Calculating squared differences between predicted and actual values\n",
    "    squared_diff = (float(values[0]) - float(values[1])) ** 2\n",
    "    sum_squared_diff += squared_diff  # Accumulating squared differences\n",
    "    \n",
    "    # Printing details if the squared difference is greater than 1000\n",
    "    if squared_diff > 10 ** 3:\n",
    "        print(\"{:<.1f} {:<.1f} {:<.1f}\".format(squared_diff, float(values[0]), float(values[1])))\n",
    "\n",
    "# Displaying the total sum of squared differences\n",
    "print(\"Total sum of squared differences =\", sum_squared_diff)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "16a46882-ce56-4307-9121-ab2257bcebd9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-2 {color: black;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Ridge(alpha=0.3)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Ridge</label><div class=\"sk-toggleable__content\"><pre>Ridge(alpha=0.3)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "Ridge(alpha=0.3)"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import Ridge\n",
    "from sklearn.preprocessing import PolynomialFeatures, StandardScaler\n",
    "\n",
    "# Creating polynomial features of degree 2\n",
    "poly_v2 = PolynomialFeatures(degree=2)\n",
    "X_poly_v2 = poly_v2.fit_transform(X_train_v2)\n",
    "\n",
    "# Standardizing the polynomial features\n",
    "scaler_v2 = StandardScaler()\n",
    "X_poly_scaled_v2 = scaler_v2.fit_transform(X_poly_v2)\n",
    "\n",
    "# Initializing and fitting the Ridge regression model\n",
    "ridgereg_v2 = Ridge(alpha=0.3)\n",
    "ridgereg_v2.fit(X_poly_scaled_v2, Y_train_v2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "fafd88ae-d2d3-4966-b828-0c6201a485bc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean squared error = 39.41712608742359\n"
     ]
    }
   ],
   "source": [
    "# Transforming the test features to polynomial features\n",
    "X_test_poly = poly_v2.transform(X_test_v2)\n",
    "\n",
    "# Standardizing the polynomial features of the test set\n",
    "X_test_poly_scaled = scaler_v2.transform(X_test_poly)\n",
    "\n",
    "# Making predictions using the Ridge regression model on the standardized polynomial test features\n",
    "predictions_test_ridge = ridgereg_v2.predict(X_test_poly_scaled)\n",
    "\n",
    "# Calculating the Mean Squared Error (MSE) on the test set predictions\n",
    "mse_test_ridge = metrics.mean_squared_error(predictions_test_ridge, Y_test_v2)\n",
    "\n",
    "# Displaying the Mean Squared Error (MSE) on the test set predictions\n",
    "print(\"Mean squared error =\", mse_test_ridge)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "be72c29e-787c-464d-9aa9-7266d45e8b50",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "n=1 alpha=0, MSE=39.493\n",
      "n=1 alpha=2, MSE=39.493\n",
      "n=1 alpha=4, MSE=39.493\n",
      "n=1 alpha=6, MSE=39.493\n",
      "n=1 alpha=8, MSE=39.493\n",
      "n=1 alpha=10, MSE=39.493\n",
      "n=1 alpha=12, MSE=39.493\n",
      "n=1 alpha=14, MSE=39.493\n",
      "n=1 alpha=16, MSE=39.493\n",
      "n=1 alpha=18, MSE=39.493\n",
      "n=2 alpha=0, MSE=40.028\n",
      "n=2 alpha=2, MSE=39.417\n",
      "n=2 alpha=4, MSE=39.417\n",
      "n=2 alpha=6, MSE=39.417\n",
      "n=2 alpha=8, MSE=39.417\n",
      "n=2 alpha=10, MSE=39.417\n",
      "n=2 alpha=12, MSE=39.417\n",
      "n=2 alpha=14, MSE=39.417\n",
      "n=2 alpha=16, MSE=39.417\n",
      "n=2 alpha=18, MSE=39.417\n"
     ]
    }
   ],
   "source": [
    "# Initializing the minimum score for comparison\n",
    "score_min = 10000\n",
    "\n",
    "# Looping through different polynomial degrees and alpha values for Ridge regression\n",
    "for pol_order in range(1, 3):\n",
    "    for alpha in range(0, 20, 2):\n",
    "        # Setting up Polynomial transformation and Standardization\n",
    "        poly_v2 = PolynomialFeatures(degree=pol_order)\n",
    "        scaler_v2 = StandardScaler()\n",
    "\n",
    "        # Transforming and scaling the training features\n",
    "        X_poly_train_v2 = poly_v2.fit_transform(X_train_v2)\n",
    "        X_poly_train_scaled_v2 = scaler_v2.fit_transform(X_poly_train_v2)\n",
    "\n",
    "        # Initializing and fitting the Ridge regression model\n",
    "        ridgereg_v2 = Ridge(alpha=alpha / 10)\n",
    "        ridgereg_v2.fit(X_poly_train_scaled_v2, Y_train_v2)\n",
    "\n",
    "        # Transforming and scaling the test features\n",
    "        X_poly_test_v2 = poly_v2.transform(X_test_v2)\n",
    "        X_poly_test_scaled_v2 = scaler_v2.transform(X_poly_test_v2)\n",
    "\n",
    "        # Making predictions on the scaled test data\n",
    "        result_v2 = ridgereg_v2.predict(X_poly_test_scaled_v2)\n",
    "\n",
    "        # Calculating the Mean Squared Error (MSE)\n",
    "        score_v2 = metrics.mean_squared_error(result_v2, Y_test_v2)\n",
    "\n",
    "        # Updating the minimum score and storing the best parameters\n",
    "        if score_v2 < score_min:\n",
    "            score_min = score_v2\n",
    "            parameters_v2 = [alpha / 10, pol_order]\n",
    "\n",
    "        print(\"n={} alpha={}, MSE={:<0.5}\".format(pol_order, alpha, score_v2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "307fe2ef-2f99-48d5-a930-20848cd4f8f3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "38.122294904920345\n"
     ]
    }
   ],
   "source": [
    "from sklearn.linear_model import Ridge\n",
    "from sklearn.preprocessing import PolynomialFeatures, StandardScaler\n",
    "from sklearn import metrics\n",
    "\n",
    "# Assuming parameters_updated[0] represents alpha value, and parameters_updated[1] represents polynomial degree\n",
    "\n",
    "# Polynomial feature transformation\n",
    "poly_updated = PolynomialFeatures(degree=parameters_v2[1])\n",
    "X_poly_updated = poly_updated.fit_transform(X_v2)\n",
    "\n",
    "# Feature scaling\n",
    "scaler_updated = StandardScaler()\n",
    "X_poly_scaled_updated = scaler_updated.fit_transform(X_poly_updated)\n",
    "\n",
    "# Fitting Ridge regression model\n",
    "ridgereg_updated = Ridge(alpha=parameters_v2[0])\n",
    "ridgereg_updated.fit(X_poly_scaled_updated, Y_v2)\n",
    "\n",
    "# Making predictions and calculating MSE\n",
    "result_updated = ridgereg_updated.predict(X_poly_scaled_updated)\n",
    "score_updated = metrics.mean_squared_error(result_updated, Y_v2)\n",
    "print(score_updated)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "2c18e5aa-1654-4599-9b94-b47adbf8869b",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Round: 1 \n",
      "\n",
      "Round: 2 \n",
      "\n",
      "Round: 3 \n",
      "\n",
      "Round: 4 \n",
      "\n",
      "Round: 5 \n",
      "\n",
      "Round: 6 \n",
      "\n",
      "Round: 7 \n",
      "\n",
      "Round: 8 \n",
      "\n",
      "Round: 9 \n",
      "\n",
      "Round: 10 \n",
      "\n",
      "Round: 11 \n",
      "\n",
      "Round: 12 \n",
      "\n",
      "Round: 13 \n",
      "\n",
      "Round: 14 \n",
      "\n",
      "Round: 15 \n",
      "\n",
      "Round: 16 \n",
      "\n",
      "Round: 17 \n",
      "\n",
      "Round: 18 \n",
      "\n",
      "Round: 19 \n",
      "\n",
      "Round: 20 \n",
      "\n",
      "Round: 21 \n",
      "\n",
      "Round: 22 \n",
      "\n",
      "Round: 23 \n",
      "\n",
      "Round: 24 \n",
      "\n",
      "Round: 25 \n",
      "\n",
      "Round: 26 \n",
      "\n",
      "Round: 27 \n",
      "\n",
      "Round: 28 \n",
      "\n",
      "Round: 29 \n",
      "\n",
      "Round: 30 \n",
      "\n",
      "Round: 31 \n",
      "\n",
      "Round: 32 \n",
      "\n",
      "Round: 33 \n",
      "\n",
      "Round: 34 \n",
      "\n",
      "Round: 35 \n",
      "\n",
      "Round: 36 \n",
      "\n",
      "Round: 37 \n",
      "\n",
      "Round: 38 \n",
      "\n",
      "Round: 39 \n",
      "\n",
      "Round: 40 \n",
      "\n",
      "Round: 41 \n",
      "\n",
      "Round: 42 \n",
      "\n",
      "Round: 43 \n",
      "\n",
      "Round: 44 \n",
      "\n",
      "Round: 45 \n",
      "\n",
      "Round: 46 \n",
      "\n",
      "Round: 47 \n",
      "\n",
      "Round: 48 \n",
      "\n",
      "Round: 49 \n",
      "\n",
      "Round: 50 \n",
      "\n",
      "Round: 51 \n",
      "\n",
      "Round: 52 \n",
      "\n",
      "Round: 53 \n",
      "\n",
      "Round: 54 \n",
      "\n",
      "Round: 55 \n",
      "\n",
      "Round: 56 \n",
      "\n",
      "Round: 57 \n",
      "\n",
      "Round: 58 \n",
      "\n",
      "Round: 59 \n",
      "\n",
      "Round: 60 \n",
      "\n",
      "Round: 61 \n",
      "\n",
      "Round: 62 \n",
      "\n",
      "Round: 63 \n",
      "\n",
      "Round: 64 \n",
      "\n",
      "Round: 65 \n",
      "\n",
      "Round: 66 \n",
      "\n",
      "Round: 67 \n",
      "\n",
      "Round: 68 \n",
      "\n",
      "Round: 69 \n",
      "\n",
      "Round: 70 \n",
      "\n",
      "Round: 71 \n",
      "\n",
      "Round: 72 \n",
      "\n",
      "Round: 73 \n",
      "\n",
      "Round: 74 \n",
      "\n",
      "Round: 75 \n",
      "\n",
      "Round: 76 \n",
      "\n",
      "Round: 77 \n",
      "\n",
      "Round: 78 \n",
      "\n",
      "Round: 79 \n",
      "\n",
      "Round: 80 \n",
      "\n",
      "Round: 81 \n",
      "\n",
      "Round: 82 \n",
      "\n",
      "Round: 83 \n",
      "\n",
      "Round: 84 \n",
      "\n",
      "Round: 85 \n",
      "\n",
      "Round: 86 \n",
      "\n",
      "Round: 87 \n",
      "\n",
      "Round: 88 \n",
      "\n",
      "Round: 89 \n",
      "\n",
      "Round: 90 \n",
      "\n",
      "Round: 91 \n",
      "\n",
      "Round: 92 \n",
      "\n"
     ]
    }
   ],
   "source": [
    "carrier_updated = 'WN'\n",
    "merged_df_test_updated = get_merged_delays(test_DF, carrier)\n",
    "# Retrieves and merges delayed flights data specific to a carrier for testing purposes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "d46e1907-37ff-418c-a724-dc79c4dc6ba8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: pyspark in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (3.5.0)\n",
      "Requirement already satisfied: py4j==0.10.9.7 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from pyspark) (0.10.9.7)\n",
      "Requirement already satisfied: py4j in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (0.10.9.7)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "23/11/29 23:29:06 WARN DAGScheduler: Broadcasting large task binary with size 2.2 MiB\n",
      "                                                                                \r"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[(0, 'ABQ'), (1, 'ALB'), (2, 'AMA'), (3, 'ATL'), (4, 'AUS')]"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "origin_labels_updated = [x.ORIGIN for x in  merged_df_test_updated.select('ORIGIN').collect()]\n",
    "label_encoder_updated = LabelEncoder()\n",
    "integer_encoded_updated = label_encoder_updated.fit_transform(origin_labels_updated)\n",
    "#__________________________________________________________\n",
    "# Creating a mapping between encoded codes and airport tags\n",
    "zipped_labels = zip(integer_encoded_updated, origin_labels_updated)\n",
    "airports_labels = list(set(list(zipped_labels)))\n",
    "airports_labels.sort(key = lambda x:x[0])\n",
    "airports_labels[:5]"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
